// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package local_project.harmonized_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: HARMONIZED Purpose: <br>
 * Description: Realiza ingest√£o dos dados AdventureWorks. <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class HARMONIZED implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(pathraw != null){
				
					this.setProperty("pathraw", pathraw.toString());
				
			}
			
			if(path_harm != null){
				
					this.setProperty("path_harm", path_harm.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String pathraw;
public String getPathraw(){
	return this.pathraw;
}
public String path_harm;
public String getPath_harm(){
	return this.path_harm;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "HARMONIZED";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				HARMONIZED.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(HARMONIZED.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplace_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ProductCategory_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ProductModelMain_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ProdModProdDesc_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_ProductDescription_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_CustomerAddress_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_Address_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_SalesOrderDetail_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputDelimited_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	






public static class MainStruct implements routines.system.IPersistableRow<MainStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String ProductNumber;

				public String getProductNumber () {
					return this.ProductNumber;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public Object StandardCost;

				public Object getStandardCost () {
					return this.StandardCost;
				}
				
			    public Object ListPrice;

				public Object getListPrice () {
					return this.ListPrice;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public BigDecimal Weight;

				public BigDecimal getWeight () {
					return this.Weight;
				}
				
			    public Integer ProductCategoryID;

				public Integer getProductCategoryID () {
					return this.ProductCategoryID;
				}
				
			    public String ProductCategoryName;

				public String getProductCategoryName () {
					return this.ProductCategoryName;
				}
				
			    public Integer ProductModelID;

				public Integer getProductModelID () {
					return this.ProductModelID;
				}
				
			    public String ProductModelName;

				public String getProductModelName () {
					return this.ProductModelName;
				}
				
			    public String ProductDescription;

				public String getProductDescription () {
					return this.ProductDescription;
				}
				
			    public java.util.Date SellStartDate;

				public java.util.Date getSellStartDate () {
					return this.SellStartDate;
				}
				
			    public java.util.Date SellEndDate;

				public java.util.Date getSellEndDate () {
					return this.SellEndDate;
				}
				
			    public java.util.Date DiscontinuedDate;

				public java.util.Date getDiscontinuedDate () {
					return this.DiscontinuedDate;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ProductID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final MainStruct other = (MainStruct) obj;
		
						if (this.ProductID != other.ProductID)
							return false;
					

		return true;
    }

	public void copyDataTo(MainStruct other) {

		other.ProductID = this.ProductID;
	            other.Name = this.Name;
	            other.ProductNumber = this.ProductNumber;
	            other.Color = this.Color;
	            other.StandardCost = this.StandardCost;
	            other.ListPrice = this.ListPrice;
	            other.Size = this.Size;
	            other.Weight = this.Weight;
	            other.ProductCategoryID = this.ProductCategoryID;
	            other.ProductCategoryName = this.ProductCategoryName;
	            other.ProductModelID = this.ProductModelID;
	            other.ProductModelName = this.ProductModelName;
	            other.ProductDescription = this.ProductDescription;
	            other.SellStartDate = this.SellStartDate;
	            other.SellEndDate = this.SellEndDate;
	            other.DiscontinuedDate = this.DiscontinuedDate;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(MainStruct other) {

		other.ProductID = this.ProductID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductID = dis.readInt();
					
					this.Name = readString(dis);
					
					this.ProductNumber = readString(dis);
					
					this.Color = readString(dis);
					
						this.StandardCost = (Object) dis.readObject();
					
						this.ListPrice = (Object) dis.readObject();
					
					this.Size = readString(dis);
					
						this.Weight = (BigDecimal) dis.readObject();
					
						this.ProductCategoryID = readInteger(dis);
					
					this.ProductCategoryName = readString(dis);
					
						this.ProductModelID = readInteger(dis);
					
					this.ProductModelName = readString(dis);
					
					this.ProductDescription = readString(dis);
					
					this.SellStartDate = readDate(dis);
					
					this.SellEndDate = readDate(dis);
					
					this.DiscontinuedDate = readDate(dis);
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductID = dis.readInt();
					
					this.Name = readString(dis);
					
					this.ProductNumber = readString(dis);
					
					this.Color = readString(dis);
					
						this.StandardCost = (Object) dis.readObject();
					
						this.ListPrice = (Object) dis.readObject();
					
					this.Size = readString(dis);
					
						this.Weight = (BigDecimal) dis.readObject();
					
						this.ProductCategoryID = readInteger(dis);
					
					this.ProductCategoryName = readString(dis);
					
						this.ProductModelID = readInteger(dis);
					
					this.ProductModelName = readString(dis);
					
					this.ProductDescription = readString(dis);
					
					this.SellStartDate = readDate(dis);
					
					this.SellEndDate = readDate(dis);
					
					this.DiscontinuedDate = readDate(dis);
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.ProductNumber,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// Object
				
       			    	dos.writeObject(this.StandardCost);
					
					// Object
				
       			    	dos.writeObject(this.ListPrice);
					
					// String
				
						writeString(this.Size,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Weight);
					
					// Integer
				
						writeInteger(this.ProductCategoryID,dos);
					
					// String
				
						writeString(this.ProductCategoryName,dos);
					
					// Integer
				
						writeInteger(this.ProductModelID,dos);
					
					// String
				
						writeString(this.ProductModelName,dos);
					
					// String
				
						writeString(this.ProductDescription,dos);
					
					// java.util.Date
				
						writeDate(this.SellStartDate,dos);
					
					// java.util.Date
				
						writeDate(this.SellEndDate,dos);
					
					// java.util.Date
				
						writeDate(this.DiscontinuedDate,dos);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.ProductNumber,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// Object
				
       			    	dos.writeObject(this.StandardCost);
					
					// Object
				
       			    	dos.writeObject(this.ListPrice);
					
					// String
				
						writeString(this.Size,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Weight);
					
					// Integer
				
						writeInteger(this.ProductCategoryID,dos);
					
					// String
				
						writeString(this.ProductCategoryName,dos);
					
					// Integer
				
						writeInteger(this.ProductModelID,dos);
					
					// String
				
						writeString(this.ProductModelName,dos);
					
					// String
				
						writeString(this.ProductDescription,dos);
					
					// java.util.Date
				
						writeDate(this.SellStartDate,dos);
					
					// java.util.Date
				
						writeDate(this.SellEndDate,dos);
					
					// java.util.Date
				
						writeDate(this.DiscontinuedDate,dos);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductID="+String.valueOf(ProductID));
		sb.append(",Name="+Name);
		sb.append(",ProductNumber="+ProductNumber);
		sb.append(",Color="+Color);
		sb.append(",StandardCost="+String.valueOf(StandardCost));
		sb.append(",ListPrice="+String.valueOf(ListPrice));
		sb.append(",Size="+Size);
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",ProductCategoryID="+String.valueOf(ProductCategoryID));
		sb.append(",ProductCategoryName="+ProductCategoryName);
		sb.append(",ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",ProductModelName="+ProductModelName);
		sb.append(",ProductDescription="+ProductDescription);
		sb.append(",SellStartDate="+String.valueOf(SellStartDate));
		sb.append(",SellEndDate="+String.valueOf(SellEndDate));
		sb.append(",DiscontinuedDate="+String.valueOf(DiscontinuedDate));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(MainStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class HProductStruct implements routines.system.IPersistableRow<HProductStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String ProductNumber;

				public String getProductNumber () {
					return this.ProductNumber;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public Object StandardCost;

				public Object getStandardCost () {
					return this.StandardCost;
				}
				
			    public Object ListPrice;

				public Object getListPrice () {
					return this.ListPrice;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public BigDecimal Weight;

				public BigDecimal getWeight () {
					return this.Weight;
				}
				
			    public Integer ProductCategoryID;

				public Integer getProductCategoryID () {
					return this.ProductCategoryID;
				}
				
			    public String ProductCategoryName;

				public String getProductCategoryName () {
					return this.ProductCategoryName;
				}
				
			    public Integer ProductModelID;

				public Integer getProductModelID () {
					return this.ProductModelID;
				}
				
			    public String ProductModelName;

				public String getProductModelName () {
					return this.ProductModelName;
				}
				
			    public String ProductDescription;

				public String getProductDescription () {
					return this.ProductDescription;
				}
				
			    public java.util.Date SellStartDate;

				public java.util.Date getSellStartDate () {
					return this.SellStartDate;
				}
				
			    public java.util.Date SellEndDate;

				public java.util.Date getSellEndDate () {
					return this.SellEndDate;
				}
				
			    public java.util.Date DiscontinuedDate;

				public java.util.Date getDiscontinuedDate () {
					return this.DiscontinuedDate;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ProductID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final HProductStruct other = (HProductStruct) obj;
		
						if (this.ProductID != other.ProductID)
							return false;
					

		return true;
    }

	public void copyDataTo(HProductStruct other) {

		other.ProductID = this.ProductID;
	            other.Name = this.Name;
	            other.ProductNumber = this.ProductNumber;
	            other.Color = this.Color;
	            other.StandardCost = this.StandardCost;
	            other.ListPrice = this.ListPrice;
	            other.Size = this.Size;
	            other.Weight = this.Weight;
	            other.ProductCategoryID = this.ProductCategoryID;
	            other.ProductCategoryName = this.ProductCategoryName;
	            other.ProductModelID = this.ProductModelID;
	            other.ProductModelName = this.ProductModelName;
	            other.ProductDescription = this.ProductDescription;
	            other.SellStartDate = this.SellStartDate;
	            other.SellEndDate = this.SellEndDate;
	            other.DiscontinuedDate = this.DiscontinuedDate;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(HProductStruct other) {

		other.ProductID = this.ProductID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductID = dis.readInt();
					
					this.Name = readString(dis);
					
					this.ProductNumber = readString(dis);
					
					this.Color = readString(dis);
					
						this.StandardCost = (Object) dis.readObject();
					
						this.ListPrice = (Object) dis.readObject();
					
					this.Size = readString(dis);
					
						this.Weight = (BigDecimal) dis.readObject();
					
						this.ProductCategoryID = readInteger(dis);
					
					this.ProductCategoryName = readString(dis);
					
						this.ProductModelID = readInteger(dis);
					
					this.ProductModelName = readString(dis);
					
					this.ProductDescription = readString(dis);
					
					this.SellStartDate = readDate(dis);
					
					this.SellEndDate = readDate(dis);
					
					this.DiscontinuedDate = readDate(dis);
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductID = dis.readInt();
					
					this.Name = readString(dis);
					
					this.ProductNumber = readString(dis);
					
					this.Color = readString(dis);
					
						this.StandardCost = (Object) dis.readObject();
					
						this.ListPrice = (Object) dis.readObject();
					
					this.Size = readString(dis);
					
						this.Weight = (BigDecimal) dis.readObject();
					
						this.ProductCategoryID = readInteger(dis);
					
					this.ProductCategoryName = readString(dis);
					
						this.ProductModelID = readInteger(dis);
					
					this.ProductModelName = readString(dis);
					
					this.ProductDescription = readString(dis);
					
					this.SellStartDate = readDate(dis);
					
					this.SellEndDate = readDate(dis);
					
					this.DiscontinuedDate = readDate(dis);
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.ProductNumber,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// Object
				
       			    	dos.writeObject(this.StandardCost);
					
					// Object
				
       			    	dos.writeObject(this.ListPrice);
					
					// String
				
						writeString(this.Size,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Weight);
					
					// Integer
				
						writeInteger(this.ProductCategoryID,dos);
					
					// String
				
						writeString(this.ProductCategoryName,dos);
					
					// Integer
				
						writeInteger(this.ProductModelID,dos);
					
					// String
				
						writeString(this.ProductModelName,dos);
					
					// String
				
						writeString(this.ProductDescription,dos);
					
					// java.util.Date
				
						writeDate(this.SellStartDate,dos);
					
					// java.util.Date
				
						writeDate(this.SellEndDate,dos);
					
					// java.util.Date
				
						writeDate(this.DiscontinuedDate,dos);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.ProductNumber,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// Object
				
       			    	dos.writeObject(this.StandardCost);
					
					// Object
				
       			    	dos.writeObject(this.ListPrice);
					
					// String
				
						writeString(this.Size,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Weight);
					
					// Integer
				
						writeInteger(this.ProductCategoryID,dos);
					
					// String
				
						writeString(this.ProductCategoryName,dos);
					
					// Integer
				
						writeInteger(this.ProductModelID,dos);
					
					// String
				
						writeString(this.ProductModelName,dos);
					
					// String
				
						writeString(this.ProductDescription,dos);
					
					// java.util.Date
				
						writeDate(this.SellStartDate,dos);
					
					// java.util.Date
				
						writeDate(this.SellEndDate,dos);
					
					// java.util.Date
				
						writeDate(this.DiscontinuedDate,dos);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductID="+String.valueOf(ProductID));
		sb.append(",Name="+Name);
		sb.append(",ProductNumber="+ProductNumber);
		sb.append(",Color="+Color);
		sb.append(",StandardCost="+String.valueOf(StandardCost));
		sb.append(",ListPrice="+String.valueOf(ListPrice));
		sb.append(",Size="+Size);
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",ProductCategoryID="+String.valueOf(ProductCategoryID));
		sb.append(",ProductCategoryName="+ProductCategoryName);
		sb.append(",ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",ProductModelName="+ProductModelName);
		sb.append(",ProductDescription="+ProductDescription);
		sb.append(",SellStartDate="+String.valueOf(SellStartDate));
		sb.append(",SellEndDate="+String.valueOf(SellEndDate));
		sb.append(",DiscontinuedDate="+String.valueOf(DiscontinuedDate));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(HProductStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ProductStruct implements routines.system.IPersistableRow<ProductStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];

	
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String ProductNumber;

				public String getProductNumber () {
					return this.ProductNumber;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public Object StandardCost;

				public Object getStandardCost () {
					return this.StandardCost;
				}
				
			    public Object ListPrice;

				public Object getListPrice () {
					return this.ListPrice;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public BigDecimal Weight;

				public BigDecimal getWeight () {
					return this.Weight;
				}
				
			    public Integer ProductCategoryID;

				public Integer getProductCategoryID () {
					return this.ProductCategoryID;
				}
				
			    public Integer ProductModelID;

				public Integer getProductModelID () {
					return this.ProductModelID;
				}
				
			    public java.util.Date SellStartDate;

				public java.util.Date getSellStartDate () {
					return this.SellStartDate;
				}
				
			    public java.util.Date SellEndDate;

				public java.util.Date getSellEndDate () {
					return this.SellEndDate;
				}
				
			    public java.util.Date DiscontinuedDate;

				public java.util.Date getDiscontinuedDate () {
					return this.DiscontinuedDate;
				}
				
			    public Object ThumbNailPhoto;

				public Object getThumbNailPhoto () {
					return this.ThumbNailPhoto;
				}
				
			    public String ThumbnailPhotoFileName;

				public String getThumbnailPhotoFileName () {
					return this.ThumbnailPhotoFileName;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductID = dis.readInt();
					
					this.Name = readString(dis);
					
					this.ProductNumber = readString(dis);
					
					this.Color = readString(dis);
					
						this.StandardCost = (Object) dis.readObject();
					
						this.ListPrice = (Object) dis.readObject();
					
					this.Size = readString(dis);
					
						this.Weight = (BigDecimal) dis.readObject();
					
						this.ProductCategoryID = readInteger(dis);
					
						this.ProductModelID = readInteger(dis);
					
					this.SellStartDate = readDate(dis);
					
					this.SellEndDate = readDate(dis);
					
					this.DiscontinuedDate = readDate(dis);
					
						this.ThumbNailPhoto = (Object) dis.readObject();
					
					this.ThumbnailPhotoFileName = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductID = dis.readInt();
					
					this.Name = readString(dis);
					
					this.ProductNumber = readString(dis);
					
					this.Color = readString(dis);
					
						this.StandardCost = (Object) dis.readObject();
					
						this.ListPrice = (Object) dis.readObject();
					
					this.Size = readString(dis);
					
						this.Weight = (BigDecimal) dis.readObject();
					
						this.ProductCategoryID = readInteger(dis);
					
						this.ProductModelID = readInteger(dis);
					
					this.SellStartDate = readDate(dis);
					
					this.SellEndDate = readDate(dis);
					
					this.DiscontinuedDate = readDate(dis);
					
						this.ThumbNailPhoto = (Object) dis.readObject();
					
					this.ThumbnailPhotoFileName = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.ProductNumber,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// Object
				
       			    	dos.writeObject(this.StandardCost);
					
					// Object
				
       			    	dos.writeObject(this.ListPrice);
					
					// String
				
						writeString(this.Size,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Weight);
					
					// Integer
				
						writeInteger(this.ProductCategoryID,dos);
					
					// Integer
				
						writeInteger(this.ProductModelID,dos);
					
					// java.util.Date
				
						writeDate(this.SellStartDate,dos);
					
					// java.util.Date
				
						writeDate(this.SellEndDate,dos);
					
					// java.util.Date
				
						writeDate(this.DiscontinuedDate,dos);
					
					// Object
				
       			    	dos.writeObject(this.ThumbNailPhoto);
					
					// String
				
						writeString(this.ThumbnailPhotoFileName,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.ProductNumber,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// Object
				
       			    	dos.writeObject(this.StandardCost);
					
					// Object
				
       			    	dos.writeObject(this.ListPrice);
					
					// String
				
						writeString(this.Size,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Weight);
					
					// Integer
				
						writeInteger(this.ProductCategoryID,dos);
					
					// Integer
				
						writeInteger(this.ProductModelID,dos);
					
					// java.util.Date
				
						writeDate(this.SellStartDate,dos);
					
					// java.util.Date
				
						writeDate(this.SellEndDate,dos);
					
					// java.util.Date
				
						writeDate(this.DiscontinuedDate,dos);
					
					// Object
				
       			    	dos.writeObject(this.ThumbNailPhoto);
					
					// String
				
						writeString(this.ThumbnailPhotoFileName,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductID="+String.valueOf(ProductID));
		sb.append(",Name="+Name);
		sb.append(",ProductNumber="+ProductNumber);
		sb.append(",Color="+Color);
		sb.append(",StandardCost="+String.valueOf(StandardCost));
		sb.append(",ListPrice="+String.valueOf(ListPrice));
		sb.append(",Size="+Size);
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",ProductCategoryID="+String.valueOf(ProductCategoryID));
		sb.append(",ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",SellStartDate="+String.valueOf(SellStartDate));
		sb.append(",SellEndDate="+String.valueOf(SellEndDate));
		sb.append(",DiscontinuedDate="+String.valueOf(DiscontinuedDate));
		sb.append(",ThumbNailPhoto="+String.valueOf(ThumbNailPhoto));
		sb.append(",ThumbnailPhotoFileName="+ThumbnailPhotoFileName);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ProductStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_1Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String ProductNumber;

				public String getProductNumber () {
					return this.ProductNumber;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public Object StandardCost;

				public Object getStandardCost () {
					return this.StandardCost;
				}
				
			    public Object ListPrice;

				public Object getListPrice () {
					return this.ListPrice;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public BigDecimal Weight;

				public BigDecimal getWeight () {
					return this.Weight;
				}
				
			    public Integer ProductCategoryID;

				public Integer getProductCategoryID () {
					return this.ProductCategoryID;
				}
				
			    public Integer ProductModelID;

				public Integer getProductModelID () {
					return this.ProductModelID;
				}
				
			    public java.util.Date SellStartDate;

				public java.util.Date getSellStartDate () {
					return this.SellStartDate;
				}
				
			    public java.util.Date SellEndDate;

				public java.util.Date getSellEndDate () {
					return this.SellEndDate;
				}
				
			    public java.util.Date DiscontinuedDate;

				public java.util.Date getDiscontinuedDate () {
					return this.DiscontinuedDate;
				}
				
			    public Object ThumbNailPhoto;

				public Object getThumbNailPhoto () {
					return this.ThumbNailPhoto;
				}
				
			    public String ThumbnailPhotoFileName;

				public String getThumbnailPhotoFileName () {
					return this.ThumbnailPhotoFileName;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ProductID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tFileInputDelimited_1Struct other = (after_tFileInputDelimited_1Struct) obj;
		
						if (this.ProductID != other.ProductID)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tFileInputDelimited_1Struct other) {

		other.ProductID = this.ProductID;
	            other.Name = this.Name;
	            other.ProductNumber = this.ProductNumber;
	            other.Color = this.Color;
	            other.StandardCost = this.StandardCost;
	            other.ListPrice = this.ListPrice;
	            other.Size = this.Size;
	            other.Weight = this.Weight;
	            other.ProductCategoryID = this.ProductCategoryID;
	            other.ProductModelID = this.ProductModelID;
	            other.SellStartDate = this.SellStartDate;
	            other.SellEndDate = this.SellEndDate;
	            other.DiscontinuedDate = this.DiscontinuedDate;
	            other.ThumbNailPhoto = this.ThumbNailPhoto;
	            other.ThumbnailPhotoFileName = this.ThumbnailPhotoFileName;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(after_tFileInputDelimited_1Struct other) {

		other.ProductID = this.ProductID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductID = dis.readInt();
					
					this.Name = readString(dis);
					
					this.ProductNumber = readString(dis);
					
					this.Color = readString(dis);
					
						this.StandardCost = (Object) dis.readObject();
					
						this.ListPrice = (Object) dis.readObject();
					
					this.Size = readString(dis);
					
						this.Weight = (BigDecimal) dis.readObject();
					
						this.ProductCategoryID = readInteger(dis);
					
						this.ProductModelID = readInteger(dis);
					
					this.SellStartDate = readDate(dis);
					
					this.SellEndDate = readDate(dis);
					
					this.DiscontinuedDate = readDate(dis);
					
						this.ThumbNailPhoto = (Object) dis.readObject();
					
					this.ThumbnailPhotoFileName = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductID = dis.readInt();
					
					this.Name = readString(dis);
					
					this.ProductNumber = readString(dis);
					
					this.Color = readString(dis);
					
						this.StandardCost = (Object) dis.readObject();
					
						this.ListPrice = (Object) dis.readObject();
					
					this.Size = readString(dis);
					
						this.Weight = (BigDecimal) dis.readObject();
					
						this.ProductCategoryID = readInteger(dis);
					
						this.ProductModelID = readInteger(dis);
					
					this.SellStartDate = readDate(dis);
					
					this.SellEndDate = readDate(dis);
					
					this.DiscontinuedDate = readDate(dis);
					
						this.ThumbNailPhoto = (Object) dis.readObject();
					
					this.ThumbnailPhotoFileName = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.ProductNumber,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// Object
				
       			    	dos.writeObject(this.StandardCost);
					
					// Object
				
       			    	dos.writeObject(this.ListPrice);
					
					// String
				
						writeString(this.Size,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Weight);
					
					// Integer
				
						writeInteger(this.ProductCategoryID,dos);
					
					// Integer
				
						writeInteger(this.ProductModelID,dos);
					
					// java.util.Date
				
						writeDate(this.SellStartDate,dos);
					
					// java.util.Date
				
						writeDate(this.SellEndDate,dos);
					
					// java.util.Date
				
						writeDate(this.DiscontinuedDate,dos);
					
					// Object
				
       			    	dos.writeObject(this.ThumbNailPhoto);
					
					// String
				
						writeString(this.ThumbnailPhotoFileName,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.ProductNumber,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// Object
				
       			    	dos.writeObject(this.StandardCost);
					
					// Object
				
       			    	dos.writeObject(this.ListPrice);
					
					// String
				
						writeString(this.Size,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Weight);
					
					// Integer
				
						writeInteger(this.ProductCategoryID,dos);
					
					// Integer
				
						writeInteger(this.ProductModelID,dos);
					
					// java.util.Date
				
						writeDate(this.SellStartDate,dos);
					
					// java.util.Date
				
						writeDate(this.SellEndDate,dos);
					
					// java.util.Date
				
						writeDate(this.DiscontinuedDate,dos);
					
					// Object
				
       			    	dos.writeObject(this.ThumbNailPhoto);
					
					// String
				
						writeString(this.ThumbnailPhotoFileName,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductID="+String.valueOf(ProductID));
		sb.append(",Name="+Name);
		sb.append(",ProductNumber="+ProductNumber);
		sb.append(",Color="+Color);
		sb.append(",StandardCost="+String.valueOf(StandardCost));
		sb.append(",ListPrice="+String.valueOf(ListPrice));
		sb.append(",Size="+Size);
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",ProductCategoryID="+String.valueOf(ProductCategoryID));
		sb.append(",ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",SellStartDate="+String.valueOf(SellStartDate));
		sb.append(",SellEndDate="+String.valueOf(SellEndDate));
		sb.append(",DiscontinuedDate="+String.valueOf(DiscontinuedDate));
		sb.append(",ThumbNailPhoto="+String.valueOf(ThumbNailPhoto));
		sb.append(",ThumbnailPhotoFileName="+ThumbnailPhotoFileName);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_2Process(globalMap);
		tFileInputDelimited_5Process(globalMap);

		ProductStruct Product = new ProductStruct();
HProductStruct HProduct = new HProductStruct();
HProductStruct Main = HProduct;






	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Main");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.path_harm+"HProduct.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("ProductID");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Name");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ProductNumber");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Color");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("StandardCost");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ListPrice");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Size");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Weight");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ProductCategoryID");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ProductCategoryName");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ProductModelID");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ProductModelName");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ProductDescription");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("SellStartDate");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("SellEndDate");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("DiscontinuedDate");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ModifiedDate");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"HProduct");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Product");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProductCategoryStruct> tHash_Lookup_ProductCategory = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProductCategoryStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProductCategoryStruct>) 
					globalMap.get( "tHash_Lookup_ProductCategory" ))
					;					
					
	

ProductCategoryStruct ProductCategoryHashKey = new ProductCategoryStruct();
ProductCategoryStruct ProductCategoryDefault = new ProductCategoryStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProductModelMainStruct> tHash_Lookup_ProductModelMain = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProductModelMainStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProductModelMainStruct>) 
					globalMap.get( "tHash_Lookup_ProductModelMain" ))
					;					
					
	

ProductModelMainStruct ProductModelMainHashKey = new ProductModelMainStruct();
ProductModelMainStruct ProductModelMainDefault = new ProductModelMainStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
HProductStruct HProduct_tmp = new HProductStruct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";

	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = context.pathraw+"Product.csv";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.pathraw+"Product.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						Product = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									Product = new ProductStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								Product.ProductID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductID", "Product", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_1.setException(new RuntimeException("Value is empty for column : 'ProductID' in 'Product' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							Product.Name = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							Product.ProductNumber = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							Product.Color = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							Product.StandardCost = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							Product.ListPrice = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							Product.Size = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								Product.Weight = ParserUtils.parseTo_BigDecimal(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Weight", "Product", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									Product.Weight = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								Product.ProductCategoryID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductCategoryID", "Product", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									Product.ProductCategoryID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								Product.ProductModelID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductModelID", "Product", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									Product.ProductModelID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									Product.SellStartDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SellStartDate", "Product", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									Product.SellStartDate = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									Product.SellEndDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SellEndDate", "Product", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									Product.SellEndDate = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									Product.DiscontinuedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"DiscontinuedDate", "Product", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									Product.DiscontinuedDate = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
							Product.ThumbNailPhoto = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
							Product.ThumbnailPhotoFileName = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
							Product.rowguid = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									Product.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "Product", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									Product.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					Product = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "Product"
if(Product != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Product"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "ProductCategory" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopProductCategory = false;
       		  	    	
       		  	    	
 							ProductCategoryStruct ProductCategoryObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
	                        		    	Object exprKeyValue_ProductCategory__ProductCategoryID = Product.ProductCategoryID ;
	                        		    	if(exprKeyValue_ProductCategory__ProductCategoryID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_2 = true;
	                        		    	} else {
                        		    			ProductCategoryHashKey.ProductCategoryID = (int)(Integer) exprKeyValue_ProductCategory__ProductCategoryID;
                        		    		}
                        		    		

								
		                        	ProductCategoryHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_ProductCategory.lookup( ProductCategoryHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ProductCategory != null && tHash_Lookup_ProductCategory.getCount(ProductCategoryHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ProductCategory' and it contains more one result from keys :  ProductCategory.ProductCategoryID = '" + ProductCategoryHashKey.ProductCategoryID + "'");
								} // G 071
							

							ProductCategoryStruct ProductCategory = null;
                    		  	 
							   
                    		  	 
	       		  	    	ProductCategoryStruct fromLookup_ProductCategory = null;
							ProductCategory = ProductCategoryDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ProductCategory !=null && tHash_Lookup_ProductCategory.hasNext()) { // G 099
								
							
								
								fromLookup_ProductCategory = tHash_Lookup_ProductCategory.next();

							
							
								} // G 099
							
							

							if(fromLookup_ProductCategory != null) {
								ProductCategory = fromLookup_ProductCategory;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ProductModelMain" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopProductModelMain = false;
       		  	    	
       		  	    	
 							ProductModelMainStruct ProductModelMainObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
	                        		    	Object exprKeyValue_ProductModelMain__ProductModelID = Product.ProductModelID ;
	                        		    	if(exprKeyValue_ProductModelMain__ProductModelID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_2 = true;
	                        		    	} else {
                        		    			ProductModelMainHashKey.ProductModelID = (int)(Integer) exprKeyValue_ProductModelMain__ProductModelID;
                        		    		}
                        		    		

								
		                        	ProductModelMainHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_ProductModelMain.lookup( ProductModelMainHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ProductModelMain != null && tHash_Lookup_ProductModelMain.getCount(ProductModelMainHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ProductModelMain' and it contains more one result from keys :  ProductModelMain.ProductModelID = '" + ProductModelMainHashKey.ProductModelID + "'");
								} // G 071
							

							ProductModelMainStruct ProductModelMain = null;
                    		  	 
							   
                    		  	 
	       		  	    	ProductModelMainStruct fromLookup_ProductModelMain = null;
							ProductModelMain = ProductModelMainDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ProductModelMain !=null && tHash_Lookup_ProductModelMain.hasNext()) { // G 099
								
							
								
								fromLookup_ProductModelMain = tHash_Lookup_ProductModelMain.next();

							
							
								} // G 099
							
							

							if(fromLookup_ProductModelMain != null) {
								ProductModelMain = fromLookup_ProductModelMain;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

HProduct = null;


// # Output table : 'HProduct'
HProduct_tmp.ProductID = Product.ProductID ;
HProduct_tmp.Name = Product.Name ;
HProduct_tmp.ProductNumber = Product.ProductNumber ;
HProduct_tmp.Color = Product.Color ;
HProduct_tmp.StandardCost = Product.StandardCost ;
HProduct_tmp.ListPrice = Product.ListPrice ;
HProduct_tmp.Size = Product.Size ;
HProduct_tmp.Weight = Product.Weight ;
HProduct_tmp.ProductCategoryID = Product.ProductCategoryID ;
HProduct_tmp.ProductCategoryName = ProductCategory.Name ;
HProduct_tmp.ProductModelID = Product.ProductModelID ;
HProduct_tmp.ProductModelName = ProductModelMain.Name ;
HProduct_tmp.ProductDescription = ProductModelMain.Description ;
HProduct_tmp.SellStartDate = Product.SellStartDate ;
HProduct_tmp.SellEndDate = Product.SellEndDate ;
HProduct_tmp.DiscontinuedDate = Product.DiscontinuedDate ;
HProduct_tmp.ModifiedDate = Product.ModifiedDate ;
HProduct = HProduct_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "HProduct"
if(HProduct != null) { 



	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"HProduct"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(HProduct.ProductID)							
				);


							  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(HProduct.Name != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(HProduct.Name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(HProduct.ProductNumber != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(HProduct.ProductNumber)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(HProduct.Color != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(HProduct.Color)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(HProduct.StandardCost != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(HProduct.StandardCost)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(HProduct.ListPrice != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(HProduct.ListPrice)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(HProduct.Size != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(HProduct.Size)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(HProduct.Weight != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								HProduct.Weight.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(HProduct.ProductCategoryID != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(HProduct.ProductCategoryID)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(HProduct.ProductCategoryName != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(HProduct.ProductCategoryName)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(HProduct.ProductModelID != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(HProduct.ProductModelID)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(HProduct.ProductModelName != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(HProduct.ProductModelName)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(HProduct.ProductDescription != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(HProduct.ProductDescription)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(HProduct.SellStartDate != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.format_Date(HProduct.SellStartDate, "dd-MM-yyyy")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(HProduct.SellEndDate != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.format_Date(HProduct.SellEndDate, "dd-MM-yyyy")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(HProduct.DiscontinuedDate != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.format_Date(HProduct.DiscontinuedDate, "dd-MM-yyyy")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(HProduct.ModifiedDate != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.format_Date(HProduct.ModifiedDate, "dd-MM-yyyy")				
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     Main = HProduct;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Main"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                        sb_tFileOutputDelimited_1.append(
                            Main.ProductID
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Main.Name != null) {
                        sb_tFileOutputDelimited_1.append(
                            Main.Name
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Main.ProductNumber != null) {
                        sb_tFileOutputDelimited_1.append(
                            Main.ProductNumber
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Main.Color != null) {
                        sb_tFileOutputDelimited_1.append(
                            Main.Color
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Main.StandardCost != null) {
                        sb_tFileOutputDelimited_1.append(
                            Main.StandardCost
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Main.ListPrice != null) {
                        sb_tFileOutputDelimited_1.append(
                            Main.ListPrice
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Main.Size != null) {
                        sb_tFileOutputDelimited_1.append(
                            Main.Size
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Main.Weight != null) {
                        sb_tFileOutputDelimited_1.append(
                            Main.Weight.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Main.ProductCategoryID != null) {
                        sb_tFileOutputDelimited_1.append(
                            Main.ProductCategoryID
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Main.ProductCategoryName != null) {
                        sb_tFileOutputDelimited_1.append(
                            Main.ProductCategoryName
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Main.ProductModelID != null) {
                        sb_tFileOutputDelimited_1.append(
                            Main.ProductModelID
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Main.ProductModelName != null) {
                        sb_tFileOutputDelimited_1.append(
                            Main.ProductModelName
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Main.ProductDescription != null) {
                        sb_tFileOutputDelimited_1.append(
                            Main.ProductDescription
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Main.SellStartDate != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(Main.SellStartDate, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Main.SellEndDate != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(Main.SellEndDate, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Main.DiscontinuedDate != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(Main.DiscontinuedDate, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Main.ModifiedDate != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(Main.ModifiedDate, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */

} // End of branch "HProduct"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "Product"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	



            }
            }finally{
                if(!((Object)(context.pathraw+"Product.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_ProductCategory != null) {
						tHash_Lookup_ProductCategory.endGet();
					}
					globalMap.remove( "tHash_Lookup_ProductCategory" );

					
					
				
					if(tHash_Lookup_ProductModelMain != null) {
						tHash_Lookup_ProductModelMain.endGet();
					}
					globalMap.remove( "tHash_Lookup_ProductModelMain" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Product");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"HProduct");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Main");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_ProductCategory"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_ProductModelMain"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";

	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class ProductCategoryStruct implements routines.system.IPersistableComparableLookupRow<ProductCategoryStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ProductCategoryID;

				public int getProductCategoryID () {
					return this.ProductCategoryID;
				}
				
			    public Integer ParentProductCategoryID;

				public Integer getParentProductCategoryID () {
					return this.ParentProductCategoryID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ProductCategoryID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ProductCategoryStruct other = (ProductCategoryStruct) obj;
		
						if (this.ProductCategoryID != other.ProductCategoryID)
							return false;
					

		return true;
    }

	public void copyDataTo(ProductCategoryStruct other) {

		other.ProductCategoryID = this.ProductCategoryID;
	            other.ParentProductCategoryID = this.ParentProductCategoryID;
	            other.Name = this.Name;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(ProductCategoryStruct other) {

		other.ProductCategoryID = this.ProductCategoryID;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductCategoryID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductCategoryID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductCategoryID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductCategoryID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.ParentProductCategoryID = readInteger(dis,ois);
					
						this.Name = readString(dis,ois);
					
       			    	this.rowguid = (Object) ois.readObject();
					
						this.ModifiedDate = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.ParentProductCategoryID = readInteger(dis,objectIn);
					
						this.Name = readString(dis,objectIn);
					
       			    	this.rowguid = (Object) objectIn.readObject();
					
						this.ModifiedDate = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.ParentProductCategoryID, dos, oos);
					
						writeString(this.Name, dos, oos);
					
       			    	oos.writeObject(this.rowguid);
					
						writeDate(this.ModifiedDate, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.ParentProductCategoryID, dos, objectOut);
					
						writeString(this.Name, dos, objectOut);
					
       			    	objectOut.writeObject(this.rowguid);
					
						writeDate(this.ModifiedDate, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductCategoryID="+String.valueOf(ProductCategoryID));
		sb.append(",ParentProductCategoryID="+String.valueOf(ParentProductCategoryID));
		sb.append(",Name="+Name);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ProductCategoryStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductCategoryID, other.ProductCategoryID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		ProductCategoryStruct ProductCategory = new ProductCategoryStruct();




	
	/**
	 * [tAdvancedHash_ProductCategory begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ProductCategory", false);
		start_Hash.put("tAdvancedHash_ProductCategory", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ProductCategory";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ProductCategory");
					}
				
		int tos_count_tAdvancedHash_ProductCategory = 0;
		

			   		// connection name:ProductCategory
			   		// source node:tFileInputDelimited_2 - inputs:(after_tFileInputDelimited_1) outputs:(ProductCategory,ProductCategory) | target node:tAdvancedHash_ProductCategory - inputs:(ProductCategory) outputs:()
			   		// linked node: tMap_2 - inputs:(Product,ProductCategory,ProductModelMain) outputs:(HProduct)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ProductCategory = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProductCategoryStruct> tHash_Lookup_ProductCategory =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ProductCategoryStruct>getLookup(matchingModeEnum_ProductCategory);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ProductCategory", tHash_Lookup_ProductCategory);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ProductCategory begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_2", false);
		start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_2";

	
		int tos_count_tFileInputDelimited_2 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try{
					
						Object filename_tFileInputDelimited_2 = context.pathraw+"ProductCategory.csv";
						if(filename_tFileInputDelimited_2 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
			if(footer_value_tFileInputDelimited_2 >0 || random_value_tFileInputDelimited_2 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(context.pathraw+"ProductCategory.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_2
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_2!=null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();
						
			    						ProductCategory = null;			
									
			    						ProductCategory = null;			
												
									boolean whetherReject_tFileInputDelimited_2 = false;
									ProductCategory = new ProductCategoryStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_2 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_2 = 0;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								ProductCategory.ProductCategoryID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductCategoryID", "ProductCategory", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_2.setException(new RuntimeException("Value is empty for column : 'ProductCategoryID' in 'ProductCategory' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 1;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    								ProductCategory.ParentProductCategoryID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ParentProductCategoryID", "ProductCategory", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									ProductCategory.ParentProductCategoryID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_2 = 2;
					
							ProductCategory.Name = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 3;
					
							ProductCategory.rowguid = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						
				
					columnIndexWithD_tFileInputDelimited_2 = 4;
					
						temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
						if(temp.length() > 0) {
							
								try {
								
    									ProductCategory.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_2) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",ex_tFileInputDelimited_2.getMessage());
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "ProductCategory", temp, ex_tFileInputDelimited_2), ex_tFileInputDelimited_2));
								}
    							
						} else {						
							
								
									ProductCategory.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_2.getException()!=null) {
											throw rowstate_tFileInputDelimited_2.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_2_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_2 = true;
			        					
			                					System.err.println(e.getMessage());
			                					ProductCategory = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_2 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 


	tos_count_tFileInputDelimited_2++;

/**
 * [tFileInputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_begin ] stop
 */
// Start of branch "ProductCategory"
if(ProductCategory != null) { 



	
	/**
	 * [tAdvancedHash_ProductCategory main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ProductCategory";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ProductCategory"
						
						);
					}
					


			   
			   

					ProductCategoryStruct ProductCategory_HashRow = new ProductCategoryStruct();
		   	   	   
				
				ProductCategory_HashRow.ProductCategoryID = ProductCategory.ProductCategoryID;
				
				ProductCategory_HashRow.ParentProductCategoryID = ProductCategory.ParentProductCategoryID;
				
				ProductCategory_HashRow.Name = ProductCategory.Name;
				
				ProductCategory_HashRow.rowguid = ProductCategory.rowguid;
				
				ProductCategory_HashRow.ModifiedDate = ProductCategory.ModifiedDate;
				
			tHash_Lookup_ProductCategory.put(ProductCategory_HashRow);
			
            




 


	tos_count_tAdvancedHash_ProductCategory++;

/**
 * [tAdvancedHash_ProductCategory main ] stop
 */
	
	/**
	 * [tAdvancedHash_ProductCategory process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ProductCategory";

	

 



/**
 * [tAdvancedHash_ProductCategory process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_ProductCategory process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ProductCategory";

	

 



/**
 * [tAdvancedHash_ProductCategory process_data_end ] stop
 */

} // End of branch "ProductCategory"




	
	/**
	 * [tFileInputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	



            }
            }finally{
                if(!((Object)(context.pathraw+"ProductCategory.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_2!=null){
                		fid_tFileInputDelimited_2.close();
                	}
                }
                if(fid_tFileInputDelimited_2!=null){
                	globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_2", true);
end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());




/**
 * [tFileInputDelimited_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ProductCategory end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ProductCategory";

	

tHash_Lookup_ProductCategory.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ProductCategory");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_ProductCategory", true);
end_Hash.put("tAdvancedHash_ProductCategory", System.currentTimeMillis());




/**
 * [tAdvancedHash_ProductCategory end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_2";

	

 



/**
 * [tFileInputDelimited_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ProductCategory finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ProductCategory";

	

 



/**
 * [tAdvancedHash_ProductCategory finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}
	


public static class ProductModelMainStruct implements routines.system.IPersistableComparableLookupRow<ProductModelMainStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ProductModelID;

				public int getProductModelID () {
					return this.ProductModelID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ProductModelID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ProductModelMainStruct other = (ProductModelMainStruct) obj;
		
						if (this.ProductModelID != other.ProductModelID)
							return false;
					

		return true;
    }

	public void copyDataTo(ProductModelMainStruct other) {

		other.ProductModelID = this.ProductModelID;
	            other.Name = this.Name;
	            other.Description = this.Description;
	            
	}

	public void copyKeysDataTo(ProductModelMainStruct other) {

		other.ProductModelID = this.ProductModelID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductModelID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductModelID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductModelID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductModelID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Name = readString(dis,ois);
					
						this.Description = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.Name = readString(dis,objectIn);
					
						this.Description = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Name, dos, oos);
					
						writeString(this.Description, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.Name, dos, objectOut);
					
						writeString(this.Description, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",Name="+Name);
		sb.append(",Description="+Description);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ProductModelMainStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductModelID, other.ProductModelID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ProductModelStruct implements routines.system.IPersistableComparableLookupRow<ProductModelStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ProductModelID;

				public int getProductModelID () {
					return this.ProductModelID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String CatalogDescription;

				public String getCatalogDescription () {
					return this.CatalogDescription;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ProductModelID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ProductModelStruct other = (ProductModelStruct) obj;
		
						if (this.ProductModelID != other.ProductModelID)
							return false;
					

		return true;
    }

	public void copyDataTo(ProductModelStruct other) {

		other.ProductModelID = this.ProductModelID;
	            other.Name = this.Name;
	            other.CatalogDescription = this.CatalogDescription;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(ProductModelStruct other) {

		other.ProductModelID = this.ProductModelID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductModelID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductModelID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductModelID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductModelID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Name = readString(dis,ois);
					
						this.CatalogDescription = readString(dis,ois);
					
       			    	this.rowguid = (Object) ois.readObject();
					
						this.ModifiedDate = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.Name = readString(dis,objectIn);
					
						this.CatalogDescription = readString(dis,objectIn);
					
       			    	this.rowguid = (Object) objectIn.readObject();
					
						this.ModifiedDate = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Name, dos, oos);
					
						writeString(this.CatalogDescription, dos, oos);
					
       			    	oos.writeObject(this.rowguid);
					
						writeDate(this.ModifiedDate, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.Name, dos, objectOut);
					
						writeString(this.CatalogDescription, dos, objectOut);
					
       			    	objectOut.writeObject(this.rowguid);
					
						writeDate(this.ModifiedDate, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",Name="+Name);
		sb.append(",CatalogDescription="+CatalogDescription);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ProductModelStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductModelID, other.ProductModelID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_5Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_5Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ProductModelID;

				public int getProductModelID () {
					return this.ProductModelID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String CatalogDescription;

				public String getCatalogDescription () {
					return this.CatalogDescription;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ProductModelID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tFileInputDelimited_5Struct other = (after_tFileInputDelimited_5Struct) obj;
		
						if (this.ProductModelID != other.ProductModelID)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tFileInputDelimited_5Struct other) {

		other.ProductModelID = this.ProductModelID;
	            other.Name = this.Name;
	            other.CatalogDescription = this.CatalogDescription;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(after_tFileInputDelimited_5Struct other) {

		other.ProductModelID = this.ProductModelID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductModelID = dis.readInt();
					
					this.Name = readString(dis);
					
					this.CatalogDescription = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductModelID = dis.readInt();
					
					this.Name = readString(dis);
					
					this.CatalogDescription = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductModelID);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.CatalogDescription,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductModelID);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.CatalogDescription,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",Name="+Name);
		sb.append(",CatalogDescription="+CatalogDescription);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductModelID, other.ProductModelID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_4Process(globalMap);
		tFileInputDelimited_6Process(globalMap);

		ProductModelStruct ProductModel = new ProductModelStruct();
ProductModelMainStruct ProductModelMain = new ProductModelMainStruct();





	
	/**
	 * [tAdvancedHash_ProductModelMain begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ProductModelMain", false);
		start_Hash.put("tAdvancedHash_ProductModelMain", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ProductModelMain";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ProductModelMain");
					}
				
		int tos_count_tAdvancedHash_ProductModelMain = 0;
		

			   		// connection name:ProductModelMain
			   		// source node:tMap_1 - inputs:(ProductModel,ProdModProdDesc,ProductDescription) outputs:(ProductModelMain,ProductModelMain) | target node:tAdvancedHash_ProductModelMain - inputs:(ProductModelMain) outputs:()
			   		// linked node: tMap_2 - inputs:(Product,ProductCategory,ProductModelMain) outputs:(HProduct)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ProductModelMain = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProductModelMainStruct> tHash_Lookup_ProductModelMain =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ProductModelMainStruct>getLookup(matchingModeEnum_ProductModelMain);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ProductModelMain", tHash_Lookup_ProductModelMain);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ProductModelMain begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ProductModel");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProdModProdDescStruct> tHash_Lookup_ProdModProdDesc = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProdModProdDescStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProdModProdDescStruct>) 
					globalMap.get( "tHash_Lookup_ProdModProdDesc" ))
					;					
					
	

ProdModProdDescStruct ProdModProdDescHashKey = new ProdModProdDescStruct();
ProdModProdDescStruct ProdModProdDescDefault = new ProdModProdDescStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProductDescriptionStruct> tHash_Lookup_ProductDescription = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProductDescriptionStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProductDescriptionStruct>) 
					globalMap.get( "tHash_Lookup_ProductDescription" ))
					;					
					
	

ProductDescriptionStruct ProductDescriptionHashKey = new ProductDescriptionStruct();
ProductDescriptionStruct ProductDescriptionDefault = new ProductDescriptionStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
ProductModelMainStruct ProductModelMain_tmp = new ProductModelMainStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_5", false);
		start_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_5";

	
		int tos_count_tFileInputDelimited_5 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_5 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_5 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_5 = null;
				int limit_tFileInputDelimited_5 = -1;
				try{
					
						Object filename_tFileInputDelimited_5 = context.pathraw+"ProductModel.csv";
						if(filename_tFileInputDelimited_5 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_5 = 0, random_value_tFileInputDelimited_5 = -1;
			if(footer_value_tFileInputDelimited_5 >0 || random_value_tFileInputDelimited_5 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_5 = new org.talend.fileprocess.FileInputDelimited(context.pathraw+"ProductModel.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_5
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_5!=null && fid_tFileInputDelimited_5.nextRecord()) {
						rowstate_tFileInputDelimited_5.reset();
						
			    						ProductModel = null;			
												
									boolean whetherReject_tFileInputDelimited_5 = false;
									ProductModel = new ProductModelStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_5 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_5 = 0;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    								ProductModel.ProductModelID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductModelID", "ProductModel", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_5.setException(new RuntimeException("Value is empty for column : 'ProductModelID' in 'ProductModel' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_5 = 1;
					
							ProductModel.Name = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 2;
					
							ProductModel.CatalogDescription = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 3;
					
							ProductModel.rowguid = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						
				
					columnIndexWithD_tFileInputDelimited_5 = 4;
					
						temp = fid_tFileInputDelimited_5.get(columnIndexWithD_tFileInputDelimited_5);
						if(temp.length() > 0) {
							
								try {
								
    									ProductModel.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_5) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",ex_tFileInputDelimited_5.getMessage());
									rowstate_tFileInputDelimited_5.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "ProductModel", temp, ex_tFileInputDelimited_5), ex_tFileInputDelimited_5));
								}
    							
						} else {						
							
								
									ProductModel.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_5.getException()!=null) {
											throw rowstate_tFileInputDelimited_5.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_5_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_5 = true;
			        					
			                					System.err.println(e.getMessage());
			                					ProductModel = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_5 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 


	tos_count_tFileInputDelimited_5++;

/**
 * [tFileInputDelimited_5 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_begin ] stop
 */
// Start of branch "ProductModel"
if(ProductModel != null) { 



	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ProductModel"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "ProdModProdDesc" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopProdModProdDesc = false;
       		  	    	
       		  	    	
 							ProdModProdDescStruct ProdModProdDescObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_ProdModProdDesc__ProductModelID = ProductModel.ProductModelID ;
	                        		    	if(exprKeyValue_ProdModProdDesc__ProductModelID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			ProdModProdDescHashKey.ProductModelID = (int)(Integer) exprKeyValue_ProdModProdDesc__ProductModelID;
                        		    		}
                        		    		

								
		                        	ProdModProdDescHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_ProdModProdDesc.lookup( ProdModProdDescHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ProdModProdDesc != null && tHash_Lookup_ProdModProdDesc.getCount(ProdModProdDescHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ProdModProdDesc' and it contains more one result from keys :  ProdModProdDesc.ProductModelID = '" + ProdModProdDescHashKey.ProductModelID + "'");
								} // G 071
							

							ProdModProdDescStruct ProdModProdDesc = null;
                    		  	 
							   
                    		  	 
	       		  	    	ProdModProdDescStruct fromLookup_ProdModProdDesc = null;
							ProdModProdDesc = ProdModProdDescDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ProdModProdDesc !=null && tHash_Lookup_ProdModProdDesc.hasNext()) { // G 099
								
							
								
								fromLookup_ProdModProdDesc = tHash_Lookup_ProdModProdDesc.next();

							
							
								} // G 099
							
							

							if(fromLookup_ProdModProdDesc != null) {
								ProdModProdDesc = fromLookup_ProdModProdDesc;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "ProductDescription" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopProductDescription = false;
       		  	    	
       		  	    	
 							ProductDescriptionStruct ProductDescriptionObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_ProductDescription__ProductDescriptionID = ProdModProdDesc.ProductDescriptionID ;
	                        		    	if(exprKeyValue_ProductDescription__ProductDescriptionID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			ProductDescriptionHashKey.ProductDescriptionID = (int)(Integer) exprKeyValue_ProductDescription__ProductDescriptionID;
                        		    		}
                        		    		

								
		                        	ProductDescriptionHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_ProductDescription.lookup( ProductDescriptionHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_ProductDescription != null && tHash_Lookup_ProductDescription.getCount(ProductDescriptionHashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'ProductDescription' and it contains more one result from keys :  ProductDescription.ProductDescriptionID = '" + ProductDescriptionHashKey.ProductDescriptionID + "'");
								} // G 071
							

							ProductDescriptionStruct ProductDescription = null;
                    		  	 
							   
                    		  	 
	       		  	    	ProductDescriptionStruct fromLookup_ProductDescription = null;
							ProductDescription = ProductDescriptionDefault;
										 
							
								 
							
							
								if (tHash_Lookup_ProductDescription !=null && tHash_Lookup_ProductDescription.hasNext()) { // G 099
								
							
								
								fromLookup_ProductDescription = tHash_Lookup_ProductDescription.next();

							
							
								} // G 099
							
							

							if(fromLookup_ProductDescription != null) {
								ProductDescription = fromLookup_ProductDescription;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

ProductModelMain = null;


// # Output table : 'ProductModelMain'
ProductModelMain_tmp.ProductModelID = ProductModel.ProductModelID ;
ProductModelMain_tmp.Name = ProductModel.Name ;
ProductModelMain_tmp.Description = ProductDescription.Description ;
ProductModelMain = ProductModelMain_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "ProductModelMain"
if(ProductModelMain != null) { 



	
	/**
	 * [tAdvancedHash_ProductModelMain main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ProductModelMain";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ProductModelMain"
						
						);
					}
					


			   
			   

					ProductModelMainStruct ProductModelMain_HashRow = new ProductModelMainStruct();
		   	   	   
				
				ProductModelMain_HashRow.ProductModelID = ProductModelMain.ProductModelID;
				
				ProductModelMain_HashRow.Name = ProductModelMain.Name;
				
				ProductModelMain_HashRow.Description = ProductModelMain.Description;
				
			tHash_Lookup_ProductModelMain.put(ProductModelMain_HashRow);
			
            




 


	tos_count_tAdvancedHash_ProductModelMain++;

/**
 * [tAdvancedHash_ProductModelMain main ] stop
 */
	
	/**
	 * [tAdvancedHash_ProductModelMain process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ProductModelMain";

	

 



/**
 * [tAdvancedHash_ProductModelMain process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_ProductModelMain process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ProductModelMain";

	

 



/**
 * [tAdvancedHash_ProductModelMain process_data_end ] stop
 */

} // End of branch "ProductModelMain"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */

} // End of branch "ProductModel"




	
	/**
	 * [tFileInputDelimited_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_5 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	



            }
            }finally{
                if(!((Object)(context.pathraw+"ProductModel.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_5!=null){
                		fid_tFileInputDelimited_5.close();
                	}
                }
                if(fid_tFileInputDelimited_5!=null){
                	globalMap.put("tFileInputDelimited_5_NB_LINE", fid_tFileInputDelimited_5.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_5", true);
end_Hash.put("tFileInputDelimited_5", System.currentTimeMillis());




/**
 * [tFileInputDelimited_5 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_ProdModProdDesc != null) {
						tHash_Lookup_ProdModProdDesc.endGet();
					}
					globalMap.remove( "tHash_Lookup_ProdModProdDesc" );

					
					
				
					if(tHash_Lookup_ProductDescription != null) {
						tHash_Lookup_ProductDescription.endGet();
					}
					globalMap.remove( "tHash_Lookup_ProductDescription" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ProductModel");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ProductModelMain end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ProductModelMain";

	

tHash_Lookup_ProductModelMain.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ProductModelMain");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_ProductModelMain", true);
end_Hash.put("tAdvancedHash_ProductModelMain", System.currentTimeMillis());




/**
 * [tAdvancedHash_ProductModelMain end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ProdModProdDesc"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_ProductDescription"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_5 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_5";

	

 



/**
 * [tFileInputDelimited_5 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ProductModelMain finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ProductModelMain";

	

 



/**
 * [tAdvancedHash_ProductModelMain finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_5_SUBPROCESS_STATE", 1);
	}
	


public static class ProdModProdDescStruct implements routines.system.IPersistableComparableLookupRow<ProdModProdDescStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ProductModelID;

				public int getProductModelID () {
					return this.ProductModelID;
				}
				
			    public int ProductDescriptionID;

				public int getProductDescriptionID () {
					return this.ProductDescriptionID;
				}
				
			    public String Culture;

				public String getCulture () {
					return this.Culture;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ProductModelID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ProdModProdDescStruct other = (ProdModProdDescStruct) obj;
		
						if (this.ProductModelID != other.ProductModelID)
							return false;
					

		return true;
    }

	public void copyDataTo(ProdModProdDescStruct other) {

		other.ProductModelID = this.ProductModelID;
	            other.ProductDescriptionID = this.ProductDescriptionID;
	            other.Culture = this.Culture;
	            
	}

	public void copyKeysDataTo(ProdModProdDescStruct other) {

		other.ProductModelID = this.ProductModelID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductModelID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductModelID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductModelID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductModelID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.ProductDescriptionID = dis.readInt();
					
						this.Culture = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.ProductDescriptionID = objectIn.readInt();
					
						this.Culture = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.ProductDescriptionID);
					
						writeString(this.Culture, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.ProductDescriptionID);
					
						writeString(this.Culture, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",ProductDescriptionID="+String.valueOf(ProductDescriptionID));
		sb.append(",Culture="+Culture);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ProdModProdDescStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductModelID, other.ProductModelID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class ProdModProdDescOrinStruct implements routines.system.IPersistableRow<ProdModProdDescOrinStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];

	
			    public int ProductModelID;

				public int getProductModelID () {
					return this.ProductModelID;
				}
				
			    public int ProductDescriptionID;

				public int getProductDescriptionID () {
					return this.ProductDescriptionID;
				}
				
			    public String Culture;

				public String getCulture () {
					return this.Culture;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductModelID = dis.readInt();
					
			        this.ProductDescriptionID = dis.readInt();
					
					this.Culture = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductModelID = dis.readInt();
					
			        this.ProductDescriptionID = dis.readInt();
					
					this.Culture = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductModelID);
					
					// int
				
		            	dos.writeInt(this.ProductDescriptionID);
					
					// String
				
						writeString(this.Culture,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductModelID);
					
					// int
				
		            	dos.writeInt(this.ProductDescriptionID);
					
					// String
				
						writeString(this.Culture,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",ProductDescriptionID="+String.valueOf(ProductDescriptionID));
		sb.append(",Culture="+Culture);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ProdModProdDescOrinStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		ProdModProdDescOrinStruct ProdModProdDescOrin = new ProdModProdDescOrinStruct();
ProdModProdDescStruct ProdModProdDesc = new ProdModProdDescStruct();





	
	/**
	 * [tAdvancedHash_ProdModProdDesc begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ProdModProdDesc", false);
		start_Hash.put("tAdvancedHash_ProdModProdDesc", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ProdModProdDesc";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ProdModProdDesc");
					}
				
		int tos_count_tAdvancedHash_ProdModProdDesc = 0;
		

			   		// connection name:ProdModProdDesc
			   		// source node:tMap_3 - inputs:(ProdModProdDescOrin) outputs:(ProdModProdDesc,ProdModProdDesc) | target node:tAdvancedHash_ProdModProdDesc - inputs:(ProdModProdDesc) outputs:()
			   		// linked node: tMap_1 - inputs:(ProductModel,ProdModProdDesc,ProductDescription) outputs:(ProductModelMain,ProductModelMain)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ProdModProdDesc = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProdModProdDescStruct> tHash_Lookup_ProdModProdDesc =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ProdModProdDescStruct>getLookup(matchingModeEnum_ProdModProdDesc);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ProdModProdDesc", tHash_Lookup_ProdModProdDesc);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ProdModProdDesc begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ProdModProdDescOrin");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
ProdModProdDescStruct ProdModProdDesc_tmp = new ProdModProdDescStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_4", false);
		start_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_4";

	
		int tos_count_tFileInputDelimited_4 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_4 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_4 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_4 = null;
				int limit_tFileInputDelimited_4 = -1;
				try{
					
						Object filename_tFileInputDelimited_4 = context.pathraw+"ProductModelProductDescription.csv";
						if(filename_tFileInputDelimited_4 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_4 = 0, random_value_tFileInputDelimited_4 = -1;
			if(footer_value_tFileInputDelimited_4 >0 || random_value_tFileInputDelimited_4 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_4 = new org.talend.fileprocess.FileInputDelimited(context.pathraw+"ProductModelProductDescription.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_4
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_4!=null && fid_tFileInputDelimited_4.nextRecord()) {
						rowstate_tFileInputDelimited_4.reset();
						
			    						ProdModProdDescOrin = null;			
												
									boolean whetherReject_tFileInputDelimited_4 = false;
									ProdModProdDescOrin = new ProdModProdDescOrinStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_4 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_4 = 0;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    								ProdModProdDescOrin.ProductModelID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductModelID", "ProdModProdDescOrin", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_4.setException(new RuntimeException("Value is empty for column : 'ProductModelID' in 'ProdModProdDescOrin' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 1;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4).trim();
						if(temp.length() > 0) {
							
								try {
								
    								ProdModProdDescOrin.ProductDescriptionID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductDescriptionID", "ProdModProdDescOrin", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_4.setException(new RuntimeException("Value is empty for column : 'ProductDescriptionID' in 'ProdModProdDescOrin' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_4 = 2;
					
							ProdModProdDescOrin.Culture = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4).trim();
						
				
					columnIndexWithD_tFileInputDelimited_4 = 3;
					
							ProdModProdDescOrin.rowguid = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						
				
					columnIndexWithD_tFileInputDelimited_4 = 4;
					
						temp = fid_tFileInputDelimited_4.get(columnIndexWithD_tFileInputDelimited_4);
						if(temp.length() > 0) {
							
								try {
								
    									ProdModProdDescOrin.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_4) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",ex_tFileInputDelimited_4.getMessage());
									rowstate_tFileInputDelimited_4.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "ProdModProdDescOrin", temp, ex_tFileInputDelimited_4), ex_tFileInputDelimited_4));
								}
    							
						} else {						
							
								
									ProdModProdDescOrin.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_4.getException()!=null) {
											throw rowstate_tFileInputDelimited_4.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_4_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_4 = true;
			        					
			                					System.err.println(e.getMessage());
			                					ProdModProdDescOrin = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_4 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 


	tos_count_tFileInputDelimited_4++;

/**
 * [tFileInputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_begin ] stop
 */
// Start of branch "ProdModProdDescOrin"
if(ProdModProdDescOrin != null) { 



	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ProdModProdDescOrin"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

ProdModProdDesc = null;


// # Output table : 'ProdModProdDesc'
// # Filter conditions 
if( 

ProdModProdDescOrin.Culture.equals("en")

 ) {
ProdModProdDesc_tmp.ProductModelID = ProdModProdDescOrin.ProductModelID ;
ProdModProdDesc_tmp.ProductDescriptionID = ProdModProdDescOrin.ProductDescriptionID ;
ProdModProdDesc_tmp.Culture = ProdModProdDescOrin.Culture;
ProdModProdDesc = ProdModProdDesc_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "ProdModProdDesc"
if(ProdModProdDesc != null) { 



	
	/**
	 * [tAdvancedHash_ProdModProdDesc main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ProdModProdDesc";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ProdModProdDesc"
						
						);
					}
					


			   
			   

					ProdModProdDescStruct ProdModProdDesc_HashRow = new ProdModProdDescStruct();
		   	   	   
				
				ProdModProdDesc_HashRow.ProductModelID = ProdModProdDesc.ProductModelID;
				
				ProdModProdDesc_HashRow.ProductDescriptionID = ProdModProdDesc.ProductDescriptionID;
				
				ProdModProdDesc_HashRow.Culture = ProdModProdDesc.Culture;
				
			tHash_Lookup_ProdModProdDesc.put(ProdModProdDesc_HashRow);
			
            




 


	tos_count_tAdvancedHash_ProdModProdDesc++;

/**
 * [tAdvancedHash_ProdModProdDesc main ] stop
 */
	
	/**
	 * [tAdvancedHash_ProdModProdDesc process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ProdModProdDesc";

	

 



/**
 * [tAdvancedHash_ProdModProdDesc process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_ProdModProdDesc process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ProdModProdDesc";

	

 



/**
 * [tAdvancedHash_ProdModProdDesc process_data_end ] stop
 */

} // End of branch "ProdModProdDesc"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */

} // End of branch "ProdModProdDescOrin"




	
	/**
	 * [tFileInputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	



            }
            }finally{
                if(!((Object)(context.pathraw+"ProductModelProductDescription.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_4!=null){
                		fid_tFileInputDelimited_4.close();
                	}
                }
                if(fid_tFileInputDelimited_4!=null){
                	globalMap.put("tFileInputDelimited_4_NB_LINE", fid_tFileInputDelimited_4.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_4", true);
end_Hash.put("tFileInputDelimited_4", System.currentTimeMillis());




/**
 * [tFileInputDelimited_4 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ProdModProdDescOrin");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ProdModProdDesc end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ProdModProdDesc";

	

tHash_Lookup_ProdModProdDesc.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ProdModProdDesc");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_ProdModProdDesc", true);
end_Hash.put("tAdvancedHash_ProdModProdDesc", System.currentTimeMillis());




/**
 * [tAdvancedHash_ProdModProdDesc end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_4";

	

 



/**
 * [tFileInputDelimited_4 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ProdModProdDesc finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ProdModProdDesc";

	

 



/**
 * [tAdvancedHash_ProdModProdDesc finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_4_SUBPROCESS_STATE", 1);
	}
	


public static class ProductDescriptionStruct implements routines.system.IPersistableComparableLookupRow<ProductDescriptionStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ProductDescriptionID;

				public int getProductDescriptionID () {
					return this.ProductDescriptionID;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ProductDescriptionID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ProductDescriptionStruct other = (ProductDescriptionStruct) obj;
		
						if (this.ProductDescriptionID != other.ProductDescriptionID)
							return false;
					

		return true;
    }

	public void copyDataTo(ProductDescriptionStruct other) {

		other.ProductDescriptionID = this.ProductDescriptionID;
	            other.Description = this.Description;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(ProductDescriptionStruct other) {

		other.ProductDescriptionID = this.ProductDescriptionID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductDescriptionID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.ProductDescriptionID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductDescriptionID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductDescriptionID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Description = readString(dis,ois);
					
       			    	this.rowguid = (Object) ois.readObject();
					
						this.ModifiedDate = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.Description = readString(dis,objectIn);
					
       			    	this.rowguid = (Object) objectIn.readObject();
					
						this.ModifiedDate = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Description, dos, oos);
					
       			    	oos.writeObject(this.rowguid);
					
						writeDate(this.ModifiedDate, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.Description, dos, objectOut);
					
       			    	objectOut.writeObject(this.rowguid);
					
						writeDate(this.ModifiedDate, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductDescriptionID="+String.valueOf(ProductDescriptionID));
		sb.append(",Description="+Description);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ProductDescriptionStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductDescriptionID, other.ProductDescriptionID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		ProductDescriptionStruct ProductDescription = new ProductDescriptionStruct();




	
	/**
	 * [tAdvancedHash_ProductDescription begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_ProductDescription", false);
		start_Hash.put("tAdvancedHash_ProductDescription", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_ProductDescription";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ProductDescription");
					}
				
		int tos_count_tAdvancedHash_ProductDescription = 0;
		

			   		// connection name:ProductDescription
			   		// source node:tFileInputDelimited_6 - inputs:(after_tFileInputDelimited_5) outputs:(ProductDescription,ProductDescription) | target node:tAdvancedHash_ProductDescription - inputs:(ProductDescription) outputs:()
			   		// linked node: tMap_1 - inputs:(ProductModel,ProdModProdDesc,ProductDescription) outputs:(ProductModelMain,ProductModelMain)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_ProductDescription = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<ProductDescriptionStruct> tHash_Lookup_ProductDescription =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<ProductDescriptionStruct>getLookup(matchingModeEnum_ProductDescription);
	   						   
		   	   	   globalMap.put("tHash_Lookup_ProductDescription", tHash_Lookup_ProductDescription);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_ProductDescription begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_6", false);
		start_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_6";

	
		int tos_count_tFileInputDelimited_6 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_6 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_6 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_6 = null;
				int limit_tFileInputDelimited_6 = -1;
				try{
					
						Object filename_tFileInputDelimited_6 = context.pathraw+"ProductDescription.csv";
						if(filename_tFileInputDelimited_6 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_6 = 0, random_value_tFileInputDelimited_6 = -1;
			if(footer_value_tFileInputDelimited_6 >0 || random_value_tFileInputDelimited_6 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_6 = new org.talend.fileprocess.FileInputDelimited(context.pathraw+"ProductDescription.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_6
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_6!=null && fid_tFileInputDelimited_6.nextRecord()) {
						rowstate_tFileInputDelimited_6.reset();
						
			    						ProductDescription = null;			
									
			    						ProductDescription = null;			
												
									boolean whetherReject_tFileInputDelimited_6 = false;
									ProductDescription = new ProductDescriptionStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_6 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_6 = 0;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    								ProductDescription.ProductDescriptionID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductDescriptionID", "ProductDescription", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_6.setException(new RuntimeException("Value is empty for column : 'ProductDescriptionID' in 'ProductDescription' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_6 = 1;
					
							ProductDescription.Description = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6).trim();
						
				
					columnIndexWithD_tFileInputDelimited_6 = 2;
					
							ProductDescription.rowguid = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						
				
					columnIndexWithD_tFileInputDelimited_6 = 3;
					
						temp = fid_tFileInputDelimited_6.get(columnIndexWithD_tFileInputDelimited_6);
						if(temp.length() > 0) {
							
								try {
								
    									ProductDescription.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_6) {
globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",ex_tFileInputDelimited_6.getMessage());
									rowstate_tFileInputDelimited_6.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "ProductDescription", temp, ex_tFileInputDelimited_6), ex_tFileInputDelimited_6));
								}
    							
						} else {						
							
								
									ProductDescription.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_6.getException()!=null) {
											throw rowstate_tFileInputDelimited_6.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_6_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_6 = true;
			        					
			                					System.err.println(e.getMessage());
			                					ProductDescription = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_6 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 


	tos_count_tFileInputDelimited_6++;

/**
 * [tFileInputDelimited_6 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 process_data_begin ] stop
 */
// Start of branch "ProductDescription"
if(ProductDescription != null) { 



	
	/**
	 * [tAdvancedHash_ProductDescription main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ProductDescription";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ProductDescription"
						
						);
					}
					


			   
			   

					ProductDescriptionStruct ProductDescription_HashRow = new ProductDescriptionStruct();
		   	   	   
				
				ProductDescription_HashRow.ProductDescriptionID = ProductDescription.ProductDescriptionID;
				
				ProductDescription_HashRow.Description = ProductDescription.Description;
				
				ProductDescription_HashRow.rowguid = ProductDescription.rowguid;
				
				ProductDescription_HashRow.ModifiedDate = ProductDescription.ModifiedDate;
				
			tHash_Lookup_ProductDescription.put(ProductDescription_HashRow);
			
            




 


	tos_count_tAdvancedHash_ProductDescription++;

/**
 * [tAdvancedHash_ProductDescription main ] stop
 */
	
	/**
	 * [tAdvancedHash_ProductDescription process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ProductDescription";

	

 



/**
 * [tAdvancedHash_ProductDescription process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_ProductDescription process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ProductDescription";

	

 



/**
 * [tAdvancedHash_ProductDescription process_data_end ] stop
 */

} // End of branch "ProductDescription"




	
	/**
	 * [tFileInputDelimited_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_6 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	



            }
            }finally{
                if(!((Object)(context.pathraw+"ProductDescription.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_6!=null){
                		fid_tFileInputDelimited_6.close();
                	}
                }
                if(fid_tFileInputDelimited_6!=null){
                	globalMap.put("tFileInputDelimited_6_NB_LINE", fid_tFileInputDelimited_6.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_6", true);
end_Hash.put("tFileInputDelimited_6", System.currentTimeMillis());




/**
 * [tFileInputDelimited_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_ProductDescription end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ProductDescription";

	

tHash_Lookup_ProductDescription.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ProductDescription");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_ProductDescription", true);
end_Hash.put("tAdvancedHash_ProductDescription", System.currentTimeMillis());




/**
 * [tAdvancedHash_ProductDescription end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_6 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_6";

	

 



/**
 * [tFileInputDelimited_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_ProductDescription finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_ProductDescription";

	

 



/**
 * [tAdvancedHash_ProductDescription finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_6_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Title;

				public String getTitle () {
					return this.Title;
				}
				
			    public String MiddleName;

				public String getMiddleName () {
					return this.MiddleName;
				}
				
			    public String FirstName;

				public String getFirstName () {
					return this.FirstName;
				}
				
			    public String LastName;

				public String getLastName () {
					return this.LastName;
				}
				
			    public String Suffix;

				public String getSuffix () {
					return this.Suffix;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String EmailAddress;

				public String getEmailAddress () {
					return this.EmailAddress;
				}
				
			    public String Phone;

				public String getPhone () {
					return this.Phone;
				}
				
			    public String AddressType;

				public String getAddressType () {
					return this.AddressType;
				}
				
			    public String AddressLine1;

				public String getAddressLine1 () {
					return this.AddressLine1;
				}
				
			    public String AddressLine2;

				public String getAddressLine2 () {
					return this.AddressLine2;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String StateProvince;

				public String getStateProvince () {
					return this.StateProvince;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public String PostalCode;

				public String getPostalCode () {
					return this.PostalCode;
				}
				
			    public java.util.Date ModifiedDate_1;

				public java.util.Date getModifiedDate_1 () {
					return this.ModifiedDate_1;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.CustomerID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.CustomerID != other.CustomerID)
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.CustomerID = this.CustomerID;
	            other.Title = this.Title;
	            other.MiddleName = this.MiddleName;
	            other.FirstName = this.FirstName;
	            other.LastName = this.LastName;
	            other.Suffix = this.Suffix;
	            other.CompanyName = this.CompanyName;
	            other.SalesPerson = this.SalesPerson;
	            other.EmailAddress = this.EmailAddress;
	            other.Phone = this.Phone;
	            other.AddressType = this.AddressType;
	            other.AddressLine1 = this.AddressLine1;
	            other.AddressLine2 = this.AddressLine2;
	            other.City = this.City;
	            other.StateProvince = this.StateProvince;
	            other.CountryRegion = this.CountryRegion;
	            other.PostalCode = this.PostalCode;
	            other.ModifiedDate_1 = this.ModifiedDate_1;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.CustomerID = this.CustomerID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
					this.Title = readString(dis);
					
					this.MiddleName = readString(dis);
					
					this.FirstName = readString(dis);
					
					this.LastName = readString(dis);
					
					this.Suffix = readString(dis);
					
					this.CompanyName = readString(dis);
					
					this.SalesPerson = readString(dis);
					
					this.EmailAddress = readString(dis);
					
					this.Phone = readString(dis);
					
					this.AddressType = readString(dis);
					
					this.AddressLine1 = readString(dis);
					
					this.AddressLine2 = readString(dis);
					
					this.City = readString(dis);
					
					this.StateProvince = readString(dis);
					
					this.CountryRegion = readString(dis);
					
					this.PostalCode = readString(dis);
					
					this.ModifiedDate_1 = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
					this.Title = readString(dis);
					
					this.MiddleName = readString(dis);
					
					this.FirstName = readString(dis);
					
					this.LastName = readString(dis);
					
					this.Suffix = readString(dis);
					
					this.CompanyName = readString(dis);
					
					this.SalesPerson = readString(dis);
					
					this.EmailAddress = readString(dis);
					
					this.Phone = readString(dis);
					
					this.AddressType = readString(dis);
					
					this.AddressLine1 = readString(dis);
					
					this.AddressLine2 = readString(dis);
					
					this.City = readString(dis);
					
					this.StateProvince = readString(dis);
					
					this.CountryRegion = readString(dis);
					
					this.PostalCode = readString(dis);
					
					this.ModifiedDate_1 = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.MiddleName,dos);
					
					// String
				
						writeString(this.FirstName,dos);
					
					// String
				
						writeString(this.LastName,dos);
					
					// String
				
						writeString(this.Suffix,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.EmailAddress,dos);
					
					// String
				
						writeString(this.Phone,dos);
					
					// String
				
						writeString(this.AddressType,dos);
					
					// String
				
						writeString(this.AddressLine1,dos);
					
					// String
				
						writeString(this.AddressLine2,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.StateProvince,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// String
				
						writeString(this.PostalCode,dos);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate_1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.MiddleName,dos);
					
					// String
				
						writeString(this.FirstName,dos);
					
					// String
				
						writeString(this.LastName,dos);
					
					// String
				
						writeString(this.Suffix,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.EmailAddress,dos);
					
					// String
				
						writeString(this.Phone,dos);
					
					// String
				
						writeString(this.AddressType,dos);
					
					// String
				
						writeString(this.AddressLine1,dos);
					
					// String
				
						writeString(this.AddressLine2,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.StateProvince,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// String
				
						writeString(this.PostalCode,dos);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate_1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",Title="+Title);
		sb.append(",MiddleName="+MiddleName);
		sb.append(",FirstName="+FirstName);
		sb.append(",LastName="+LastName);
		sb.append(",Suffix="+Suffix);
		sb.append(",CompanyName="+CompanyName);
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",EmailAddress="+EmailAddress);
		sb.append(",Phone="+Phone);
		sb.append(",AddressType="+AddressType);
		sb.append(",AddressLine1="+AddressLine1);
		sb.append(",AddressLine2="+AddressLine2);
		sb.append(",City="+City);
		sb.append(",StateProvince="+StateProvince);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",PostalCode="+PostalCode);
		sb.append(",ModifiedDate_1="+String.valueOf(ModifiedDate_1));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CustomerMainStruct implements routines.system.IPersistableRow<CustomerMainStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public String Title;

				public String getTitle () {
					return this.Title;
				}
				
			    public String MiddleName;

				public String getMiddleName () {
					return this.MiddleName;
				}
				
			    public String FirstName;

				public String getFirstName () {
					return this.FirstName;
				}
				
			    public String LastName;

				public String getLastName () {
					return this.LastName;
				}
				
			    public String Suffix;

				public String getSuffix () {
					return this.Suffix;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String EmailAddress;

				public String getEmailAddress () {
					return this.EmailAddress;
				}
				
			    public String Phone;

				public String getPhone () {
					return this.Phone;
				}
				
			    public String AddressType;

				public String getAddressType () {
					return this.AddressType;
				}
				
			    public String AddressLine1;

				public String getAddressLine1 () {
					return this.AddressLine1;
				}
				
			    public String AddressLine2;

				public String getAddressLine2 () {
					return this.AddressLine2;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String StateProvince;

				public String getStateProvince () {
					return this.StateProvince;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public String PostalCode;

				public String getPostalCode () {
					return this.PostalCode;
				}
				
			    public java.util.Date ModifiedDate_1;

				public java.util.Date getModifiedDate_1 () {
					return this.ModifiedDate_1;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.CustomerID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final CustomerMainStruct other = (CustomerMainStruct) obj;
		
						if (this.CustomerID != other.CustomerID)
							return false;
					

		return true;
    }

	public void copyDataTo(CustomerMainStruct other) {

		other.CustomerID = this.CustomerID;
	            other.Title = this.Title;
	            other.MiddleName = this.MiddleName;
	            other.FirstName = this.FirstName;
	            other.LastName = this.LastName;
	            other.Suffix = this.Suffix;
	            other.CompanyName = this.CompanyName;
	            other.SalesPerson = this.SalesPerson;
	            other.EmailAddress = this.EmailAddress;
	            other.Phone = this.Phone;
	            other.AddressType = this.AddressType;
	            other.AddressLine1 = this.AddressLine1;
	            other.AddressLine2 = this.AddressLine2;
	            other.City = this.City;
	            other.StateProvince = this.StateProvince;
	            other.CountryRegion = this.CountryRegion;
	            other.PostalCode = this.PostalCode;
	            other.ModifiedDate_1 = this.ModifiedDate_1;
	            
	}

	public void copyKeysDataTo(CustomerMainStruct other) {

		other.CustomerID = this.CustomerID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
					this.Title = readString(dis);
					
					this.MiddleName = readString(dis);
					
					this.FirstName = readString(dis);
					
					this.LastName = readString(dis);
					
					this.Suffix = readString(dis);
					
					this.CompanyName = readString(dis);
					
					this.SalesPerson = readString(dis);
					
					this.EmailAddress = readString(dis);
					
					this.Phone = readString(dis);
					
					this.AddressType = readString(dis);
					
					this.AddressLine1 = readString(dis);
					
					this.AddressLine2 = readString(dis);
					
					this.City = readString(dis);
					
					this.StateProvince = readString(dis);
					
					this.CountryRegion = readString(dis);
					
					this.PostalCode = readString(dis);
					
					this.ModifiedDate_1 = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
					this.Title = readString(dis);
					
					this.MiddleName = readString(dis);
					
					this.FirstName = readString(dis);
					
					this.LastName = readString(dis);
					
					this.Suffix = readString(dis);
					
					this.CompanyName = readString(dis);
					
					this.SalesPerson = readString(dis);
					
					this.EmailAddress = readString(dis);
					
					this.Phone = readString(dis);
					
					this.AddressType = readString(dis);
					
					this.AddressLine1 = readString(dis);
					
					this.AddressLine2 = readString(dis);
					
					this.City = readString(dis);
					
					this.StateProvince = readString(dis);
					
					this.CountryRegion = readString(dis);
					
					this.PostalCode = readString(dis);
					
					this.ModifiedDate_1 = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.MiddleName,dos);
					
					// String
				
						writeString(this.FirstName,dos);
					
					// String
				
						writeString(this.LastName,dos);
					
					// String
				
						writeString(this.Suffix,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.EmailAddress,dos);
					
					// String
				
						writeString(this.Phone,dos);
					
					// String
				
						writeString(this.AddressType,dos);
					
					// String
				
						writeString(this.AddressLine1,dos);
					
					// String
				
						writeString(this.AddressLine2,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.StateProvince,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// String
				
						writeString(this.PostalCode,dos);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate_1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.MiddleName,dos);
					
					// String
				
						writeString(this.FirstName,dos);
					
					// String
				
						writeString(this.LastName,dos);
					
					// String
				
						writeString(this.Suffix,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.EmailAddress,dos);
					
					// String
				
						writeString(this.Phone,dos);
					
					// String
				
						writeString(this.AddressType,dos);
					
					// String
				
						writeString(this.AddressLine1,dos);
					
					// String
				
						writeString(this.AddressLine2,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.StateProvince,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// String
				
						writeString(this.PostalCode,dos);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate_1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",Title="+Title);
		sb.append(",MiddleName="+MiddleName);
		sb.append(",FirstName="+FirstName);
		sb.append(",LastName="+LastName);
		sb.append(",Suffix="+Suffix);
		sb.append(",CompanyName="+CompanyName);
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",EmailAddress="+EmailAddress);
		sb.append(",Phone="+Phone);
		sb.append(",AddressType="+AddressType);
		sb.append(",AddressLine1="+AddressLine1);
		sb.append(",AddressLine2="+AddressLine2);
		sb.append(",City="+City);
		sb.append(",StateProvince="+StateProvince);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",PostalCode="+PostalCode);
		sb.append(",ModifiedDate_1="+String.valueOf(ModifiedDate_1));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CustomerMainStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class CustomerStruct implements routines.system.IPersistableRow<CustomerStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];

	
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public String NameStyle;

				public String getNameStyle () {
					return this.NameStyle;
				}
				
			    public String Title;

				public String getTitle () {
					return this.Title;
				}
				
			    public String FirstName;

				public String getFirstName () {
					return this.FirstName;
				}
				
			    public String MiddleName;

				public String getMiddleName () {
					return this.MiddleName;
				}
				
			    public String LastName;

				public String getLastName () {
					return this.LastName;
				}
				
			    public String Suffix;

				public String getSuffix () {
					return this.Suffix;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String EmailAddress;

				public String getEmailAddress () {
					return this.EmailAddress;
				}
				
			    public String Phone;

				public String getPhone () {
					return this.Phone;
				}
				
			    public String PasswordHash;

				public String getPasswordHash () {
					return this.PasswordHash;
				}
				
			    public String PasswordSalt;

				public String getPasswordSalt () {
					return this.PasswordSalt;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
					this.NameStyle = readString(dis);
					
					this.Title = readString(dis);
					
					this.FirstName = readString(dis);
					
					this.MiddleName = readString(dis);
					
					this.LastName = readString(dis);
					
					this.Suffix = readString(dis);
					
					this.CompanyName = readString(dis);
					
					this.SalesPerson = readString(dis);
					
					this.EmailAddress = readString(dis);
					
					this.Phone = readString(dis);
					
					this.PasswordHash = readString(dis);
					
					this.PasswordSalt = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
					this.NameStyle = readString(dis);
					
					this.Title = readString(dis);
					
					this.FirstName = readString(dis);
					
					this.MiddleName = readString(dis);
					
					this.LastName = readString(dis);
					
					this.Suffix = readString(dis);
					
					this.CompanyName = readString(dis);
					
					this.SalesPerson = readString(dis);
					
					this.EmailAddress = readString(dis);
					
					this.Phone = readString(dis);
					
					this.PasswordHash = readString(dis);
					
					this.PasswordSalt = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// String
				
						writeString(this.NameStyle,dos);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.FirstName,dos);
					
					// String
				
						writeString(this.MiddleName,dos);
					
					// String
				
						writeString(this.LastName,dos);
					
					// String
				
						writeString(this.Suffix,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.EmailAddress,dos);
					
					// String
				
						writeString(this.Phone,dos);
					
					// String
				
						writeString(this.PasswordHash,dos);
					
					// String
				
						writeString(this.PasswordSalt,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// String
				
						writeString(this.NameStyle,dos);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.FirstName,dos);
					
					// String
				
						writeString(this.MiddleName,dos);
					
					// String
				
						writeString(this.LastName,dos);
					
					// String
				
						writeString(this.Suffix,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.EmailAddress,dos);
					
					// String
				
						writeString(this.Phone,dos);
					
					// String
				
						writeString(this.PasswordHash,dos);
					
					// String
				
						writeString(this.PasswordSalt,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",NameStyle="+NameStyle);
		sb.append(",Title="+Title);
		sb.append(",FirstName="+FirstName);
		sb.append(",MiddleName="+MiddleName);
		sb.append(",LastName="+LastName);
		sb.append(",Suffix="+Suffix);
		sb.append(",CompanyName="+CompanyName);
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",EmailAddress="+EmailAddress);
		sb.append(",Phone="+Phone);
		sb.append(",PasswordHash="+PasswordHash);
		sb.append(",PasswordSalt="+PasswordSalt);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CustomerStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_3Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_3Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public String NameStyle;

				public String getNameStyle () {
					return this.NameStyle;
				}
				
			    public String Title;

				public String getTitle () {
					return this.Title;
				}
				
			    public String FirstName;

				public String getFirstName () {
					return this.FirstName;
				}
				
			    public String MiddleName;

				public String getMiddleName () {
					return this.MiddleName;
				}
				
			    public String LastName;

				public String getLastName () {
					return this.LastName;
				}
				
			    public String Suffix;

				public String getSuffix () {
					return this.Suffix;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String EmailAddress;

				public String getEmailAddress () {
					return this.EmailAddress;
				}
				
			    public String Phone;

				public String getPhone () {
					return this.Phone;
				}
				
			    public String PasswordHash;

				public String getPasswordHash () {
					return this.PasswordHash;
				}
				
			    public String PasswordSalt;

				public String getPasswordSalt () {
					return this.PasswordSalt;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.CustomerID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tFileInputDelimited_3Struct other = (after_tFileInputDelimited_3Struct) obj;
		
						if (this.CustomerID != other.CustomerID)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tFileInputDelimited_3Struct other) {

		other.CustomerID = this.CustomerID;
	            other.NameStyle = this.NameStyle;
	            other.Title = this.Title;
	            other.FirstName = this.FirstName;
	            other.MiddleName = this.MiddleName;
	            other.LastName = this.LastName;
	            other.Suffix = this.Suffix;
	            other.CompanyName = this.CompanyName;
	            other.SalesPerson = this.SalesPerson;
	            other.EmailAddress = this.EmailAddress;
	            other.Phone = this.Phone;
	            other.PasswordHash = this.PasswordHash;
	            other.PasswordSalt = this.PasswordSalt;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(after_tFileInputDelimited_3Struct other) {

		other.CustomerID = this.CustomerID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
					this.NameStyle = readString(dis);
					
					this.Title = readString(dis);
					
					this.FirstName = readString(dis);
					
					this.MiddleName = readString(dis);
					
					this.LastName = readString(dis);
					
					this.Suffix = readString(dis);
					
					this.CompanyName = readString(dis);
					
					this.SalesPerson = readString(dis);
					
					this.EmailAddress = readString(dis);
					
					this.Phone = readString(dis);
					
					this.PasswordHash = readString(dis);
					
					this.PasswordSalt = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
					this.NameStyle = readString(dis);
					
					this.Title = readString(dis);
					
					this.FirstName = readString(dis);
					
					this.MiddleName = readString(dis);
					
					this.LastName = readString(dis);
					
					this.Suffix = readString(dis);
					
					this.CompanyName = readString(dis);
					
					this.SalesPerson = readString(dis);
					
					this.EmailAddress = readString(dis);
					
					this.Phone = readString(dis);
					
					this.PasswordHash = readString(dis);
					
					this.PasswordSalt = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// String
				
						writeString(this.NameStyle,dos);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.FirstName,dos);
					
					// String
				
						writeString(this.MiddleName,dos);
					
					// String
				
						writeString(this.LastName,dos);
					
					// String
				
						writeString(this.Suffix,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.EmailAddress,dos);
					
					// String
				
						writeString(this.Phone,dos);
					
					// String
				
						writeString(this.PasswordHash,dos);
					
					// String
				
						writeString(this.PasswordSalt,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// String
				
						writeString(this.NameStyle,dos);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.FirstName,dos);
					
					// String
				
						writeString(this.MiddleName,dos);
					
					// String
				
						writeString(this.LastName,dos);
					
					// String
				
						writeString(this.Suffix,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.EmailAddress,dos);
					
					// String
				
						writeString(this.Phone,dos);
					
					// String
				
						writeString(this.PasswordHash,dos);
					
					// String
				
						writeString(this.PasswordSalt,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",NameStyle="+NameStyle);
		sb.append(",Title="+Title);
		sb.append(",FirstName="+FirstName);
		sb.append(",MiddleName="+MiddleName);
		sb.append(",LastName="+LastName);
		sb.append(",Suffix="+Suffix);
		sb.append(",CompanyName="+CompanyName);
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",EmailAddress="+EmailAddress);
		sb.append(",Phone="+Phone);
		sb.append(",PasswordHash="+PasswordHash);
		sb.append(",PasswordSalt="+PasswordSalt);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_7Process(globalMap);
		tFileInputDelimited_9Process(globalMap);

		CustomerStruct Customer = new CustomerStruct();
CustomerMainStruct CustomerMain = new CustomerMainStruct();
row1Struct row1 = new row1Struct();






	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.path_harm+"HCustomer.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("CustomerID");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Title");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("MiddleName");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("FirstName");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("LastName");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Suffix");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("CompanyName");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("SalesPerson");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("EmailAddress");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Phone");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("AddressType");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("AddressLine1");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("AddressLine2");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("City");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("StateProvince");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("CountryRegion");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("PostalCode");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ModifiedDate_1");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tReplace_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplace_1", false);
		start_Hash.put("tReplace_1", System.currentTimeMillis());
		
	
	currentComponent="tReplace_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CustomerMain");
					}
				
		int tos_count_tReplace_1 = 0;
		


int nb_line_tReplace_1 = 0;
 



/**
 * [tReplace_1 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Customer");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CustomerAddressStruct> tHash_Lookup_CustomerAddress = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CustomerAddressStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CustomerAddressStruct>) 
					globalMap.get( "tHash_Lookup_CustomerAddress" ))
					;					
					
	

CustomerAddressStruct CustomerAddressHashKey = new CustomerAddressStruct();
CustomerAddressStruct CustomerAddressDefault = new CustomerAddressStruct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<AddressStruct> tHash_Lookup_Address = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<AddressStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<AddressStruct>) 
					globalMap.get( "tHash_Lookup_Address" ))
					;					
					
	

AddressStruct AddressHashKey = new AddressStruct();
AddressStruct AddressDefault = new AddressStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
CustomerMainStruct CustomerMain_tmp = new CustomerMainStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_3", false);
		start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_3";

	
		int tos_count_tFileInputDelimited_3 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try{
					
						Object filename_tFileInputDelimited_3 = context.pathraw+"Customer.csv";
						if(filename_tFileInputDelimited_3 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
			if(footer_value_tFileInputDelimited_3 >0 || random_value_tFileInputDelimited_3 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(context.pathraw+"Customer.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_3
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_3!=null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();
						
			    						Customer = null;			
												
									boolean whetherReject_tFileInputDelimited_3 = false;
									Customer = new CustomerStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_3 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_3 = 0;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    								Customer.CustomerID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CustomerID", "Customer", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_3.setException(new RuntimeException("Value is empty for column : 'CustomerID' in 'Customer' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_3 = 1;
					
							Customer.NameStyle = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 2;
					
							Customer.Title = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
						
				
					columnIndexWithD_tFileInputDelimited_3 = 3;
					
							Customer.FirstName = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
						
				
					columnIndexWithD_tFileInputDelimited_3 = 4;
					
							Customer.MiddleName = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
						
				
					columnIndexWithD_tFileInputDelimited_3 = 5;
					
							Customer.LastName = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
						
				
					columnIndexWithD_tFileInputDelimited_3 = 6;
					
							Customer.Suffix = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
						
				
					columnIndexWithD_tFileInputDelimited_3 = 7;
					
							Customer.CompanyName = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
						
				
					columnIndexWithD_tFileInputDelimited_3 = 8;
					
							Customer.SalesPerson = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
						
				
					columnIndexWithD_tFileInputDelimited_3 = 9;
					
							Customer.EmailAddress = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
						
				
					columnIndexWithD_tFileInputDelimited_3 = 10;
					
							Customer.Phone = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
						
				
					columnIndexWithD_tFileInputDelimited_3 = 11;
					
							Customer.PasswordHash = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 12;
					
							Customer.PasswordSalt = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 13;
					
							Customer.rowguid = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						
				
					columnIndexWithD_tFileInputDelimited_3 = 14;
					
						temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3);
						if(temp.length() > 0) {
							
								try {
								
    									Customer.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",ex_tFileInputDelimited_3.getMessage());
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "Customer", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}
    							
						} else {						
							
								
									Customer.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_3.getException()!=null) {
											throw rowstate_tFileInputDelimited_3.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_3_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_3 = true;
			        					
			                					System.err.println(e.getMessage());
			                					Customer = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_3 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 


	tos_count_tFileInputDelimited_3++;

/**
 * [tFileInputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_begin ] stop
 */
// Start of branch "Customer"
if(Customer != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Customer"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "CustomerAddress" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopCustomerAddress = false;
       		  	    	
       		  	    	
 							CustomerAddressStruct CustomerAddressObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
	                        		    	Object exprKeyValue_CustomerAddress__CustomerID = Customer.CustomerID ;
	                        		    	if(exprKeyValue_CustomerAddress__CustomerID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_4 = true;
	                        		    	} else {
                        		    			CustomerAddressHashKey.CustomerID = (int)(Integer) exprKeyValue_CustomerAddress__CustomerID;
                        		    		}
                        		    		

								
		                        	CustomerAddressHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_4) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_CustomerAddress.lookup( CustomerAddressHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_4 || !tHash_Lookup_CustomerAddress.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLoopCustomerAddress = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLoopCustomerAddress = true;
			           		  	} // G 21
                    		  	
                    		

							CustomerAddressStruct CustomerAddress = null;
                    		  	 
							

								while ((tHash_Lookup_CustomerAddress != null && tHash_Lookup_CustomerAddress.hasNext()) || forceLoopCustomerAddress) { // G_TM_M_043

								
									 // CALL close loop of lookup 'CustomerAddress'
									
                    		  	 
							   
                    		  	 
	       		  	    	CustomerAddressStruct fromLookup_CustomerAddress = null;
							CustomerAddress = CustomerAddressDefault;
										 
							
								
								if(!forceLoopCustomerAddress) { // G 46
								
							
								 
							
								
								fromLookup_CustomerAddress = tHash_Lookup_CustomerAddress.next();

							

							if(fromLookup_CustomerAddress != null) {
								CustomerAddress = fromLookup_CustomerAddress;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLoopCustomerAddress = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "Address" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopAddress = false;
       		  	    	
       		  	    	
 							AddressStruct AddressObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
	                        		    	Object exprKeyValue_Address__AddressID = CustomerAddress.AddressID ;
	                        		    	if(exprKeyValue_Address__AddressID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_4 = true;
	                        		    	} else {
                        		    			AddressHashKey.AddressID = (int)(Integer) exprKeyValue_Address__AddressID;
                        		    		}
                        		    		

								
		                        	AddressHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_4) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_Address.lookup( AddressHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_4 || !tHash_Lookup_Address.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLoopAddress = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLoopAddress = true;
			           		  	} // G 21
                    		  	
                    		

							AddressStruct Address = null;
                    		  	 
							

								while ((tHash_Lookup_Address != null && tHash_Lookup_Address.hasNext()) || forceLoopAddress) { // G_TM_M_043

								
									 // CALL close loop of lookup 'Address'
									
                    		  	 
							   
                    		  	 
	       		  	    	AddressStruct fromLookup_Address = null;
							Address = AddressDefault;
										 
							
								
								if(!forceLoopAddress) { // G 46
								
							
								 
							
								
								fromLookup_Address = tHash_Lookup_Address.next();

							

							if(fromLookup_Address != null) {
								Address = fromLookup_Address;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLoopAddress = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

CustomerMain = null;


// # Output table : 'CustomerMain'
CustomerMain_tmp.CustomerID = Customer.CustomerID ;
CustomerMain_tmp.Title = Customer.Title ;
CustomerMain_tmp.MiddleName = Customer.MiddleName ;
CustomerMain_tmp.FirstName = Customer.FirstName ;
CustomerMain_tmp.LastName = Customer.LastName ;
CustomerMain_tmp.Suffix = Customer.Suffix ;
CustomerMain_tmp.CompanyName = Customer.CompanyName ;
CustomerMain_tmp.SalesPerson = Customer.SalesPerson;
CustomerMain_tmp.EmailAddress = Customer.EmailAddress ;
CustomerMain_tmp.Phone = Customer.Phone ;
CustomerMain_tmp.AddressType = CustomerAddress.AddressType ;
CustomerMain_tmp.AddressLine1 = Address.AddressLine1 ;
CustomerMain_tmp.AddressLine2 = Address.AddressLine2 ;
CustomerMain_tmp.City = Address.City ;
CustomerMain_tmp.StateProvince = Address.StateProvince ;
CustomerMain_tmp.CountryRegion = Address.CountryRegion ;
CustomerMain_tmp.PostalCode = Address.PostalCode ;
CustomerMain_tmp.ModifiedDate_1 = Address.ModifiedDate ;
CustomerMain = CustomerMain_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "CustomerMain"
if(CustomerMain != null) { 



	
	/**
	 * [tReplace_1 main ] start
	 */

	

	
	
	currentComponent="tReplace_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CustomerMain"
						
						);
					}
					

						String searchStr_tReplace_1_1 = "adventure-works\\" + "";
							CustomerMain.SalesPerson = StringUtils.replaceAllStrictly(CustomerMain.SalesPerson, searchStr_tReplace_1_1, "" + "", false, false);
                    CustomerMain.SalesPerson = StringUtils.replaceAll(CustomerMain.SalesPerson, "[0-9]", "" + "");                
	        row1.CustomerID = CustomerMain.CustomerID;
	        
	        row1.Title = CustomerMain.Title;
	        
	        row1.MiddleName = CustomerMain.MiddleName;
	        
	        row1.FirstName = CustomerMain.FirstName;
	        
	        row1.LastName = CustomerMain.LastName;
	        
	        row1.Suffix = CustomerMain.Suffix;
	        
	        row1.CompanyName = CustomerMain.CompanyName;
	        
	        row1.SalesPerson = CustomerMain.SalesPerson;
	        
	        row1.EmailAddress = CustomerMain.EmailAddress;
	        
	        row1.Phone = CustomerMain.Phone;
	        
	        row1.AddressType = CustomerMain.AddressType;
	        
	        row1.AddressLine1 = CustomerMain.AddressLine1;
	        
	        row1.AddressLine2 = CustomerMain.AddressLine2;
	        
	        row1.City = CustomerMain.City;
	        
	        row1.StateProvince = CustomerMain.StateProvince;
	        
	        row1.CountryRegion = CustomerMain.CountryRegion;
	        
	        row1.PostalCode = CustomerMain.PostalCode;
	        
	        row1.ModifiedDate_1 = CustomerMain.ModifiedDate_1;
	        
    nb_line_tReplace_1++;

 


	tos_count_tReplace_1++;

/**
 * [tReplace_1 main ] stop
 */
	
	/**
	 * [tReplace_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplace_1";

	

 



/**
 * [tReplace_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                        sb_tFileOutputDelimited_2.append(
                            row1.CustomerID
                        );
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row1.Title != null) {
                        sb_tFileOutputDelimited_2.append(
                            row1.Title
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row1.MiddleName != null) {
                        sb_tFileOutputDelimited_2.append(
                            row1.MiddleName
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row1.FirstName != null) {
                        sb_tFileOutputDelimited_2.append(
                            row1.FirstName
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row1.LastName != null) {
                        sb_tFileOutputDelimited_2.append(
                            row1.LastName
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row1.Suffix != null) {
                        sb_tFileOutputDelimited_2.append(
                            row1.Suffix
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row1.CompanyName != null) {
                        sb_tFileOutputDelimited_2.append(
                            row1.CompanyName
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row1.SalesPerson != null) {
                        sb_tFileOutputDelimited_2.append(
                            row1.SalesPerson
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row1.EmailAddress != null) {
                        sb_tFileOutputDelimited_2.append(
                            row1.EmailAddress
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row1.Phone != null) {
                        sb_tFileOutputDelimited_2.append(
                            row1.Phone
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row1.AddressType != null) {
                        sb_tFileOutputDelimited_2.append(
                            row1.AddressType
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row1.AddressLine1 != null) {
                        sb_tFileOutputDelimited_2.append(
                            row1.AddressLine1
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row1.AddressLine2 != null) {
                        sb_tFileOutputDelimited_2.append(
                            row1.AddressLine2
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row1.City != null) {
                        sb_tFileOutputDelimited_2.append(
                            row1.City
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row1.StateProvince != null) {
                        sb_tFileOutputDelimited_2.append(
                            row1.StateProvince
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row1.CountryRegion != null) {
                        sb_tFileOutputDelimited_2.append(
                            row1.CountryRegion
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row1.PostalCode != null) {
                        sb_tFileOutputDelimited_2.append(
                            row1.PostalCode
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row1.ModifiedDate_1 != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(row1.ModifiedDate_1, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tReplace_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplace_1";

	

 



/**
 * [tReplace_1 process_data_end ] stop
 */

} // End of branch "CustomerMain"



	
		} // close loop of lookup 'Address' // G_TM_M_043
		
		} // close loop of lookup 'CustomerAddress' // G_TM_M_043
	
	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "Customer"




	
	/**
	 * [tFileInputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	



            }
            }finally{
                if(!((Object)(context.pathraw+"Customer.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_3!=null){
                		fid_tFileInputDelimited_3.close();
                	}
                }
                if(fid_tFileInputDelimited_3!=null){
                	globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_3", true);
end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());




/**
 * [tFileInputDelimited_3 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_CustomerAddress != null) {
						tHash_Lookup_CustomerAddress.endGet();
					}
					globalMap.remove( "tHash_Lookup_CustomerAddress" );

					
					
				
					if(tHash_Lookup_Address != null) {
						tHash_Lookup_Address.endGet();
					}
					globalMap.remove( "tHash_Lookup_Address" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Customer");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tReplace_1 end ] start
	 */

	

	
	
	currentComponent="tReplace_1";

	


globalMap.put("tReplace_1_NB_LINE",nb_line_tReplace_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CustomerMain");
			  	}
			  	
 

ok_Hash.put("tReplace_1", true);
end_Hash.put("tReplace_1", System.currentTimeMillis());




/**
 * [tReplace_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_CustomerAddress"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_Address"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_3";

	

 



/**
 * [tFileInputDelimited_3 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tReplace_1 finally ] start
	 */

	

	
	
	currentComponent="tReplace_1";

	

 



/**
 * [tReplace_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}
	


public static class CustomerAddressStruct implements routines.system.IPersistableComparableLookupRow<CustomerAddressStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public int AddressID;

				public int getAddressID () {
					return this.AddressID;
				}
				
			    public String AddressType;

				public String getAddressType () {
					return this.AddressType;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.CustomerID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final CustomerAddressStruct other = (CustomerAddressStruct) obj;
		
						if (this.CustomerID != other.CustomerID)
							return false;
					

		return true;
    }

	public void copyDataTo(CustomerAddressStruct other) {

		other.CustomerID = this.CustomerID;
	            other.AddressID = this.AddressID;
	            other.AddressType = this.AddressType;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(CustomerAddressStruct other) {

		other.CustomerID = this.CustomerID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.AddressID = dis.readInt();
					
						this.AddressType = readString(dis,ois);
					
       			    	this.rowguid = (Object) ois.readObject();
					
						this.ModifiedDate = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.AddressID = objectIn.readInt();
					
						this.AddressType = readString(dis,objectIn);
					
       			    	this.rowguid = (Object) objectIn.readObject();
					
						this.ModifiedDate = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.AddressID);
					
						writeString(this.AddressType, dos, oos);
					
       			    	oos.writeObject(this.rowguid);
					
						writeDate(this.ModifiedDate, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.AddressID);
					
						writeString(this.AddressType, dos, objectOut);
					
       			    	objectOut.writeObject(this.rowguid);
					
						writeDate(this.ModifiedDate, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",AddressID="+String.valueOf(AddressID));
		sb.append(",AddressType="+AddressType);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CustomerAddressStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		CustomerAddressStruct CustomerAddress = new CustomerAddressStruct();




	
	/**
	 * [tAdvancedHash_CustomerAddress begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_CustomerAddress", false);
		start_Hash.put("tAdvancedHash_CustomerAddress", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_CustomerAddress";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CustomerAddress");
					}
				
		int tos_count_tAdvancedHash_CustomerAddress = 0;
		

			   		// connection name:CustomerAddress
			   		// source node:tFileInputDelimited_7 - inputs:(after_tFileInputDelimited_3) outputs:(CustomerAddress,CustomerAddress) | target node:tAdvancedHash_CustomerAddress - inputs:(CustomerAddress) outputs:()
			   		// linked node: tMap_4 - inputs:(Customer,CustomerAddress,Address) outputs:(CustomerMain)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_CustomerAddress = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<CustomerAddressStruct> tHash_Lookup_CustomerAddress =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<CustomerAddressStruct>getLookup(matchingModeEnum_CustomerAddress);
	   						   
		   	   	   globalMap.put("tHash_Lookup_CustomerAddress", tHash_Lookup_CustomerAddress);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_CustomerAddress begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_7", false);
		start_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_7";

	
		int tos_count_tFileInputDelimited_7 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_7 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_7 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_7 = null;
				int limit_tFileInputDelimited_7 = -1;
				try{
					
						Object filename_tFileInputDelimited_7 = context.pathraw+"CustomerAddress.csv";
						if(filename_tFileInputDelimited_7 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_7 = 0, random_value_tFileInputDelimited_7 = -1;
			if(footer_value_tFileInputDelimited_7 >0 || random_value_tFileInputDelimited_7 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_7 = new org.talend.fileprocess.FileInputDelimited(context.pathraw+"CustomerAddress.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_7
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_7!=null && fid_tFileInputDelimited_7.nextRecord()) {
						rowstate_tFileInputDelimited_7.reset();
						
			    						CustomerAddress = null;			
									
			    						CustomerAddress = null;			
												
									boolean whetherReject_tFileInputDelimited_7 = false;
									CustomerAddress = new CustomerAddressStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_7 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_7 = 0;
					
						temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						if(temp.length() > 0) {
							
								try {
								
    								CustomerAddress.CustomerID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_7) {
globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CustomerID", "CustomerAddress", temp, ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_7.setException(new RuntimeException("Value is empty for column : 'CustomerID' in 'CustomerAddress' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_7 = 1;
					
						temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						if(temp.length() > 0) {
							
								try {
								
    								CustomerAddress.AddressID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_7) {
globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"AddressID", "CustomerAddress", temp, ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_7.setException(new RuntimeException("Value is empty for column : 'AddressID' in 'CustomerAddress' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_7 = 2;
					
							CustomerAddress.AddressType = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7).trim();
						
				
					columnIndexWithD_tFileInputDelimited_7 = 3;
					
							CustomerAddress.rowguid = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						
				
					columnIndexWithD_tFileInputDelimited_7 = 4;
					
						temp = fid_tFileInputDelimited_7.get(columnIndexWithD_tFileInputDelimited_7);
						if(temp.length() > 0) {
							
								try {
								
    									CustomerAddress.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_7) {
globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",ex_tFileInputDelimited_7.getMessage());
									rowstate_tFileInputDelimited_7.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "CustomerAddress", temp, ex_tFileInputDelimited_7), ex_tFileInputDelimited_7));
								}
    							
						} else {						
							
								
									CustomerAddress.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_7.getException()!=null) {
											throw rowstate_tFileInputDelimited_7.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_7_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_7 = true;
			        					
			                					System.err.println(e.getMessage());
			                					CustomerAddress = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_7 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 


	tos_count_tFileInputDelimited_7++;

/**
 * [tFileInputDelimited_7 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 process_data_begin ] stop
 */
// Start of branch "CustomerAddress"
if(CustomerAddress != null) { 



	
	/**
	 * [tAdvancedHash_CustomerAddress main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_CustomerAddress";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CustomerAddress"
						
						);
					}
					


			   
			   

					CustomerAddressStruct CustomerAddress_HashRow = new CustomerAddressStruct();
		   	   	   
				
				CustomerAddress_HashRow.CustomerID = CustomerAddress.CustomerID;
				
				CustomerAddress_HashRow.AddressID = CustomerAddress.AddressID;
				
				CustomerAddress_HashRow.AddressType = CustomerAddress.AddressType;
				
				CustomerAddress_HashRow.rowguid = CustomerAddress.rowguid;
				
				CustomerAddress_HashRow.ModifiedDate = CustomerAddress.ModifiedDate;
				
			tHash_Lookup_CustomerAddress.put(CustomerAddress_HashRow);
			
            




 


	tos_count_tAdvancedHash_CustomerAddress++;

/**
 * [tAdvancedHash_CustomerAddress main ] stop
 */
	
	/**
	 * [tAdvancedHash_CustomerAddress process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_CustomerAddress";

	

 



/**
 * [tAdvancedHash_CustomerAddress process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_CustomerAddress process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_CustomerAddress";

	

 



/**
 * [tAdvancedHash_CustomerAddress process_data_end ] stop
 */

} // End of branch "CustomerAddress"




	
	/**
	 * [tFileInputDelimited_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_7 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	



            }
            }finally{
                if(!((Object)(context.pathraw+"CustomerAddress.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_7!=null){
                		fid_tFileInputDelimited_7.close();
                	}
                }
                if(fid_tFileInputDelimited_7!=null){
                	globalMap.put("tFileInputDelimited_7_NB_LINE", fid_tFileInputDelimited_7.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_7", true);
end_Hash.put("tFileInputDelimited_7", System.currentTimeMillis());




/**
 * [tFileInputDelimited_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_CustomerAddress end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_CustomerAddress";

	

tHash_Lookup_CustomerAddress.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CustomerAddress");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_CustomerAddress", true);
end_Hash.put("tAdvancedHash_CustomerAddress", System.currentTimeMillis());




/**
 * [tAdvancedHash_CustomerAddress end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_7 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_7";

	

 



/**
 * [tFileInputDelimited_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_CustomerAddress finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_CustomerAddress";

	

 



/**
 * [tAdvancedHash_CustomerAddress finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_7_SUBPROCESS_STATE", 1);
	}
	


public static class AddressStruct implements routines.system.IPersistableComparableLookupRow<AddressStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int AddressID;

				public int getAddressID () {
					return this.AddressID;
				}
				
			    public String AddressLine1;

				public String getAddressLine1 () {
					return this.AddressLine1;
				}
				
			    public String AddressLine2;

				public String getAddressLine2 () {
					return this.AddressLine2;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String StateProvince;

				public String getStateProvince () {
					return this.StateProvince;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public String PostalCode;

				public String getPostalCode () {
					return this.PostalCode;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.AddressID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final AddressStruct other = (AddressStruct) obj;
		
						if (this.AddressID != other.AddressID)
							return false;
					

		return true;
    }

	public void copyDataTo(AddressStruct other) {

		other.AddressID = this.AddressID;
	            other.AddressLine1 = this.AddressLine1;
	            other.AddressLine2 = this.AddressLine2;
	            other.City = this.City;
	            other.StateProvince = this.StateProvince;
	            other.CountryRegion = this.CountryRegion;
	            other.PostalCode = this.PostalCode;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(AddressStruct other) {

		other.AddressID = this.AddressID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.AddressID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.AddressID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AddressID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AddressID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.AddressLine1 = readString(dis,ois);
					
						this.AddressLine2 = readString(dis,ois);
					
						this.City = readString(dis,ois);
					
						this.StateProvince = readString(dis,ois);
					
						this.CountryRegion = readString(dis,ois);
					
						this.PostalCode = readString(dis,ois);
					
       			    	this.rowguid = (Object) ois.readObject();
					
						this.ModifiedDate = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.AddressLine1 = readString(dis,objectIn);
					
						this.AddressLine2 = readString(dis,objectIn);
					
						this.City = readString(dis,objectIn);
					
						this.StateProvince = readString(dis,objectIn);
					
						this.CountryRegion = readString(dis,objectIn);
					
						this.PostalCode = readString(dis,objectIn);
					
       			    	this.rowguid = (Object) objectIn.readObject();
					
						this.ModifiedDate = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.AddressLine1, dos, oos);
					
						writeString(this.AddressLine2, dos, oos);
					
						writeString(this.City, dos, oos);
					
						writeString(this.StateProvince, dos, oos);
					
						writeString(this.CountryRegion, dos, oos);
					
						writeString(this.PostalCode, dos, oos);
					
       			    	oos.writeObject(this.rowguid);
					
						writeDate(this.ModifiedDate, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.AddressLine1, dos, objectOut);
					
						writeString(this.AddressLine2, dos, objectOut);
					
						writeString(this.City, dos, objectOut);
					
						writeString(this.StateProvince, dos, objectOut);
					
						writeString(this.CountryRegion, dos, objectOut);
					
						writeString(this.PostalCode, dos, objectOut);
					
       			    	objectOut.writeObject(this.rowguid);
					
						writeDate(this.ModifiedDate, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AddressID="+String.valueOf(AddressID));
		sb.append(",AddressLine1="+AddressLine1);
		sb.append(",AddressLine2="+AddressLine2);
		sb.append(",City="+City);
		sb.append(",StateProvince="+StateProvince);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",PostalCode="+PostalCode);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(AddressStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AddressID, other.AddressID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		AddressStruct Address = new AddressStruct();




	
	/**
	 * [tAdvancedHash_Address begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_Address", false);
		start_Hash.put("tAdvancedHash_Address", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_Address";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Address");
					}
				
		int tos_count_tAdvancedHash_Address = 0;
		

			   		// connection name:Address
			   		// source node:tFileInputDelimited_9 - inputs:(after_tFileInputDelimited_3) outputs:(Address,Address) | target node:tAdvancedHash_Address - inputs:(Address) outputs:()
			   		// linked node: tMap_4 - inputs:(Customer,CustomerAddress,Address) outputs:(CustomerMain)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_Address = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<AddressStruct> tHash_Lookup_Address =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<AddressStruct>getLookup(matchingModeEnum_Address);
	   						   
		   	   	   globalMap.put("tHash_Lookup_Address", tHash_Lookup_Address);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_Address begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_9", false);
		start_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_9";

	
		int tos_count_tFileInputDelimited_9 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_9 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_9 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_9 = null;
				int limit_tFileInputDelimited_9 = -1;
				try{
					
						Object filename_tFileInputDelimited_9 = context.pathraw+"Address.csv";
						if(filename_tFileInputDelimited_9 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_9 = 0, random_value_tFileInputDelimited_9 = -1;
			if(footer_value_tFileInputDelimited_9 >0 || random_value_tFileInputDelimited_9 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_9 = new org.talend.fileprocess.FileInputDelimited(context.pathraw+"Address.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_9
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_9!=null && fid_tFileInputDelimited_9.nextRecord()) {
						rowstate_tFileInputDelimited_9.reset();
						
			    						Address = null;			
									
			    						Address = null;			
												
									boolean whetherReject_tFileInputDelimited_9 = false;
									Address = new AddressStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_9 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_9 = 0;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    								Address.AddressID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"AddressID", "Address", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_9.setException(new RuntimeException("Value is empty for column : 'AddressID' in 'Address' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_9 = 1;
					
							Address.AddressLine1 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9).trim();
						
				
					columnIndexWithD_tFileInputDelimited_9 = 2;
					
							Address.AddressLine2 = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9).trim();
						
				
					columnIndexWithD_tFileInputDelimited_9 = 3;
					
							Address.City = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9).trim();
						
				
					columnIndexWithD_tFileInputDelimited_9 = 4;
					
							Address.StateProvince = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9).trim();
						
				
					columnIndexWithD_tFileInputDelimited_9 = 5;
					
							Address.CountryRegion = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9).trim();
						
				
					columnIndexWithD_tFileInputDelimited_9 = 6;
					
							Address.PostalCode = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9).trim();
						
				
					columnIndexWithD_tFileInputDelimited_9 = 7;
					
							Address.rowguid = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						
				
					columnIndexWithD_tFileInputDelimited_9 = 8;
					
						temp = fid_tFileInputDelimited_9.get(columnIndexWithD_tFileInputDelimited_9);
						if(temp.length() > 0) {
							
								try {
								
    									Address.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_9) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",ex_tFileInputDelimited_9.getMessage());
									rowstate_tFileInputDelimited_9.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "Address", temp, ex_tFileInputDelimited_9), ex_tFileInputDelimited_9));
								}
    							
						} else {						
							
								
									Address.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_9.getException()!=null) {
											throw rowstate_tFileInputDelimited_9.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_9_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_9 = true;
			        					
			                					System.err.println(e.getMessage());
			                					Address = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_9 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_9 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	

 


	tos_count_tFileInputDelimited_9++;

/**
 * [tFileInputDelimited_9 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	

 



/**
 * [tFileInputDelimited_9 process_data_begin ] stop
 */
// Start of branch "Address"
if(Address != null) { 



	
	/**
	 * [tAdvancedHash_Address main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Address";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Address"
						
						);
					}
					


			   
			   

					AddressStruct Address_HashRow = new AddressStruct();
		   	   	   
				
				Address_HashRow.AddressID = Address.AddressID;
				
				Address_HashRow.AddressLine1 = Address.AddressLine1;
				
				Address_HashRow.AddressLine2 = Address.AddressLine2;
				
				Address_HashRow.City = Address.City;
				
				Address_HashRow.StateProvince = Address.StateProvince;
				
				Address_HashRow.CountryRegion = Address.CountryRegion;
				
				Address_HashRow.PostalCode = Address.PostalCode;
				
				Address_HashRow.rowguid = Address.rowguid;
				
				Address_HashRow.ModifiedDate = Address.ModifiedDate;
				
			tHash_Lookup_Address.put(Address_HashRow);
			
            




 


	tos_count_tAdvancedHash_Address++;

/**
 * [tAdvancedHash_Address main ] stop
 */
	
	/**
	 * [tAdvancedHash_Address process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Address";

	

 



/**
 * [tAdvancedHash_Address process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_Address process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Address";

	

 



/**
 * [tAdvancedHash_Address process_data_end ] stop
 */

} // End of branch "Address"




	
	/**
	 * [tFileInputDelimited_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	

 



/**
 * [tFileInputDelimited_9 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_9 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	



            }
            }finally{
                if(!((Object)(context.pathraw+"Address.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_9!=null){
                		fid_tFileInputDelimited_9.close();
                	}
                }
                if(fid_tFileInputDelimited_9!=null){
                	globalMap.put("tFileInputDelimited_9_NB_LINE", fid_tFileInputDelimited_9.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_9", true);
end_Hash.put("tFileInputDelimited_9", System.currentTimeMillis());




/**
 * [tFileInputDelimited_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_Address end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Address";

	

tHash_Lookup_Address.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Address");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_Address", true);
end_Hash.put("tAdvancedHash_Address", System.currentTimeMillis());




/**
 * [tAdvancedHash_Address end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_9 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_9";

	

 



/**
 * [tFileInputDelimited_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_Address finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_Address";

	

 



/**
 * [tAdvancedHash_Address finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_9_SUBPROCESS_STATE", 1);
	}
	


public static class SalesOrderMainStruct implements routines.system.IPersistableRow<SalesOrderMainStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SalesOrderID;

				public int getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public short RevisionNumber;

				public short getRevisionNumber () {
					return this.RevisionNumber;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public java.util.Date DueDate;

				public java.util.Date getDueDate () {
					return this.DueDate;
				}
				
			    public java.util.Date ShipDate;

				public java.util.Date getShipDate () {
					return this.ShipDate;
				}
				
			    public short Status;

				public short getStatus () {
					return this.Status;
				}
				
			    public String OnlineOrderFlag;

				public String getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public String PurchaseOrderNumber;

				public String getPurchaseOrderNumber () {
					return this.PurchaseOrderNumber;
				}
				
			    public String AccountNumber;

				public String getAccountNumber () {
					return this.AccountNumber;
				}
				
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ShippingAddressID;

				public Integer getShippingAddressID () {
					return this.ShippingAddressID;
				}
				
			    public Integer BillingAddressID;

				public Integer getBillingAddressID () {
					return this.BillingAddressID;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public String CreditCardApprovalCode;

				public String getCreditCardApprovalCode () {
					return this.CreditCardApprovalCode;
				}
				
			    public float SubTotal;

				public float getSubTotal () {
					return this.SubTotal;
				}
				
			    public float TaxAmt;

				public float getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public float Freight;

				public float getFreight () {
					return this.Freight;
				}
				
			    public float TotalDue;

				public float getTotalDue () {
					return this.TotalDue;
				}
				
			    public String Comment;

				public String getComment () {
					return this.Comment;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				
			    public int SalesOrderDetailID;

				public int getSalesOrderDetailID () {
					return this.SalesOrderDetailID;
				}
				
			    public short OrderQty;

				public short getOrderQty () {
					return this.OrderQty;
				}
				
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public float UnitPrice;

				public float getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public float UnitPriceDiscount;

				public float getUnitPriceDiscount () {
					return this.UnitPriceDiscount;
				}
				
			    public float LineTotal;

				public float getLineTotal () {
					return this.LineTotal;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SalesOrderID;
						
							result = prime * result + (int) this.SalesOrderDetailID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final SalesOrderMainStruct other = (SalesOrderMainStruct) obj;
		
						if (this.SalesOrderID != other.SalesOrderID)
							return false;
					
						if (this.SalesOrderDetailID != other.SalesOrderDetailID)
							return false;
					

		return true;
    }

	public void copyDataTo(SalesOrderMainStruct other) {

		other.SalesOrderID = this.SalesOrderID;
	            other.RevisionNumber = this.RevisionNumber;
	            other.OrderDate = this.OrderDate;
	            other.DueDate = this.DueDate;
	            other.ShipDate = this.ShipDate;
	            other.Status = this.Status;
	            other.OnlineOrderFlag = this.OnlineOrderFlag;
	            other.SalesOrderNumber = this.SalesOrderNumber;
	            other.PurchaseOrderNumber = this.PurchaseOrderNumber;
	            other.AccountNumber = this.AccountNumber;
	            other.CustomerID = this.CustomerID;
	            other.ShippingAddressID = this.ShippingAddressID;
	            other.BillingAddressID = this.BillingAddressID;
	            other.ShipMethod = this.ShipMethod;
	            other.CreditCardApprovalCode = this.CreditCardApprovalCode;
	            other.SubTotal = this.SubTotal;
	            other.TaxAmt = this.TaxAmt;
	            other.Freight = this.Freight;
	            other.TotalDue = this.TotalDue;
	            other.Comment = this.Comment;
	            other.ModifiedDate = this.ModifiedDate;
	            other.SalesOrderDetailID = this.SalesOrderDetailID;
	            other.OrderQty = this.OrderQty;
	            other.ProductID = this.ProductID;
	            other.UnitPrice = this.UnitPrice;
	            other.UnitPriceDiscount = this.UnitPriceDiscount;
	            other.LineTotal = this.LineTotal;
	            
	}

	public void copyKeysDataTo(SalesOrderMainStruct other) {

		other.SalesOrderID = this.SalesOrderID;
	            	other.SalesOrderDetailID = this.SalesOrderDetailID;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.RevisionNumber = dis.readShort();
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readDate(dis);
					
					this.ShipDate = readDate(dis);
					
			        this.Status = dis.readShort();
					
					this.OnlineOrderFlag = readString(dis);
					
					this.SalesOrderNumber = readString(dis);
					
					this.PurchaseOrderNumber = readString(dis);
					
					this.AccountNumber = readString(dis);
					
			        this.CustomerID = dis.readInt();
					
						this.ShippingAddressID = readInteger(dis);
					
						this.BillingAddressID = readInteger(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CreditCardApprovalCode = readString(dis);
					
			        this.SubTotal = dis.readFloat();
					
			        this.TaxAmt = dis.readFloat();
					
			        this.Freight = dis.readFloat();
					
			        this.TotalDue = dis.readFloat();
					
					this.Comment = readString(dis);
					
					this.ModifiedDate = readDate(dis);
					
			        this.SalesOrderDetailID = dis.readInt();
					
			        this.OrderQty = dis.readShort();
					
			        this.ProductID = dis.readInt();
					
			        this.UnitPrice = dis.readFloat();
					
			        this.UnitPriceDiscount = dis.readFloat();
					
			        this.LineTotal = dis.readFloat();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.RevisionNumber = dis.readShort();
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readDate(dis);
					
					this.ShipDate = readDate(dis);
					
			        this.Status = dis.readShort();
					
					this.OnlineOrderFlag = readString(dis);
					
					this.SalesOrderNumber = readString(dis);
					
					this.PurchaseOrderNumber = readString(dis);
					
					this.AccountNumber = readString(dis);
					
			        this.CustomerID = dis.readInt();
					
						this.ShippingAddressID = readInteger(dis);
					
						this.BillingAddressID = readInteger(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CreditCardApprovalCode = readString(dis);
					
			        this.SubTotal = dis.readFloat();
					
			        this.TaxAmt = dis.readFloat();
					
			        this.Freight = dis.readFloat();
					
			        this.TotalDue = dis.readFloat();
					
					this.Comment = readString(dis);
					
					this.ModifiedDate = readDate(dis);
					
			        this.SalesOrderDetailID = dis.readInt();
					
			        this.OrderQty = dis.readShort();
					
			        this.ProductID = dis.readInt();
					
			        this.UnitPrice = dis.readFloat();
					
			        this.UnitPriceDiscount = dis.readFloat();
					
			        this.LineTotal = dis.readFloat();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// short
				
		            	dos.writeShort(this.RevisionNumber);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// java.util.Date
				
						writeDate(this.DueDate,dos);
					
					// java.util.Date
				
						writeDate(this.ShipDate,dos);
					
					// short
				
		            	dos.writeShort(this.Status);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// String
				
						writeString(this.PurchaseOrderNumber,dos);
					
					// String
				
						writeString(this.AccountNumber,dos);
					
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// Integer
				
						writeInteger(this.ShippingAddressID,dos);
					
					// Integer
				
						writeInteger(this.BillingAddressID,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CreditCardApprovalCode,dos);
					
					// float
				
		            	dos.writeFloat(this.SubTotal);
					
					// float
				
		            	dos.writeFloat(this.TaxAmt);
					
					// float
				
		            	dos.writeFloat(this.Freight);
					
					// float
				
		            	dos.writeFloat(this.TotalDue);
					
					// String
				
						writeString(this.Comment,dos);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
					// int
				
		            	dos.writeInt(this.SalesOrderDetailID);
					
					// short
				
		            	dos.writeShort(this.OrderQty);
					
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// float
				
		            	dos.writeFloat(this.UnitPrice);
					
					// float
				
		            	dos.writeFloat(this.UnitPriceDiscount);
					
					// float
				
		            	dos.writeFloat(this.LineTotal);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// short
				
		            	dos.writeShort(this.RevisionNumber);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// java.util.Date
				
						writeDate(this.DueDate,dos);
					
					// java.util.Date
				
						writeDate(this.ShipDate,dos);
					
					// short
				
		            	dos.writeShort(this.Status);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// String
				
						writeString(this.PurchaseOrderNumber,dos);
					
					// String
				
						writeString(this.AccountNumber,dos);
					
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// Integer
				
						writeInteger(this.ShippingAddressID,dos);
					
					// Integer
				
						writeInteger(this.BillingAddressID,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CreditCardApprovalCode,dos);
					
					// float
				
		            	dos.writeFloat(this.SubTotal);
					
					// float
				
		            	dos.writeFloat(this.TaxAmt);
					
					// float
				
		            	dos.writeFloat(this.Freight);
					
					// float
				
		            	dos.writeFloat(this.TotalDue);
					
					// String
				
						writeString(this.Comment,dos);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
					// int
				
		            	dos.writeInt(this.SalesOrderDetailID);
					
					// short
				
		            	dos.writeShort(this.OrderQty);
					
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// float
				
		            	dos.writeFloat(this.UnitPrice);
					
					// float
				
		            	dos.writeFloat(this.UnitPriceDiscount);
					
					// float
				
		            	dos.writeFloat(this.LineTotal);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",RevisionNumber="+String.valueOf(RevisionNumber));
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",DueDate="+String.valueOf(DueDate));
		sb.append(",ShipDate="+String.valueOf(ShipDate));
		sb.append(",Status="+String.valueOf(Status));
		sb.append(",OnlineOrderFlag="+OnlineOrderFlag);
		sb.append(",SalesOrderNumber="+SalesOrderNumber);
		sb.append(",PurchaseOrderNumber="+PurchaseOrderNumber);
		sb.append(",AccountNumber="+AccountNumber);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",ShippingAddressID="+String.valueOf(ShippingAddressID));
		sb.append(",BillingAddressID="+String.valueOf(BillingAddressID));
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",CreditCardApprovalCode="+CreditCardApprovalCode);
		sb.append(",SubTotal="+String.valueOf(SubTotal));
		sb.append(",TaxAmt="+String.valueOf(TaxAmt));
		sb.append(",Freight="+String.valueOf(Freight));
		sb.append(",TotalDue="+String.valueOf(TotalDue));
		sb.append(",Comment="+Comment);
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
		sb.append(",SalesOrderDetailID="+String.valueOf(SalesOrderDetailID));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",UnitPriceDiscount="+String.valueOf(UnitPriceDiscount));
		sb.append(",LineTotal="+String.valueOf(LineTotal));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(SalesOrderMainStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SalesOrderDetailID, other.SalesOrderDetailID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class SalesOrderHeaderStruct implements routines.system.IPersistableRow<SalesOrderHeaderStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];

	
			    public int SalesOrderID;

				public int getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public short RevisionNumber;

				public short getRevisionNumber () {
					return this.RevisionNumber;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public java.util.Date DueDate;

				public java.util.Date getDueDate () {
					return this.DueDate;
				}
				
			    public java.util.Date ShipDate;

				public java.util.Date getShipDate () {
					return this.ShipDate;
				}
				
			    public short Status;

				public short getStatus () {
					return this.Status;
				}
				
			    public String OnlineOrderFlag;

				public String getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public String PurchaseOrderNumber;

				public String getPurchaseOrderNumber () {
					return this.PurchaseOrderNumber;
				}
				
			    public String AccountNumber;

				public String getAccountNumber () {
					return this.AccountNumber;
				}
				
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ShipToAddressID;

				public Integer getShipToAddressID () {
					return this.ShipToAddressID;
				}
				
			    public Integer BillToAddressID;

				public Integer getBillToAddressID () {
					return this.BillToAddressID;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public String CreditCardApprovalCode;

				public String getCreditCardApprovalCode () {
					return this.CreditCardApprovalCode;
				}
				
			    public float SubTotal;

				public float getSubTotal () {
					return this.SubTotal;
				}
				
			    public float TaxAmt;

				public float getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public float Freight;

				public float getFreight () {
					return this.Freight;
				}
				
			    public float TotalDue;

				public float getTotalDue () {
					return this.TotalDue;
				}
				
			    public String Comment;

				public String getComment () {
					return this.Comment;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.RevisionNumber = dis.readShort();
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readDate(dis);
					
					this.ShipDate = readDate(dis);
					
			        this.Status = dis.readShort();
					
					this.OnlineOrderFlag = readString(dis);
					
					this.SalesOrderNumber = readString(dis);
					
					this.PurchaseOrderNumber = readString(dis);
					
					this.AccountNumber = readString(dis);
					
			        this.CustomerID = dis.readInt();
					
						this.ShipToAddressID = readInteger(dis);
					
						this.BillToAddressID = readInteger(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CreditCardApprovalCode = readString(dis);
					
			        this.SubTotal = dis.readFloat();
					
			        this.TaxAmt = dis.readFloat();
					
			        this.Freight = dis.readFloat();
					
			        this.TotalDue = dis.readFloat();
					
					this.Comment = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.RevisionNumber = dis.readShort();
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readDate(dis);
					
					this.ShipDate = readDate(dis);
					
			        this.Status = dis.readShort();
					
					this.OnlineOrderFlag = readString(dis);
					
					this.SalesOrderNumber = readString(dis);
					
					this.PurchaseOrderNumber = readString(dis);
					
					this.AccountNumber = readString(dis);
					
			        this.CustomerID = dis.readInt();
					
						this.ShipToAddressID = readInteger(dis);
					
						this.BillToAddressID = readInteger(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CreditCardApprovalCode = readString(dis);
					
			        this.SubTotal = dis.readFloat();
					
			        this.TaxAmt = dis.readFloat();
					
			        this.Freight = dis.readFloat();
					
			        this.TotalDue = dis.readFloat();
					
					this.Comment = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// short
				
		            	dos.writeShort(this.RevisionNumber);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// java.util.Date
				
						writeDate(this.DueDate,dos);
					
					// java.util.Date
				
						writeDate(this.ShipDate,dos);
					
					// short
				
		            	dos.writeShort(this.Status);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// String
				
						writeString(this.PurchaseOrderNumber,dos);
					
					// String
				
						writeString(this.AccountNumber,dos);
					
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// Integer
				
						writeInteger(this.ShipToAddressID,dos);
					
					// Integer
				
						writeInteger(this.BillToAddressID,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CreditCardApprovalCode,dos);
					
					// float
				
		            	dos.writeFloat(this.SubTotal);
					
					// float
				
		            	dos.writeFloat(this.TaxAmt);
					
					// float
				
		            	dos.writeFloat(this.Freight);
					
					// float
				
		            	dos.writeFloat(this.TotalDue);
					
					// String
				
						writeString(this.Comment,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// short
				
		            	dos.writeShort(this.RevisionNumber);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// java.util.Date
				
						writeDate(this.DueDate,dos);
					
					// java.util.Date
				
						writeDate(this.ShipDate,dos);
					
					// short
				
		            	dos.writeShort(this.Status);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// String
				
						writeString(this.PurchaseOrderNumber,dos);
					
					// String
				
						writeString(this.AccountNumber,dos);
					
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// Integer
				
						writeInteger(this.ShipToAddressID,dos);
					
					// Integer
				
						writeInteger(this.BillToAddressID,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CreditCardApprovalCode,dos);
					
					// float
				
		            	dos.writeFloat(this.SubTotal);
					
					// float
				
		            	dos.writeFloat(this.TaxAmt);
					
					// float
				
		            	dos.writeFloat(this.Freight);
					
					// float
				
		            	dos.writeFloat(this.TotalDue);
					
					// String
				
						writeString(this.Comment,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",RevisionNumber="+String.valueOf(RevisionNumber));
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",DueDate="+String.valueOf(DueDate));
		sb.append(",ShipDate="+String.valueOf(ShipDate));
		sb.append(",Status="+String.valueOf(Status));
		sb.append(",OnlineOrderFlag="+OnlineOrderFlag);
		sb.append(",SalesOrderNumber="+SalesOrderNumber);
		sb.append(",PurchaseOrderNumber="+PurchaseOrderNumber);
		sb.append(",AccountNumber="+AccountNumber);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
		sb.append(",BillToAddressID="+String.valueOf(BillToAddressID));
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",CreditCardApprovalCode="+CreditCardApprovalCode);
		sb.append(",SubTotal="+String.valueOf(SubTotal));
		sb.append(",TaxAmt="+String.valueOf(TaxAmt));
		sb.append(",Freight="+String.valueOf(Freight));
		sb.append(",TotalDue="+String.valueOf(TotalDue));
		sb.append(",Comment="+Comment);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(SalesOrderHeaderStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_10Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_10Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SalesOrderID;

				public int getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public short RevisionNumber;

				public short getRevisionNumber () {
					return this.RevisionNumber;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public java.util.Date DueDate;

				public java.util.Date getDueDate () {
					return this.DueDate;
				}
				
			    public java.util.Date ShipDate;

				public java.util.Date getShipDate () {
					return this.ShipDate;
				}
				
			    public short Status;

				public short getStatus () {
					return this.Status;
				}
				
			    public String OnlineOrderFlag;

				public String getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public String PurchaseOrderNumber;

				public String getPurchaseOrderNumber () {
					return this.PurchaseOrderNumber;
				}
				
			    public String AccountNumber;

				public String getAccountNumber () {
					return this.AccountNumber;
				}
				
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ShipToAddressID;

				public Integer getShipToAddressID () {
					return this.ShipToAddressID;
				}
				
			    public Integer BillToAddressID;

				public Integer getBillToAddressID () {
					return this.BillToAddressID;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public String CreditCardApprovalCode;

				public String getCreditCardApprovalCode () {
					return this.CreditCardApprovalCode;
				}
				
			    public float SubTotal;

				public float getSubTotal () {
					return this.SubTotal;
				}
				
			    public float TaxAmt;

				public float getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public float Freight;

				public float getFreight () {
					return this.Freight;
				}
				
			    public float TotalDue;

				public float getTotalDue () {
					return this.TotalDue;
				}
				
			    public String Comment;

				public String getComment () {
					return this.Comment;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SalesOrderID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tFileInputDelimited_10Struct other = (after_tFileInputDelimited_10Struct) obj;
		
						if (this.SalesOrderID != other.SalesOrderID)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tFileInputDelimited_10Struct other) {

		other.SalesOrderID = this.SalesOrderID;
	            other.RevisionNumber = this.RevisionNumber;
	            other.OrderDate = this.OrderDate;
	            other.DueDate = this.DueDate;
	            other.ShipDate = this.ShipDate;
	            other.Status = this.Status;
	            other.OnlineOrderFlag = this.OnlineOrderFlag;
	            other.SalesOrderNumber = this.SalesOrderNumber;
	            other.PurchaseOrderNumber = this.PurchaseOrderNumber;
	            other.AccountNumber = this.AccountNumber;
	            other.CustomerID = this.CustomerID;
	            other.ShipToAddressID = this.ShipToAddressID;
	            other.BillToAddressID = this.BillToAddressID;
	            other.ShipMethod = this.ShipMethod;
	            other.CreditCardApprovalCode = this.CreditCardApprovalCode;
	            other.SubTotal = this.SubTotal;
	            other.TaxAmt = this.TaxAmt;
	            other.Freight = this.Freight;
	            other.TotalDue = this.TotalDue;
	            other.Comment = this.Comment;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(after_tFileInputDelimited_10Struct other) {

		other.SalesOrderID = this.SalesOrderID;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.RevisionNumber = dis.readShort();
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readDate(dis);
					
					this.ShipDate = readDate(dis);
					
			        this.Status = dis.readShort();
					
					this.OnlineOrderFlag = readString(dis);
					
					this.SalesOrderNumber = readString(dis);
					
					this.PurchaseOrderNumber = readString(dis);
					
					this.AccountNumber = readString(dis);
					
			        this.CustomerID = dis.readInt();
					
						this.ShipToAddressID = readInteger(dis);
					
						this.BillToAddressID = readInteger(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CreditCardApprovalCode = readString(dis);
					
			        this.SubTotal = dis.readFloat();
					
			        this.TaxAmt = dis.readFloat();
					
			        this.Freight = dis.readFloat();
					
			        this.TotalDue = dis.readFloat();
					
					this.Comment = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.RevisionNumber = dis.readShort();
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readDate(dis);
					
					this.ShipDate = readDate(dis);
					
			        this.Status = dis.readShort();
					
					this.OnlineOrderFlag = readString(dis);
					
					this.SalesOrderNumber = readString(dis);
					
					this.PurchaseOrderNumber = readString(dis);
					
					this.AccountNumber = readString(dis);
					
			        this.CustomerID = dis.readInt();
					
						this.ShipToAddressID = readInteger(dis);
					
						this.BillToAddressID = readInteger(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CreditCardApprovalCode = readString(dis);
					
			        this.SubTotal = dis.readFloat();
					
			        this.TaxAmt = dis.readFloat();
					
			        this.Freight = dis.readFloat();
					
			        this.TotalDue = dis.readFloat();
					
					this.Comment = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// short
				
		            	dos.writeShort(this.RevisionNumber);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// java.util.Date
				
						writeDate(this.DueDate,dos);
					
					// java.util.Date
				
						writeDate(this.ShipDate,dos);
					
					// short
				
		            	dos.writeShort(this.Status);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// String
				
						writeString(this.PurchaseOrderNumber,dos);
					
					// String
				
						writeString(this.AccountNumber,dos);
					
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// Integer
				
						writeInteger(this.ShipToAddressID,dos);
					
					// Integer
				
						writeInteger(this.BillToAddressID,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CreditCardApprovalCode,dos);
					
					// float
				
		            	dos.writeFloat(this.SubTotal);
					
					// float
				
		            	dos.writeFloat(this.TaxAmt);
					
					// float
				
		            	dos.writeFloat(this.Freight);
					
					// float
				
		            	dos.writeFloat(this.TotalDue);
					
					// String
				
						writeString(this.Comment,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// short
				
		            	dos.writeShort(this.RevisionNumber);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// java.util.Date
				
						writeDate(this.DueDate,dos);
					
					// java.util.Date
				
						writeDate(this.ShipDate,dos);
					
					// short
				
		            	dos.writeShort(this.Status);
					
					// String
				
						writeString(this.OnlineOrderFlag,dos);
					
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// String
				
						writeString(this.PurchaseOrderNumber,dos);
					
					// String
				
						writeString(this.AccountNumber,dos);
					
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// Integer
				
						writeInteger(this.ShipToAddressID,dos);
					
					// Integer
				
						writeInteger(this.BillToAddressID,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CreditCardApprovalCode,dos);
					
					// float
				
		            	dos.writeFloat(this.SubTotal);
					
					// float
				
		            	dos.writeFloat(this.TaxAmt);
					
					// float
				
		            	dos.writeFloat(this.Freight);
					
					// float
				
		            	dos.writeFloat(this.TotalDue);
					
					// String
				
						writeString(this.Comment,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",RevisionNumber="+String.valueOf(RevisionNumber));
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",DueDate="+String.valueOf(DueDate));
		sb.append(",ShipDate="+String.valueOf(ShipDate));
		sb.append(",Status="+String.valueOf(Status));
		sb.append(",OnlineOrderFlag="+OnlineOrderFlag);
		sb.append(",SalesOrderNumber="+SalesOrderNumber);
		sb.append(",PurchaseOrderNumber="+PurchaseOrderNumber);
		sb.append(",AccountNumber="+AccountNumber);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
		sb.append(",BillToAddressID="+String.valueOf(BillToAddressID));
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",CreditCardApprovalCode="+CreditCardApprovalCode);
		sb.append(",SubTotal="+String.valueOf(SubTotal));
		sb.append(",TaxAmt="+String.valueOf(TaxAmt));
		sb.append(",Freight="+String.valueOf(Freight));
		sb.append(",TotalDue="+String.valueOf(TotalDue));
		sb.append(",Comment="+Comment);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tFileInputDelimited_11Process(globalMap);

		SalesOrderHeaderStruct SalesOrderHeader = new SalesOrderHeaderStruct();
SalesOrderMainStruct SalesOrderMain = new SalesOrderMainStruct();





	
	/**
	 * [tFileOutputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_3", false);
		start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"SalesOrderMain");
					}
				
		int tos_count_tFileOutputDelimited_3 = 0;
		

String fileName_tFileOutputDelimited_3 = "";
    fileName_tFileOutputDelimited_3 = (new java.io.File(context.path_harm+"HSalesOrder.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_3 = null;
    String extension_tFileOutputDelimited_3 = null;
    String directory_tFileOutputDelimited_3 = null;
    if((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        }
        directory_tFileOutputDelimited_3 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_3 = true;
    java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
    globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
            int nb_line_tFileOutputDelimited_3 = 0;
            int splitedFileNo_tFileOutputDelimited_3 = 0;
            int currentRow_tFileOutputDelimited_3 = 0;

            final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
                        if(!dir_tFileOutputDelimited_3.exists()) {
                            dir_tFileOutputDelimited_3.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_3 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
                        if(fileToDelete_tFileOutputDelimited_3.exists()) {
                            fileToDelete_tFileOutputDelimited_3.delete();
                        }
                        outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_3.length()==0){
                                        outtFileOutputDelimited_3.write("SalesOrderID");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("RevisionNumber");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("OrderDate");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("DueDate");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("ShipDate");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("Status");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("OnlineOrderFlag");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("SalesOrderNumber");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("PurchaseOrderNumber");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("AccountNumber");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("CustomerID");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("ShippingAddressID");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("BillingAddressID");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("ShipMethod");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("CreditCardApprovalCode");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("SubTotal");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("TaxAmt");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("Freight");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("TotalDue");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("Comment");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("ModifiedDate");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("SalesOrderDetailID");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("OrderQty");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("ProductID");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("UnitPrice");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("UnitPriceDiscount");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("LineTotal");
                                        outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

 



/**
 * [tFileOutputDelimited_3 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"SalesOrderHeader");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<SalesOrderDetailStruct> tHash_Lookup_SalesOrderDetail = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<SalesOrderDetailStruct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<SalesOrderDetailStruct>) 
					globalMap.get( "tHash_Lookup_SalesOrderDetail" ))
					;					
					
	

SalesOrderDetailStruct SalesOrderDetailHashKey = new SalesOrderDetailStruct();
SalesOrderDetailStruct SalesOrderDetailDefault = new SalesOrderDetailStruct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
SalesOrderMainStruct SalesOrderMain_tmp = new SalesOrderMainStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_10", false);
		start_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_10";

	
		int tos_count_tFileInputDelimited_10 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_10 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_10 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_10 = null;
				int limit_tFileInputDelimited_10 = -1;
				try{
					
						Object filename_tFileInputDelimited_10 = context.pathraw+"SalesOrderHeader.csv";
						if(filename_tFileInputDelimited_10 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_10 = 0, random_value_tFileInputDelimited_10 = -1;
			if(footer_value_tFileInputDelimited_10 >0 || random_value_tFileInputDelimited_10 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_10 = new org.talend.fileprocess.FileInputDelimited(context.pathraw+"SalesOrderHeader.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_10
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_10!=null && fid_tFileInputDelimited_10.nextRecord()) {
						rowstate_tFileInputDelimited_10.reset();
						
			    						SalesOrderHeader = null;			
												
									boolean whetherReject_tFileInputDelimited_10 = false;
									SalesOrderHeader = new SalesOrderHeaderStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_10 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_10 = 0;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								SalesOrderHeader.SalesOrderID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SalesOrderID", "SalesOrderHeader", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_10.setException(new RuntimeException("Value is empty for column : 'SalesOrderID' in 'SalesOrderHeader' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 1;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								SalesOrderHeader.RevisionNumber = ParserUtils.parseTo_short(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"RevisionNumber", "SalesOrderHeader", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_10.setException(new RuntimeException("Value is empty for column : 'RevisionNumber' in 'SalesOrderHeader' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 2;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    									SalesOrderHeader.OrderDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"OrderDate", "SalesOrderHeader", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									SalesOrderHeader.OrderDate = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 3;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    									SalesOrderHeader.DueDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"DueDate", "SalesOrderHeader", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									SalesOrderHeader.DueDate = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 4;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    									SalesOrderHeader.ShipDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ShipDate", "SalesOrderHeader", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									SalesOrderHeader.ShipDate = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 5;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								SalesOrderHeader.Status = ParserUtils.parseTo_short(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Status", "SalesOrderHeader", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_10.setException(new RuntimeException("Value is empty for column : 'Status' in 'SalesOrderHeader' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 6;
					
							SalesOrderHeader.OnlineOrderFlag = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 7;
					
							SalesOrderHeader.SalesOrderNumber = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 8;
					
							SalesOrderHeader.PurchaseOrderNumber = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 9;
					
							SalesOrderHeader.AccountNumber = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 10;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								SalesOrderHeader.CustomerID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"CustomerID", "SalesOrderHeader", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_10.setException(new RuntimeException("Value is empty for column : 'CustomerID' in 'SalesOrderHeader' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 11;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								SalesOrderHeader.ShipToAddressID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ShipToAddressID", "SalesOrderHeader", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									SalesOrderHeader.ShipToAddressID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 12;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								SalesOrderHeader.BillToAddressID = ParserUtils.parseTo_Integer(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"BillToAddressID", "SalesOrderHeader", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									SalesOrderHeader.BillToAddressID = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 13;
					
							SalesOrderHeader.ShipMethod = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 14;
					
							SalesOrderHeader.CreditCardApprovalCode = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 15;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								SalesOrderHeader.SubTotal = ParserUtils.parseTo_float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SubTotal", "SalesOrderHeader", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_10.setException(new RuntimeException("Value is empty for column : 'SubTotal' in 'SalesOrderHeader' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 16;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								SalesOrderHeader.TaxAmt = ParserUtils.parseTo_float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"TaxAmt", "SalesOrderHeader", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_10.setException(new RuntimeException("Value is empty for column : 'TaxAmt' in 'SalesOrderHeader' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 17;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								SalesOrderHeader.Freight = ParserUtils.parseTo_float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"Freight", "SalesOrderHeader", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_10.setException(new RuntimeException("Value is empty for column : 'Freight' in 'SalesOrderHeader' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 18;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    								SalesOrderHeader.TotalDue = ParserUtils.parseTo_float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"TotalDue", "SalesOrderHeader", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_10.setException(new RuntimeException("Value is empty for column : 'TotalDue' in 'SalesOrderHeader' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_10 = 19;
					
							SalesOrderHeader.Comment = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 20;
					
							SalesOrderHeader.rowguid = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						
				
					columnIndexWithD_tFileInputDelimited_10 = 21;
					
						temp = fid_tFileInputDelimited_10.get(columnIndexWithD_tFileInputDelimited_10);
						if(temp.length() > 0) {
							
								try {
								
    									SalesOrderHeader.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",ex_tFileInputDelimited_10.getMessage());
									rowstate_tFileInputDelimited_10.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "SalesOrderHeader", temp, ex_tFileInputDelimited_10), ex_tFileInputDelimited_10));
								}
    							
						} else {						
							
								
									SalesOrderHeader.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_10.getException()!=null) {
											throw rowstate_tFileInputDelimited_10.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_10_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_10 = true;
			        					
			                					System.err.println(e.getMessage());
			                					SalesOrderHeader = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_10 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_10 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	

 


	tos_count_tFileInputDelimited_10++;

/**
 * [tFileInputDelimited_10 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	

 



/**
 * [tFileInputDelimited_10 process_data_begin ] stop
 */
// Start of branch "SalesOrderHeader"
if(SalesOrderHeader != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"SalesOrderHeader"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "SalesOrderDetail" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLoopSalesOrderDetail = false;
       		  	    	
       		  	    	
 							SalesOrderDetailStruct SalesOrderDetailObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
	                        		    	Object exprKeyValue_SalesOrderDetail__SalesOrderID = SalesOrderHeader.SalesOrderID ;
	                        		    	if(exprKeyValue_SalesOrderDetail__SalesOrderID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_5 = true;
	                        		    	} else {
                        		    			SalesOrderDetailHashKey.SalesOrderID = (int)(Integer) exprKeyValue_SalesOrderDetail__SalesOrderID;
                        		    		}
                        		    		

								
		                        	SalesOrderDetailHashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_5) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_SalesOrderDetail.lookup( SalesOrderDetailHashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
								  
								  if(hasCasePrimitiveKeyWithNull_tMap_5 || !tHash_Lookup_SalesOrderDetail.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLoopSalesOrderDetail = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLoopSalesOrderDetail = true;
			           		  	} // G 21
                    		  	
                    		

							SalesOrderDetailStruct SalesOrderDetail = null;
                    		  	 
							

								while ((tHash_Lookup_SalesOrderDetail != null && tHash_Lookup_SalesOrderDetail.hasNext()) || forceLoopSalesOrderDetail) { // G_TM_M_043

								
									 // CALL close loop of lookup 'SalesOrderDetail'
									
                    		  	 
							   
                    		  	 
	       		  	    	SalesOrderDetailStruct fromLookup_SalesOrderDetail = null;
							SalesOrderDetail = SalesOrderDetailDefault;
										 
							
								
								if(!forceLoopSalesOrderDetail) { // G 46
								
							
								 
							
								
								fromLookup_SalesOrderDetail = tHash_Lookup_SalesOrderDetail.next();

							

							if(fromLookup_SalesOrderDetail != null) {
								SalesOrderDetail = fromLookup_SalesOrderDetail;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLoopSalesOrderDetail = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

SalesOrderMain = null;


// # Output table : 'SalesOrderMain'
SalesOrderMain_tmp.SalesOrderID = SalesOrderHeader.SalesOrderID ;
SalesOrderMain_tmp.RevisionNumber = SalesOrderHeader.RevisionNumber ;
SalesOrderMain_tmp.OrderDate = SalesOrderHeader.OrderDate ;
SalesOrderMain_tmp.DueDate = SalesOrderHeader.DueDate ;
SalesOrderMain_tmp.ShipDate = SalesOrderHeader.ShipDate ;
SalesOrderMain_tmp.Status = SalesOrderHeader.Status ;
SalesOrderMain_tmp.OnlineOrderFlag = SalesOrderHeader.OnlineOrderFlag ;
SalesOrderMain_tmp.SalesOrderNumber = SalesOrderHeader.SalesOrderNumber ;
SalesOrderMain_tmp.PurchaseOrderNumber = SalesOrderHeader.PurchaseOrderNumber ;
SalesOrderMain_tmp.AccountNumber = SalesOrderHeader.AccountNumber ;
SalesOrderMain_tmp.CustomerID = SalesOrderHeader.CustomerID ;
SalesOrderMain_tmp.ShippingAddressID = SalesOrderHeader.ShipToAddressID ;
SalesOrderMain_tmp.BillingAddressID = SalesOrderHeader.BillToAddressID;
SalesOrderMain_tmp.ShipMethod = SalesOrderHeader.ShipMethod ;
SalesOrderMain_tmp.CreditCardApprovalCode = SalesOrderHeader.CreditCardApprovalCode ;
SalesOrderMain_tmp.SubTotal = SalesOrderHeader.SubTotal ;
SalesOrderMain_tmp.TaxAmt = SalesOrderHeader.TaxAmt ;
SalesOrderMain_tmp.Freight = SalesOrderHeader.Freight ;
SalesOrderMain_tmp.TotalDue = SalesOrderHeader.TotalDue ;
SalesOrderMain_tmp.Comment = SalesOrderHeader.Comment ;
SalesOrderMain_tmp.ModifiedDate = SalesOrderHeader.ModifiedDate ;
SalesOrderMain_tmp.SalesOrderDetailID = SalesOrderDetail.SalesOrderDetailID ;
SalesOrderMain_tmp.OrderQty = SalesOrderDetail.OrderQty ;
SalesOrderMain_tmp.ProductID = SalesOrderDetail.ProductID ;
SalesOrderMain_tmp.UnitPrice = SalesOrderDetail.UnitPrice ;
SalesOrderMain_tmp.UnitPriceDiscount = SalesOrderDetail.UnitPriceDiscount ;
SalesOrderMain_tmp.LineTotal = SalesOrderDetail.LineTotal ;
SalesOrderMain = SalesOrderMain_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "SalesOrderMain"
if(SalesOrderMain != null) { 



	
	/**
	 * [tFileOutputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"SalesOrderMain"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.SalesOrderID
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.RevisionNumber
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(SalesOrderMain.OrderDate != null) {
                        sb_tFileOutputDelimited_3.append(
                            FormatterUtils.format_Date(SalesOrderMain.OrderDate, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(SalesOrderMain.DueDate != null) {
                        sb_tFileOutputDelimited_3.append(
                            FormatterUtils.format_Date(SalesOrderMain.DueDate, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(SalesOrderMain.ShipDate != null) {
                        sb_tFileOutputDelimited_3.append(
                            FormatterUtils.format_Date(SalesOrderMain.ShipDate, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.Status
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(SalesOrderMain.OnlineOrderFlag != null) {
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.OnlineOrderFlag
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(SalesOrderMain.SalesOrderNumber != null) {
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.SalesOrderNumber
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(SalesOrderMain.PurchaseOrderNumber != null) {
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.PurchaseOrderNumber
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(SalesOrderMain.AccountNumber != null) {
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.AccountNumber
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.CustomerID
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(SalesOrderMain.ShippingAddressID != null) {
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.ShippingAddressID
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(SalesOrderMain.BillingAddressID != null) {
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.BillingAddressID
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(SalesOrderMain.ShipMethod != null) {
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.ShipMethod
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(SalesOrderMain.CreditCardApprovalCode != null) {
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.CreditCardApprovalCode
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.SubTotal
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.TaxAmt
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.Freight
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.TotalDue
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(SalesOrderMain.Comment != null) {
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.Comment
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(SalesOrderMain.ModifiedDate != null) {
                        sb_tFileOutputDelimited_3.append(
                            FormatterUtils.format_Date(SalesOrderMain.ModifiedDate, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.SalesOrderDetailID
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.OrderQty
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.ProductID
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.UnitPrice
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.UnitPriceDiscount
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            SalesOrderMain.LineTotal
                        );
                    sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);


                    nb_line_tFileOutputDelimited_3++;
                    resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

                        outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());




 


	tos_count_tFileOutputDelimited_3++;

/**
 * [tFileOutputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_end ] stop
 */

} // End of branch "SalesOrderMain"



	
		} // close loop of lookup 'SalesOrderDetail' // G_TM_M_043
	
	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "SalesOrderHeader"




	
	/**
	 * [tFileInputDelimited_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	

 



/**
 * [tFileInputDelimited_10 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_10 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	



            }
            }finally{
                if(!((Object)(context.pathraw+"SalesOrderHeader.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_10!=null){
                		fid_tFileInputDelimited_10.close();
                	}
                }
                if(fid_tFileInputDelimited_10!=null){
                	globalMap.put("tFileInputDelimited_10_NB_LINE", fid_tFileInputDelimited_10.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_10", true);
end_Hash.put("tFileInputDelimited_10", System.currentTimeMillis());




/**
 * [tFileInputDelimited_10 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_SalesOrderDetail != null) {
						tHash_Lookup_SalesOrderDetail.endGet();
					}
					globalMap.remove( "tHash_Lookup_SalesOrderDetail" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"SalesOrderHeader");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	



		
			
					if(outtFileOutputDelimited_3!=null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}
				
				globalMap.put("tFileOutputDelimited_3_NB_LINE",nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_3", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"SalesOrderMain");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_3", true);
end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_SalesOrderDetail"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_10 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_10";

	

 



/**
 * [tFileInputDelimited_10 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	


		if(resourceMap.get("finish_tFileOutputDelimited_3") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_3");
						if(outtFileOutputDelimited_3!=null) {
							outtFileOutputDelimited_3.flush();
							outtFileOutputDelimited_3.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", 1);
	}
	


public static class SalesOrderDetailStruct implements routines.system.IPersistableComparableLookupRow<SalesOrderDetailStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SalesOrderID;

				public int getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public int SalesOrderDetailID;

				public int getSalesOrderDetailID () {
					return this.SalesOrderDetailID;
				}
				
			    public short OrderQty;

				public short getOrderQty () {
					return this.OrderQty;
				}
				
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public float UnitPrice;

				public float getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public float UnitPriceDiscount;

				public float getUnitPriceDiscount () {
					return this.UnitPriceDiscount;
				}
				
			    public float LineTotal;

				public float getLineTotal () {
					return this.LineTotal;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SalesOrderID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final SalesOrderDetailStruct other = (SalesOrderDetailStruct) obj;
		
						if (this.SalesOrderID != other.SalesOrderID)
							return false;
					

		return true;
    }

	public void copyDataTo(SalesOrderDetailStruct other) {

		other.SalesOrderID = this.SalesOrderID;
	            other.SalesOrderDetailID = this.SalesOrderDetailID;
	            other.OrderQty = this.OrderQty;
	            other.ProductID = this.ProductID;
	            other.UnitPrice = this.UnitPrice;
	            other.UnitPriceDiscount = this.UnitPriceDiscount;
	            other.LineTotal = this.LineTotal;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(SalesOrderDetailStruct other) {

		other.SalesOrderID = this.SalesOrderID;
	            	
	}




	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.SalesOrderDetailID = dis.readInt();
					
			            this.OrderQty = dis.readShort();
					
			            this.ProductID = dis.readInt();
					
			            this.UnitPrice = dis.readFloat();
					
			            this.UnitPriceDiscount = dis.readFloat();
					
			            this.LineTotal = dis.readFloat();
					
       			    	this.rowguid = (Object) ois.readObject();
					
						this.ModifiedDate = readDate(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.SalesOrderDetailID = objectIn.readInt();
					
			            this.OrderQty = objectIn.readShort();
					
			            this.ProductID = objectIn.readInt();
					
			            this.UnitPrice = objectIn.readFloat();
					
			            this.UnitPriceDiscount = objectIn.readFloat();
					
			            this.LineTotal = objectIn.readFloat();
					
       			    	this.rowguid = (Object) objectIn.readObject();
					
						this.ModifiedDate = readDate(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.SalesOrderDetailID);
					
		            	dos.writeShort(this.OrderQty);
					
		            	dos.writeInt(this.ProductID);
					
		            	dos.writeFloat(this.UnitPrice);
					
		            	dos.writeFloat(this.UnitPriceDiscount);
					
		            	dos.writeFloat(this.LineTotal);
					
       			    	oos.writeObject(this.rowguid);
					
						writeDate(this.ModifiedDate, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.SalesOrderDetailID);
					
					objectOut.writeShort(this.OrderQty);
					
					objectOut.writeInt(this.ProductID);
					
					objectOut.writeFloat(this.UnitPrice);
					
					objectOut.writeFloat(this.UnitPriceDiscount);
					
					objectOut.writeFloat(this.LineTotal);
					
       			    	objectOut.writeObject(this.rowguid);
					
						writeDate(this.ModifiedDate, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",SalesOrderDetailID="+String.valueOf(SalesOrderDetailID));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",UnitPriceDiscount="+String.valueOf(UnitPriceDiscount));
		sb.append(",LineTotal="+String.valueOf(LineTotal));
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(SalesOrderDetailStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		SalesOrderDetailStruct SalesOrderDetail = new SalesOrderDetailStruct();




	
	/**
	 * [tAdvancedHash_SalesOrderDetail begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_SalesOrderDetail", false);
		start_Hash.put("tAdvancedHash_SalesOrderDetail", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_SalesOrderDetail";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"SalesOrderDetail");
					}
				
		int tos_count_tAdvancedHash_SalesOrderDetail = 0;
		

			   		// connection name:SalesOrderDetail
			   		// source node:tFileInputDelimited_11 - inputs:(after_tFileInputDelimited_10) outputs:(SalesOrderDetail,SalesOrderDetail) | target node:tAdvancedHash_SalesOrderDetail - inputs:(SalesOrderDetail) outputs:()
			   		// linked node: tMap_5 - inputs:(SalesOrderHeader,SalesOrderDetail) outputs:(SalesOrderMain)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_SalesOrderDetail = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<SalesOrderDetailStruct> tHash_Lookup_SalesOrderDetail =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<SalesOrderDetailStruct>getLookup(matchingModeEnum_SalesOrderDetail);
	   						   
		   	   	   globalMap.put("tHash_Lookup_SalesOrderDetail", tHash_Lookup_SalesOrderDetail);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_SalesOrderDetail begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_11", false);
		start_Hash.put("tFileInputDelimited_11", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_11";

	
		int tos_count_tFileInputDelimited_11 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_11 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_11 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_11 = null;
				int limit_tFileInputDelimited_11 = -1;
				try{
					
						Object filename_tFileInputDelimited_11 = context.pathraw+"SalesOrderDetail.csv";
						if(filename_tFileInputDelimited_11 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_11 = 0, random_value_tFileInputDelimited_11 = -1;
			if(footer_value_tFileInputDelimited_11 >0 || random_value_tFileInputDelimited_11 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_11 = new org.talend.fileprocess.FileInputDelimited(context.pathraw+"SalesOrderDetail.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_11
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_11_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_11!=null && fid_tFileInputDelimited_11.nextRecord()) {
						rowstate_tFileInputDelimited_11.reset();
						
			    						SalesOrderDetail = null;			
									
			    						SalesOrderDetail = null;			
												
									boolean whetherReject_tFileInputDelimited_11 = false;
									SalesOrderDetail = new SalesOrderDetailStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_11 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_11 = 0;
					
						temp = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						if(temp.length() > 0) {
							
								try {
								
    								SalesOrderDetail.SalesOrderID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_11) {
globalMap.put("tFileInputDelimited_11_ERROR_MESSAGE",ex_tFileInputDelimited_11.getMessage());
									rowstate_tFileInputDelimited_11.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SalesOrderID", "SalesOrderDetail", temp, ex_tFileInputDelimited_11), ex_tFileInputDelimited_11));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_11.setException(new RuntimeException("Value is empty for column : 'SalesOrderID' in 'SalesOrderDetail' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_11 = 1;
					
						temp = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						if(temp.length() > 0) {
							
								try {
								
    								SalesOrderDetail.SalesOrderDetailID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_11) {
globalMap.put("tFileInputDelimited_11_ERROR_MESSAGE",ex_tFileInputDelimited_11.getMessage());
									rowstate_tFileInputDelimited_11.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"SalesOrderDetailID", "SalesOrderDetail", temp, ex_tFileInputDelimited_11), ex_tFileInputDelimited_11));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_11.setException(new RuntimeException("Value is empty for column : 'SalesOrderDetailID' in 'SalesOrderDetail' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_11 = 2;
					
						temp = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						if(temp.length() > 0) {
							
								try {
								
    								SalesOrderDetail.OrderQty = ParserUtils.parseTo_short(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_11) {
globalMap.put("tFileInputDelimited_11_ERROR_MESSAGE",ex_tFileInputDelimited_11.getMessage());
									rowstate_tFileInputDelimited_11.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"OrderQty", "SalesOrderDetail", temp, ex_tFileInputDelimited_11), ex_tFileInputDelimited_11));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_11.setException(new RuntimeException("Value is empty for column : 'OrderQty' in 'SalesOrderDetail' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_11 = 3;
					
						temp = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						if(temp.length() > 0) {
							
								try {
								
    								SalesOrderDetail.ProductID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_11) {
globalMap.put("tFileInputDelimited_11_ERROR_MESSAGE",ex_tFileInputDelimited_11.getMessage());
									rowstate_tFileInputDelimited_11.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ProductID", "SalesOrderDetail", temp, ex_tFileInputDelimited_11), ex_tFileInputDelimited_11));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_11.setException(new RuntimeException("Value is empty for column : 'ProductID' in 'SalesOrderDetail' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_11 = 4;
					
						temp = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						if(temp.length() > 0) {
							
								try {
								
    								SalesOrderDetail.UnitPrice = ParserUtils.parseTo_float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_11) {
globalMap.put("tFileInputDelimited_11_ERROR_MESSAGE",ex_tFileInputDelimited_11.getMessage());
									rowstate_tFileInputDelimited_11.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"UnitPrice", "SalesOrderDetail", temp, ex_tFileInputDelimited_11), ex_tFileInputDelimited_11));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_11.setException(new RuntimeException("Value is empty for column : 'UnitPrice' in 'SalesOrderDetail' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_11 = 5;
					
						temp = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						if(temp.length() > 0) {
							
								try {
								
    								SalesOrderDetail.UnitPriceDiscount = ParserUtils.parseTo_float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_11) {
globalMap.put("tFileInputDelimited_11_ERROR_MESSAGE",ex_tFileInputDelimited_11.getMessage());
									rowstate_tFileInputDelimited_11.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"UnitPriceDiscount", "SalesOrderDetail", temp, ex_tFileInputDelimited_11), ex_tFileInputDelimited_11));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_11.setException(new RuntimeException("Value is empty for column : 'UnitPriceDiscount' in 'SalesOrderDetail' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_11 = 6;
					
						temp = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						if(temp.length() > 0) {
							
								try {
								
    								SalesOrderDetail.LineTotal = ParserUtils.parseTo_float(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_11) {
globalMap.put("tFileInputDelimited_11_ERROR_MESSAGE",ex_tFileInputDelimited_11.getMessage());
									rowstate_tFileInputDelimited_11.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"LineTotal", "SalesOrderDetail", temp, ex_tFileInputDelimited_11), ex_tFileInputDelimited_11));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_11.setException(new RuntimeException("Value is empty for column : 'LineTotal' in 'SalesOrderDetail' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_11 = 7;
					
							SalesOrderDetail.rowguid = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						
				
					columnIndexWithD_tFileInputDelimited_11 = 8;
					
						temp = fid_tFileInputDelimited_11.get(columnIndexWithD_tFileInputDelimited_11);
						if(temp.length() > 0) {
							
								try {
								
    									SalesOrderDetail.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_11) {
globalMap.put("tFileInputDelimited_11_ERROR_MESSAGE",ex_tFileInputDelimited_11.getMessage());
									rowstate_tFileInputDelimited_11.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "SalesOrderDetail", temp, ex_tFileInputDelimited_11), ex_tFileInputDelimited_11));
								}
    							
						} else {						
							
								
									SalesOrderDetail.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_11.getException()!=null) {
											throw rowstate_tFileInputDelimited_11.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_11_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_11 = true;
			        					
			                					System.err.println(e.getMessage());
			                					SalesOrderDetail = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_11 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_11 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_11";

	

 


	tos_count_tFileInputDelimited_11++;

/**
 * [tFileInputDelimited_11 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_11";

	

 



/**
 * [tFileInputDelimited_11 process_data_begin ] stop
 */
// Start of branch "SalesOrderDetail"
if(SalesOrderDetail != null) { 



	
	/**
	 * [tAdvancedHash_SalesOrderDetail main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_SalesOrderDetail";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"SalesOrderDetail"
						
						);
					}
					


			   
			   

					SalesOrderDetailStruct SalesOrderDetail_HashRow = new SalesOrderDetailStruct();
		   	   	   
				
				SalesOrderDetail_HashRow.SalesOrderID = SalesOrderDetail.SalesOrderID;
				
				SalesOrderDetail_HashRow.SalesOrderDetailID = SalesOrderDetail.SalesOrderDetailID;
				
				SalesOrderDetail_HashRow.OrderQty = SalesOrderDetail.OrderQty;
				
				SalesOrderDetail_HashRow.ProductID = SalesOrderDetail.ProductID;
				
				SalesOrderDetail_HashRow.UnitPrice = SalesOrderDetail.UnitPrice;
				
				SalesOrderDetail_HashRow.UnitPriceDiscount = SalesOrderDetail.UnitPriceDiscount;
				
				SalesOrderDetail_HashRow.LineTotal = SalesOrderDetail.LineTotal;
				
				SalesOrderDetail_HashRow.rowguid = SalesOrderDetail.rowguid;
				
				SalesOrderDetail_HashRow.ModifiedDate = SalesOrderDetail.ModifiedDate;
				
			tHash_Lookup_SalesOrderDetail.put(SalesOrderDetail_HashRow);
			
            




 


	tos_count_tAdvancedHash_SalesOrderDetail++;

/**
 * [tAdvancedHash_SalesOrderDetail main ] stop
 */
	
	/**
	 * [tAdvancedHash_SalesOrderDetail process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_SalesOrderDetail";

	

 



/**
 * [tAdvancedHash_SalesOrderDetail process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_SalesOrderDetail process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_SalesOrderDetail";

	

 



/**
 * [tAdvancedHash_SalesOrderDetail process_data_end ] stop
 */

} // End of branch "SalesOrderDetail"




	
	/**
	 * [tFileInputDelimited_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_11";

	

 



/**
 * [tFileInputDelimited_11 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_11 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_11";

	



            }
            }finally{
                if(!((Object)(context.pathraw+"SalesOrderDetail.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_11!=null){
                		fid_tFileInputDelimited_11.close();
                	}
                }
                if(fid_tFileInputDelimited_11!=null){
                	globalMap.put("tFileInputDelimited_11_NB_LINE", fid_tFileInputDelimited_11.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_11", true);
end_Hash.put("tFileInputDelimited_11", System.currentTimeMillis());




/**
 * [tFileInputDelimited_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_SalesOrderDetail end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_SalesOrderDetail";

	

tHash_Lookup_SalesOrderDetail.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"SalesOrderDetail");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_SalesOrderDetail", true);
end_Hash.put("tAdvancedHash_SalesOrderDetail", System.currentTimeMillis());




/**
 * [tAdvancedHash_SalesOrderDetail end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_11 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_11";

	

 



/**
 * [tFileInputDelimited_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_SalesOrderDetail finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_SalesOrderDetail";

	

 



/**
 * [tAdvancedHash_SalesOrderDetail finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_11_SUBPROCESS_STATE", 1);
	}
	


public static class AddressFullStruct implements routines.system.IPersistableRow<AddressFullStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_HARMONIZED = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int AddressID;

				public int getAddressID () {
					return this.AddressID;
				}
				
			    public String AddressLine1;

				public String getAddressLine1 () {
					return this.AddressLine1;
				}
				
			    public String AddressLine2;

				public String getAddressLine2 () {
					return this.AddressLine2;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String StateProvince;

				public String getStateProvince () {
					return this.StateProvince;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public String PostalCode;

				public String getPostalCode () {
					return this.PostalCode;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.AddressID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final AddressFullStruct other = (AddressFullStruct) obj;
		
						if (this.AddressID != other.AddressID)
							return false;
					

		return true;
    }

	public void copyDataTo(AddressFullStruct other) {

		other.AddressID = this.AddressID;
	            other.AddressLine1 = this.AddressLine1;
	            other.AddressLine2 = this.AddressLine2;
	            other.City = this.City;
	            other.StateProvince = this.StateProvince;
	            other.CountryRegion = this.CountryRegion;
	            other.PostalCode = this.PostalCode;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(AddressFullStruct other) {

		other.AddressID = this.AddressID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_HARMONIZED.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_HARMONIZED.length == 0) {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_HARMONIZED = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_HARMONIZED, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.AddressID = dis.readInt();
					
					this.AddressLine1 = readString(dis);
					
					this.AddressLine2 = readString(dis);
					
					this.City = readString(dis);
					
					this.StateProvince = readString(dis);
					
					this.CountryRegion = readString(dis);
					
					this.PostalCode = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_HARMONIZED) {

        	try {

        		int length = 0;
		
			        this.AddressID = dis.readInt();
					
					this.AddressLine1 = readString(dis);
					
					this.AddressLine2 = readString(dis);
					
					this.City = readString(dis);
					
					this.StateProvince = readString(dis);
					
					this.CountryRegion = readString(dis);
					
					this.PostalCode = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AddressID);
					
					// String
				
						writeString(this.AddressLine1,dos);
					
					// String
				
						writeString(this.AddressLine2,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.StateProvince,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// String
				
						writeString(this.PostalCode,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AddressID);
					
					// String
				
						writeString(this.AddressLine1,dos);
					
					// String
				
						writeString(this.AddressLine2,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.StateProvince,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// String
				
						writeString(this.PostalCode,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AddressID="+String.valueOf(AddressID));
		sb.append(",AddressLine1="+AddressLine1);
		sb.append(",AddressLine2="+AddressLine2);
		sb.append(",City="+City);
		sb.append(",StateProvince="+StateProvince);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",PostalCode="+PostalCode);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(AddressFullStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AddressID, other.AddressID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tFileInputDelimited_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		AddressFullStruct AddressFull = new AddressFullStruct();




	
	/**
	 * [tFileOutputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_4", false);
		start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"AddressFull");
					}
				
		int tos_count_tFileOutputDelimited_4 = 0;
		

String fileName_tFileOutputDelimited_4 = "";
    fileName_tFileOutputDelimited_4 = (new java.io.File(context.path_harm+"Address.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_4 = null;
    String extension_tFileOutputDelimited_4 = null;
    String directory_tFileOutputDelimited_4 = null;
    if((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        }
        directory_tFileOutputDelimited_4 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_4 = true;
    java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
    globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
            int nb_line_tFileOutputDelimited_4 = 0;
            int splitedFileNo_tFileOutputDelimited_4 = 0;
            int currentRow_tFileOutputDelimited_4 = 0;

            final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
                        if(!dir_tFileOutputDelimited_4.exists()) {
                            dir_tFileOutputDelimited_4.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_4 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
                        if(fileToDelete_tFileOutputDelimited_4.exists()) {
                            fileToDelete_tFileOutputDelimited_4.delete();
                        }
                        outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_4.length()==0){
                                        outtFileOutputDelimited_4.write("AddressID");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("AddressLine1");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("AddressLine2");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("City");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("StateProvince");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("CountryRegion");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("PostalCode");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("rowguid");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("ModifiedDate");
                                        outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

 



/**
 * [tFileOutputDelimited_4 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_13", false);
		start_Hash.put("tFileInputDelimited_13", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_13";

	
		int tos_count_tFileInputDelimited_13 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_13 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_13 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_13 = null;
				int limit_tFileInputDelimited_13 = -1;
				try{
					
						Object filename_tFileInputDelimited_13 = context.pathraw+"Address.csv";
						if(filename_tFileInputDelimited_13 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_13 = 0, random_value_tFileInputDelimited_13 = -1;
			if(footer_value_tFileInputDelimited_13 >0 || random_value_tFileInputDelimited_13 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_13 = new org.talend.fileprocess.FileInputDelimited(context.pathraw+"Address.csv", "ISO-8859-15",";","\n",true,1,0,
									limit_tFileInputDelimited_13
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_13!=null && fid_tFileInputDelimited_13.nextRecord()) {
						rowstate_tFileInputDelimited_13.reset();
						
			    						AddressFull = null;			
												
									boolean whetherReject_tFileInputDelimited_13 = false;
									AddressFull = new AddressFullStruct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_13 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_13 = 0;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    								AddressFull.AddressID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"AddressID", "AddressFull", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_13.setException(new RuntimeException("Value is empty for column : 'AddressID' in 'AddressFull' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_13 = 1;
					
							AddressFull.AddressLine1 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						
				
					columnIndexWithD_tFileInputDelimited_13 = 2;
					
							AddressFull.AddressLine2 = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						
				
					columnIndexWithD_tFileInputDelimited_13 = 3;
					
							AddressFull.City = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						
				
					columnIndexWithD_tFileInputDelimited_13 = 4;
					
							AddressFull.StateProvince = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						
				
					columnIndexWithD_tFileInputDelimited_13 = 5;
					
							AddressFull.CountryRegion = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						
				
					columnIndexWithD_tFileInputDelimited_13 = 6;
					
							AddressFull.PostalCode = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						
				
					columnIndexWithD_tFileInputDelimited_13 = 7;
					
							AddressFull.rowguid = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						
				
					columnIndexWithD_tFileInputDelimited_13 = 8;
					
						temp = fid_tFileInputDelimited_13.get(columnIndexWithD_tFileInputDelimited_13);
						if(temp.length() > 0) {
							
								try {
								
    									AddressFull.ModifiedDate = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",ex_tFileInputDelimited_13.getMessage());
									rowstate_tFileInputDelimited_13.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"ModifiedDate", "AddressFull", temp, ex_tFileInputDelimited_13), ex_tFileInputDelimited_13));
								}
    							
						} else {						
							
								
									AddressFull.ModifiedDate = null;
								
							
						}
					
				
				
										
										if(rowstate_tFileInputDelimited_13.getException()!=null) {
											throw rowstate_tFileInputDelimited_13.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_13_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_13 = true;
			        					
			                					System.err.println(e.getMessage());
			                					AddressFull = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_13 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_13 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_13";

	

 


	tos_count_tFileInputDelimited_13++;

/**
 * [tFileInputDelimited_13 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_13";

	

 



/**
 * [tFileInputDelimited_13 process_data_begin ] stop
 */
// Start of branch "AddressFull"
if(AddressFull != null) { 



	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"AddressFull"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                        sb_tFileOutputDelimited_4.append(
                            AddressFull.AddressID
                        );
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(AddressFull.AddressLine1 != null) {
                        sb_tFileOutputDelimited_4.append(
                            AddressFull.AddressLine1
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(AddressFull.AddressLine2 != null) {
                        sb_tFileOutputDelimited_4.append(
                            AddressFull.AddressLine2
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(AddressFull.City != null) {
                        sb_tFileOutputDelimited_4.append(
                            AddressFull.City
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(AddressFull.StateProvince != null) {
                        sb_tFileOutputDelimited_4.append(
                            AddressFull.StateProvince
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(AddressFull.CountryRegion != null) {
                        sb_tFileOutputDelimited_4.append(
                            AddressFull.CountryRegion
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(AddressFull.PostalCode != null) {
                        sb_tFileOutputDelimited_4.append(
                            AddressFull.PostalCode
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(AddressFull.rowguid != null) {
                        sb_tFileOutputDelimited_4.append(
                            AddressFull.rowguid
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(AddressFull.ModifiedDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            FormatterUtils.format_Date(AddressFull.ModifiedDate, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */

} // End of branch "AddressFull"




	
	/**
	 * [tFileInputDelimited_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_13";

	

 



/**
 * [tFileInputDelimited_13 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_13 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_13";

	



            }
            }finally{
                if(!((Object)(context.pathraw+"Address.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_13!=null){
                		fid_tFileInputDelimited_13.close();
                	}
                }
                if(fid_tFileInputDelimited_13!=null){
                	globalMap.put("tFileInputDelimited_13_NB_LINE", fid_tFileInputDelimited_13.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_13", true);
end_Hash.put("tFileInputDelimited_13", System.currentTimeMillis());




/**
 * [tFileInputDelimited_13 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	



		
			
					if(outtFileOutputDelimited_4!=null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}
				
				globalMap.put("tFileOutputDelimited_4_NB_LINE",nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_4", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"AddressFull");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_4", true);
end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_13 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_13";

	

 



/**
 * [tFileInputDelimited_13 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


		if(resourceMap.get("finish_tFileOutputDelimited_4") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_4");
						if(outtFileOutputDelimited_4!=null) {
							outtFileOutputDelimited_4.flush();
							outtFileOutputDelimited_4.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_13_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final HARMONIZED HARMONIZEDClass = new HARMONIZED();

        int exitCode = HARMONIZEDClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = HARMONIZED.class.getClassLoader().getResourceAsStream("local_project/harmonized_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = HARMONIZED.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("pathraw", "id_String");
                        if(context.getStringValue("pathraw") == null) {
                            context.pathraw = null;
                        } else {
                            context.pathraw=(String) context.getProperty("pathraw");
                        }
                        context.setContextType("path_harm", "id_String");
                        if(context.getStringValue("path_harm") == null) {
                            context.path_harm = null;
                        } else {
                            context.path_harm=(String) context.getProperty("path_harm");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("pathraw")) {
                context.pathraw = (String) parentContextMap.get("pathraw");
            }if (parentContextMap.containsKey("path_harm")) {
                context.path_harm = (String) parentContextMap.get("path_harm");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileInputDelimited_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_1.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_3) {
globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_3.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_10Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_10) {
globalMap.put("tFileInputDelimited_10_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_10.printStackTrace();

}
try {
errorCode = null;tFileInputDelimited_13Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileInputDelimited_13) {
globalMap.put("tFileInputDelimited_13_SUBPROCESS_STATE", -1);

e_tFileInputDelimited_13.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : HARMONIZED");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }














    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     591003 characters generated by Talend Open Studio for Data Integration 
 *     on the 8 de maio de 2022 19:56:37 BRT
 ************************************************************************************************/