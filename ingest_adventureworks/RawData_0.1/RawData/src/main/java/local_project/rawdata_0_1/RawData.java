// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package local_project.rawdata_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: RawData Purpose: <br>
 * Description: Realiza ingest√£o dos dados AdventureWorks. <br>
 * @author user@talend.com
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class RawData implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(path != null){
				
					this.setProperty("path", path.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String path;
public String getPath(){
	return this.path;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "RawData";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				RawData.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(RawData.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
			String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + "sqlservercentralpublic.database.windows.net" ;
		String port_tDBConnection_1 = "1433";
		String dbname_tDBConnection_1 = "AdventureWorks" ;
    	if (!"".equals(port_tDBConnection_1)) {
    		url_tDBConnection_1 += ":" + "1433";
    	}
    	if (!"".equals(dbname_tDBConnection_1)) {
    		
				url_tDBConnection_1 += "//" + "AdventureWorks"; 
    	}

		url_tDBConnection_1 += ";appName=" + projectName + ";" + "useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC";  
	String dbUser_tDBConnection_1 = "sqlfamily";
	
	
		 
	final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:g3BMzqkBMFPCsZkMxYOogNn2rrMQY6WgOcPvaQV6p0jMzRDwKw==");
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_1", "SalesLT");

	globalMap.put("db_tDBConnection_1",  "AdventureWorks");
	
	globalMap.put("shareIdentitySetting_tDBConnection_1",  false);

	globalMap.put("driver_tDBConnection_1", "JTDS");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class AddressStruct implements routines.system.IPersistableRow<AddressStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_RawData = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_RawData = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int AddressID;

				public int getAddressID () {
					return this.AddressID;
				}
				
			    public String AddressLine1;

				public String getAddressLine1 () {
					return this.AddressLine1;
				}
				
			    public String AddressLine2;

				public String getAddressLine2 () {
					return this.AddressLine2;
				}
				
			    public String City;

				public String getCity () {
					return this.City;
				}
				
			    public String StateProvince;

				public String getStateProvince () {
					return this.StateProvince;
				}
				
			    public String CountryRegion;

				public String getCountryRegion () {
					return this.CountryRegion;
				}
				
			    public String PostalCode;

				public String getPostalCode () {
					return this.PostalCode;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.AddressID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final AddressStruct other = (AddressStruct) obj;
		
						if (this.AddressID != other.AddressID)
							return false;
					

		return true;
    }

	public void copyDataTo(AddressStruct other) {

		other.AddressID = this.AddressID;
	            other.AddressLine1 = this.AddressLine1;
	            other.AddressLine2 = this.AddressLine2;
	            other.City = this.City;
	            other.StateProvince = this.StateProvince;
	            other.CountryRegion = this.CountryRegion;
	            other.PostalCode = this.PostalCode;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(AddressStruct other) {

		other.AddressID = this.AddressID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_RawData.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_RawData.length == 0) {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_RawData, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_RawData, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_RawData.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_RawData.length == 0) {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_RawData, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_RawData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_RawData) {

        	try {

        		int length = 0;
		
			        this.AddressID = dis.readInt();
					
					this.AddressLine1 = readString(dis);
					
					this.AddressLine2 = readString(dis);
					
					this.City = readString(dis);
					
					this.StateProvince = readString(dis);
					
					this.CountryRegion = readString(dis);
					
					this.PostalCode = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_RawData) {

        	try {

        		int length = 0;
		
			        this.AddressID = dis.readInt();
					
					this.AddressLine1 = readString(dis);
					
					this.AddressLine2 = readString(dis);
					
					this.City = readString(dis);
					
					this.StateProvince = readString(dis);
					
					this.CountryRegion = readString(dis);
					
					this.PostalCode = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AddressID);
					
					// String
				
						writeString(this.AddressLine1,dos);
					
					// String
				
						writeString(this.AddressLine2,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.StateProvince,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// String
				
						writeString(this.PostalCode,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.AddressID);
					
					// String
				
						writeString(this.AddressLine1,dos);
					
					// String
				
						writeString(this.AddressLine2,dos);
					
					// String
				
						writeString(this.City,dos);
					
					// String
				
						writeString(this.StateProvince,dos);
					
					// String
				
						writeString(this.CountryRegion,dos);
					
					// String
				
						writeString(this.PostalCode,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AddressID="+String.valueOf(AddressID));
		sb.append(",AddressLine1="+AddressLine1);
		sb.append(",AddressLine2="+AddressLine2);
		sb.append(",City="+City);
		sb.append(",StateProvince="+StateProvince);
		sb.append(",CountryRegion="+CountryRegion);
		sb.append(",PostalCode="+PostalCode);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(AddressStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.AddressID, other.AddressID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		AddressStruct Address = new AddressStruct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Address");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.path+"Address.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("AddressID");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("AddressLine1");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("AddressLine2");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("City");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("StateProvince");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("CountryRegion");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("PostalCode");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("rowguid");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ModifiedDate");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_1 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT SalesLT.Address.AddressID,\n		SalesLT.Address.AddressLine1,\n		SalesLT.Address.AddressLine2,\n		SalesLT.Address.Cit"
+"y,\n		SalesLT.Address.StateProvince,\n		SalesLT.Address.CountryRegion,\n		SalesLT.Address.PostalCode,\n		SalesLT.Address.row"
+"guid,\n		SalesLT.Address.ModifiedDate\nFROM	SalesLT.Address";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								Address.AddressID = 0;
							} else {
		                          
            Address.AddressID = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								Address.AddressLine1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		Address.AddressLine1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	Address.AddressLine1 = tmpContent_tDBInput_1;
                }
            } else {
                Address.AddressLine1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								Address.AddressLine2 = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		Address.AddressLine2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	Address.AddressLine2 = tmpContent_tDBInput_1;
                }
            } else {
                Address.AddressLine2 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								Address.City = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		Address.City = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	Address.City = tmpContent_tDBInput_1;
                }
            } else {
                Address.City = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								Address.StateProvince = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(5);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		Address.StateProvince = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	Address.StateProvince = tmpContent_tDBInput_1;
                }
            } else {
                Address.StateProvince = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								Address.CountryRegion = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(6);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		Address.CountryRegion = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	Address.CountryRegion = tmpContent_tDBInput_1;
                }
            } else {
                Address.CountryRegion = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								Address.PostalCode = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(7);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		Address.PostalCode = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	Address.PostalCode = tmpContent_tDBInput_1;
                }
            } else {
                Address.PostalCode = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								Address.rowguid = null;
							} else {
		                          
            Address.rowguid = rs_tDBInput_1.getObject(8);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								Address.ModifiedDate = null;
							} else {
										
			Address.ModifiedDate = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 9);
			
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Address"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                        sb_tFileOutputDelimited_1.append(
                            Address.AddressID
                        );
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Address.AddressLine1 != null) {
                        sb_tFileOutputDelimited_1.append(
                            Address.AddressLine1
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Address.AddressLine2 != null) {
                        sb_tFileOutputDelimited_1.append(
                            Address.AddressLine2
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Address.City != null) {
                        sb_tFileOutputDelimited_1.append(
                            Address.City
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Address.StateProvince != null) {
                        sb_tFileOutputDelimited_1.append(
                            Address.StateProvince
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Address.CountryRegion != null) {
                        sb_tFileOutputDelimited_1.append(
                            Address.CountryRegion
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Address.PostalCode != null) {
                        sb_tFileOutputDelimited_1.append(
                            Address.PostalCode
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Address.rowguid != null) {
                        sb_tFileOutputDelimited_1.append(
                            Address.rowguid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(Address.ModifiedDate != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(Address.ModifiedDate, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Address");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class CustomerStruct implements routines.system.IPersistableRow<CustomerStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_RawData = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_RawData = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public String NameStyle;

				public String getNameStyle () {
					return this.NameStyle;
				}
				
			    public String Title;

				public String getTitle () {
					return this.Title;
				}
				
			    public String FirstName;

				public String getFirstName () {
					return this.FirstName;
				}
				
			    public String MiddleName;

				public String getMiddleName () {
					return this.MiddleName;
				}
				
			    public String LastName;

				public String getLastName () {
					return this.LastName;
				}
				
			    public String Suffix;

				public String getSuffix () {
					return this.Suffix;
				}
				
			    public String CompanyName;

				public String getCompanyName () {
					return this.CompanyName;
				}
				
			    public String SalesPerson;

				public String getSalesPerson () {
					return this.SalesPerson;
				}
				
			    public String EmailAddress;

				public String getEmailAddress () {
					return this.EmailAddress;
				}
				
			    public String Phone;

				public String getPhone () {
					return this.Phone;
				}
				
			    public String PasswordHash;

				public String getPasswordHash () {
					return this.PasswordHash;
				}
				
			    public String PasswordSalt;

				public String getPasswordSalt () {
					return this.PasswordSalt;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.CustomerID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final CustomerStruct other = (CustomerStruct) obj;
		
						if (this.CustomerID != other.CustomerID)
							return false;
					

		return true;
    }

	public void copyDataTo(CustomerStruct other) {

		other.CustomerID = this.CustomerID;
	            other.NameStyle = this.NameStyle;
	            other.Title = this.Title;
	            other.FirstName = this.FirstName;
	            other.MiddleName = this.MiddleName;
	            other.LastName = this.LastName;
	            other.Suffix = this.Suffix;
	            other.CompanyName = this.CompanyName;
	            other.SalesPerson = this.SalesPerson;
	            other.EmailAddress = this.EmailAddress;
	            other.Phone = this.Phone;
	            other.PasswordHash = this.PasswordHash;
	            other.PasswordSalt = this.PasswordSalt;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(CustomerStruct other) {

		other.CustomerID = this.CustomerID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_RawData.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_RawData.length == 0) {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_RawData, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_RawData, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_RawData.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_RawData.length == 0) {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_RawData, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_RawData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_RawData) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
					this.NameStyle = readString(dis);
					
					this.Title = readString(dis);
					
					this.FirstName = readString(dis);
					
					this.MiddleName = readString(dis);
					
					this.LastName = readString(dis);
					
					this.Suffix = readString(dis);
					
					this.CompanyName = readString(dis);
					
					this.SalesPerson = readString(dis);
					
					this.EmailAddress = readString(dis);
					
					this.Phone = readString(dis);
					
					this.PasswordHash = readString(dis);
					
					this.PasswordSalt = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_RawData) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
					this.NameStyle = readString(dis);
					
					this.Title = readString(dis);
					
					this.FirstName = readString(dis);
					
					this.MiddleName = readString(dis);
					
					this.LastName = readString(dis);
					
					this.Suffix = readString(dis);
					
					this.CompanyName = readString(dis);
					
					this.SalesPerson = readString(dis);
					
					this.EmailAddress = readString(dis);
					
					this.Phone = readString(dis);
					
					this.PasswordHash = readString(dis);
					
					this.PasswordSalt = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// String
				
						writeString(this.NameStyle,dos);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.FirstName,dos);
					
					// String
				
						writeString(this.MiddleName,dos);
					
					// String
				
						writeString(this.LastName,dos);
					
					// String
				
						writeString(this.Suffix,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.EmailAddress,dos);
					
					// String
				
						writeString(this.Phone,dos);
					
					// String
				
						writeString(this.PasswordHash,dos);
					
					// String
				
						writeString(this.PasswordSalt,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// String
				
						writeString(this.NameStyle,dos);
					
					// String
				
						writeString(this.Title,dos);
					
					// String
				
						writeString(this.FirstName,dos);
					
					// String
				
						writeString(this.MiddleName,dos);
					
					// String
				
						writeString(this.LastName,dos);
					
					// String
				
						writeString(this.Suffix,dos);
					
					// String
				
						writeString(this.CompanyName,dos);
					
					// String
				
						writeString(this.SalesPerson,dos);
					
					// String
				
						writeString(this.EmailAddress,dos);
					
					// String
				
						writeString(this.Phone,dos);
					
					// String
				
						writeString(this.PasswordHash,dos);
					
					// String
				
						writeString(this.PasswordSalt,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",NameStyle="+NameStyle);
		sb.append(",Title="+Title);
		sb.append(",FirstName="+FirstName);
		sb.append(",MiddleName="+MiddleName);
		sb.append(",LastName="+LastName);
		sb.append(",Suffix="+Suffix);
		sb.append(",CompanyName="+CompanyName);
		sb.append(",SalesPerson="+SalesPerson);
		sb.append(",EmailAddress="+EmailAddress);
		sb.append(",Phone="+Phone);
		sb.append(",PasswordHash="+PasswordHash);
		sb.append(",PasswordSalt="+PasswordSalt);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CustomerStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		CustomerStruct Customer = new CustomerStruct();




	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Customer");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.path+"Customer.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("CustomerID");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("NameStyle");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Title");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("FirstName");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("MiddleName");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("LastName");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Suffix");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("CompanyName");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("SalesPerson");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("EmailAddress");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Phone");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("PasswordHash");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("PasswordSalt");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("rowguid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("ModifiedDate");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2); 
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_2 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT SalesLT.Customer.CustomerID,\n		SalesLT.Customer.NameStyle,\n		SalesLT.Customer.Title,\n		SalesLT.Customer.FirstNam"
+"e,\n		SalesLT.Customer.MiddleName,\n		SalesLT.Customer.LastName,\n		SalesLT.Customer.Suffix,\n		SalesLT.Customer.CompanyName"
+",\n		SalesLT.Customer.SalesPerson,\n		SalesLT.Customer.EmailAddress,\n		SalesLT.Customer.Phone,\n		SalesLT.Customer.Password"
+"Hash,\n		SalesLT.Customer.PasswordSalt,\n		SalesLT.Customer.rowguid,\n		SalesLT.Customer.ModifiedDate\nFROM	SalesLT.Customer"
+"";
		    

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								Customer.CustomerID = 0;
							} else {
		                          
            Customer.CustomerID = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								Customer.NameStyle = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		Customer.NameStyle = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	Customer.NameStyle = tmpContent_tDBInput_2;
                }
            } else {
                Customer.NameStyle = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								Customer.Title = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(3);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		Customer.Title = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	Customer.Title = tmpContent_tDBInput_2;
                }
            } else {
                Customer.Title = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								Customer.FirstName = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(4);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		Customer.FirstName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	Customer.FirstName = tmpContent_tDBInput_2;
                }
            } else {
                Customer.FirstName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								Customer.MiddleName = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(5);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		Customer.MiddleName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	Customer.MiddleName = tmpContent_tDBInput_2;
                }
            } else {
                Customer.MiddleName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								Customer.LastName = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(6);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		Customer.LastName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	Customer.LastName = tmpContent_tDBInput_2;
                }
            } else {
                Customer.LastName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								Customer.Suffix = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(7);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		Customer.Suffix = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	Customer.Suffix = tmpContent_tDBInput_2;
                }
            } else {
                Customer.Suffix = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								Customer.CompanyName = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(8);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		Customer.CompanyName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	Customer.CompanyName = tmpContent_tDBInput_2;
                }
            } else {
                Customer.CompanyName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								Customer.SalesPerson = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(9);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
            		Customer.SalesPerson = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	Customer.SalesPerson = tmpContent_tDBInput_2;
                }
            } else {
                Customer.SalesPerson = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								Customer.EmailAddress = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(10);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
            		Customer.EmailAddress = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	Customer.EmailAddress = tmpContent_tDBInput_2;
                }
            } else {
                Customer.EmailAddress = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								Customer.Phone = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(11);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
            		Customer.Phone = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	Customer.Phone = tmpContent_tDBInput_2;
                }
            } else {
                Customer.Phone = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								Customer.PasswordHash = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(12);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
            		Customer.PasswordHash = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	Customer.PasswordHash = tmpContent_tDBInput_2;
                }
            } else {
                Customer.PasswordHash = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								Customer.PasswordSalt = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(13);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
            		Customer.PasswordSalt = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	Customer.PasswordSalt = tmpContent_tDBInput_2;
                }
            } else {
                Customer.PasswordSalt = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								Customer.rowguid = null;
							} else {
		                          
            Customer.rowguid = rs_tDBInput_2.getObject(14);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								Customer.ModifiedDate = null;
							} else {
										
			Customer.ModifiedDate = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 15);
			
		                    }
					





 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Customer"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                        sb_tFileOutputDelimited_2.append(
                            Customer.CustomerID
                        );
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(Customer.NameStyle != null) {
                        sb_tFileOutputDelimited_2.append(
                            Customer.NameStyle
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(Customer.Title != null) {
                        sb_tFileOutputDelimited_2.append(
                            Customer.Title
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(Customer.FirstName != null) {
                        sb_tFileOutputDelimited_2.append(
                            Customer.FirstName
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(Customer.MiddleName != null) {
                        sb_tFileOutputDelimited_2.append(
                            Customer.MiddleName
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(Customer.LastName != null) {
                        sb_tFileOutputDelimited_2.append(
                            Customer.LastName
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(Customer.Suffix != null) {
                        sb_tFileOutputDelimited_2.append(
                            Customer.Suffix
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(Customer.CompanyName != null) {
                        sb_tFileOutputDelimited_2.append(
                            Customer.CompanyName
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(Customer.SalesPerson != null) {
                        sb_tFileOutputDelimited_2.append(
                            Customer.SalesPerson
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(Customer.EmailAddress != null) {
                        sb_tFileOutputDelimited_2.append(
                            Customer.EmailAddress
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(Customer.Phone != null) {
                        sb_tFileOutputDelimited_2.append(
                            Customer.Phone
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(Customer.PasswordHash != null) {
                        sb_tFileOutputDelimited_2.append(
                            Customer.PasswordHash
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(Customer.PasswordSalt != null) {
                        sb_tFileOutputDelimited_2.append(
                            Customer.PasswordSalt
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(Customer.rowguid != null) {
                        sb_tFileOutputDelimited_2.append(
                            Customer.rowguid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(Customer.ModifiedDate != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(Customer.ModifiedDate, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Customer");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class CustomerAddressStruct implements routines.system.IPersistableRow<CustomerAddressStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_RawData = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_RawData = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public int AddressID;

				public int getAddressID () {
					return this.AddressID;
				}
				
			    public String AddressType;

				public String getAddressType () {
					return this.AddressType;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.CustomerID;
						
							result = prime * result + (int) this.AddressID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final CustomerAddressStruct other = (CustomerAddressStruct) obj;
		
						if (this.CustomerID != other.CustomerID)
							return false;
					
						if (this.AddressID != other.AddressID)
							return false;
					

		return true;
    }

	public void copyDataTo(CustomerAddressStruct other) {

		other.CustomerID = this.CustomerID;
	            other.AddressID = this.AddressID;
	            other.AddressType = this.AddressType;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(CustomerAddressStruct other) {

		other.CustomerID = this.CustomerID;
	            	other.AddressID = this.AddressID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_RawData.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_RawData.length == 0) {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_RawData, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_RawData, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_RawData.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_RawData.length == 0) {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_RawData, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_RawData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_RawData) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
			        this.AddressID = dis.readInt();
					
					this.AddressType = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_RawData) {

        	try {

        		int length = 0;
		
			        this.CustomerID = dis.readInt();
					
			        this.AddressID = dis.readInt();
					
					this.AddressType = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// int
				
		            	dos.writeInt(this.AddressID);
					
					// String
				
						writeString(this.AddressType,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// int
				
		            	dos.writeInt(this.AddressID);
					
					// String
				
						writeString(this.AddressType,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CustomerID="+String.valueOf(CustomerID));
		sb.append(",AddressID="+String.valueOf(AddressID));
		sb.append(",AddressType="+AddressType);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(CustomerAddressStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CustomerID, other.CustomerID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.AddressID, other.AddressID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		CustomerAddressStruct CustomerAddress = new CustomerAddressStruct();




	
	/**
	 * [tFileOutputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_3", false);
		start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"CustomerAddress");
					}
				
		int tos_count_tFileOutputDelimited_3 = 0;
		

String fileName_tFileOutputDelimited_3 = "";
    fileName_tFileOutputDelimited_3 = (new java.io.File(context.path+"CustomerAddress.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_3 = null;
    String extension_tFileOutputDelimited_3 = null;
    String directory_tFileOutputDelimited_3 = null;
    if((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        }
        directory_tFileOutputDelimited_3 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_3 = true;
    java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
    globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
            int nb_line_tFileOutputDelimited_3 = 0;
            int splitedFileNo_tFileOutputDelimited_3 = 0;
            int currentRow_tFileOutputDelimited_3 = 0;

            final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
                        if(!dir_tFileOutputDelimited_3.exists()) {
                            dir_tFileOutputDelimited_3.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_3 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
                        if(fileToDelete_tFileOutputDelimited_3.exists()) {
                            fileToDelete_tFileOutputDelimited_3.delete();
                        }
                        outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_3.length()==0){
                                        outtFileOutputDelimited_3.write("CustomerID");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("AddressID");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("AddressType");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("rowguid");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("ModifiedDate");
                                        outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

 



/**
 * [tFileOutputDelimited_3 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_3  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3); 
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_3 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "SELECT SalesLT.CustomerAddress.CustomerID,\n		SalesLT.CustomerAddress.AddressID,\n		SalesLT.CustomerAddress.AddressType,\n"
+"		SalesLT.CustomerAddress.rowguid,\n		SalesLT.CustomerAddress.ModifiedDate\nFROM	SalesLT.CustomerAddress";
		    

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								CustomerAddress.CustomerID = 0;
							} else {
		                          
            CustomerAddress.CustomerID = rs_tDBInput_3.getInt(1);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								CustomerAddress.AddressID = 0;
							} else {
		                          
            CustomerAddress.AddressID = rs_tDBInput_3.getInt(2);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								CustomerAddress.AddressType = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(3);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		CustomerAddress.AddressType = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	CustomerAddress.AddressType = tmpContent_tDBInput_3;
                }
            } else {
                CustomerAddress.AddressType = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								CustomerAddress.rowguid = null;
							} else {
		                          
            CustomerAddress.rowguid = rs_tDBInput_3.getObject(4);
            if(rs_tDBInput_3.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								CustomerAddress.ModifiedDate = null;
							} else {
										
			CustomerAddress.ModifiedDate = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 5);
			
		                    }
					





 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"CustomerAddress"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
                        sb_tFileOutputDelimited_3.append(
                            CustomerAddress.CustomerID
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                        sb_tFileOutputDelimited_3.append(
                            CustomerAddress.AddressID
                        );
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(CustomerAddress.AddressType != null) {
                        sb_tFileOutputDelimited_3.append(
                            CustomerAddress.AddressType
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(CustomerAddress.rowguid != null) {
                        sb_tFileOutputDelimited_3.append(
                            CustomerAddress.rowguid
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(CustomerAddress.ModifiedDate != null) {
                        sb_tFileOutputDelimited_3.append(
                            FormatterUtils.format_Date(CustomerAddress.ModifiedDate, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);


                    nb_line_tFileOutputDelimited_3++;
                    resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

                        outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());




 


	tos_count_tFileOutputDelimited_3++;

/**
 * [tFileOutputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	



		
			
					if(outtFileOutputDelimited_3!=null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}
				
				globalMap.put("tFileOutputDelimited_3_NB_LINE",nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_3", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"CustomerAddress");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_3", true);
end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	


		if(resourceMap.get("finish_tFileOutputDelimited_3") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_3");
						if(outtFileOutputDelimited_3!=null) {
							outtFileOutputDelimited_3.flush();
							outtFileOutputDelimited_3.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class ProductStruct implements routines.system.IPersistableRow<ProductStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_RawData = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_RawData = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String ProductNumber;

				public String getProductNumber () {
					return this.ProductNumber;
				}
				
			    public String Color;

				public String getColor () {
					return this.Color;
				}
				
			    public Object StandardCost;

				public Object getStandardCost () {
					return this.StandardCost;
				}
				
			    public Object ListPrice;

				public Object getListPrice () {
					return this.ListPrice;
				}
				
			    public String Size;

				public String getSize () {
					return this.Size;
				}
				
			    public BigDecimal Weight;

				public BigDecimal getWeight () {
					return this.Weight;
				}
				
			    public Integer ProductCategoryID;

				public Integer getProductCategoryID () {
					return this.ProductCategoryID;
				}
				
			    public Integer ProductModelID;

				public Integer getProductModelID () {
					return this.ProductModelID;
				}
				
			    public java.util.Date SellStartDate;

				public java.util.Date getSellStartDate () {
					return this.SellStartDate;
				}
				
			    public java.util.Date SellEndDate;

				public java.util.Date getSellEndDate () {
					return this.SellEndDate;
				}
				
			    public java.util.Date DiscontinuedDate;

				public java.util.Date getDiscontinuedDate () {
					return this.DiscontinuedDate;
				}
				
			    public Object ThumbNailPhoto;

				public Object getThumbNailPhoto () {
					return this.ThumbNailPhoto;
				}
				
			    public String ThumbnailPhotoFileName;

				public String getThumbnailPhotoFileName () {
					return this.ThumbnailPhotoFileName;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ProductID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ProductStruct other = (ProductStruct) obj;
		
						if (this.ProductID != other.ProductID)
							return false;
					

		return true;
    }

	public void copyDataTo(ProductStruct other) {

		other.ProductID = this.ProductID;
	            other.Name = this.Name;
	            other.ProductNumber = this.ProductNumber;
	            other.Color = this.Color;
	            other.StandardCost = this.StandardCost;
	            other.ListPrice = this.ListPrice;
	            other.Size = this.Size;
	            other.Weight = this.Weight;
	            other.ProductCategoryID = this.ProductCategoryID;
	            other.ProductModelID = this.ProductModelID;
	            other.SellStartDate = this.SellStartDate;
	            other.SellEndDate = this.SellEndDate;
	            other.DiscontinuedDate = this.DiscontinuedDate;
	            other.ThumbNailPhoto = this.ThumbNailPhoto;
	            other.ThumbnailPhotoFileName = this.ThumbnailPhotoFileName;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(ProductStruct other) {

		other.ProductID = this.ProductID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_RawData.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_RawData.length == 0) {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_RawData, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_RawData, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_RawData.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_RawData.length == 0) {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_RawData, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_RawData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_RawData) {

        	try {

        		int length = 0;
		
			        this.ProductID = dis.readInt();
					
					this.Name = readString(dis);
					
					this.ProductNumber = readString(dis);
					
					this.Color = readString(dis);
					
						this.StandardCost = (Object) dis.readObject();
					
						this.ListPrice = (Object) dis.readObject();
					
					this.Size = readString(dis);
					
						this.Weight = (BigDecimal) dis.readObject();
					
						this.ProductCategoryID = readInteger(dis);
					
						this.ProductModelID = readInteger(dis);
					
					this.SellStartDate = readDate(dis);
					
					this.SellEndDate = readDate(dis);
					
					this.DiscontinuedDate = readDate(dis);
					
						this.ThumbNailPhoto = (Object) dis.readObject();
					
					this.ThumbnailPhotoFileName = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_RawData) {

        	try {

        		int length = 0;
		
			        this.ProductID = dis.readInt();
					
					this.Name = readString(dis);
					
					this.ProductNumber = readString(dis);
					
					this.Color = readString(dis);
					
						this.StandardCost = (Object) dis.readObject();
					
						this.ListPrice = (Object) dis.readObject();
					
					this.Size = readString(dis);
					
						this.Weight = (BigDecimal) dis.readObject();
					
						this.ProductCategoryID = readInteger(dis);
					
						this.ProductModelID = readInteger(dis);
					
					this.SellStartDate = readDate(dis);
					
					this.SellEndDate = readDate(dis);
					
					this.DiscontinuedDate = readDate(dis);
					
						this.ThumbNailPhoto = (Object) dis.readObject();
					
					this.ThumbnailPhotoFileName = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.ProductNumber,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// Object
				
       			    	dos.writeObject(this.StandardCost);
					
					// Object
				
       			    	dos.writeObject(this.ListPrice);
					
					// String
				
						writeString(this.Size,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Weight);
					
					// Integer
				
						writeInteger(this.ProductCategoryID,dos);
					
					// Integer
				
						writeInteger(this.ProductModelID,dos);
					
					// java.util.Date
				
						writeDate(this.SellStartDate,dos);
					
					// java.util.Date
				
						writeDate(this.SellEndDate,dos);
					
					// java.util.Date
				
						writeDate(this.DiscontinuedDate,dos);
					
					// Object
				
       			    	dos.writeObject(this.ThumbNailPhoto);
					
					// String
				
						writeString(this.ThumbnailPhotoFileName,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.ProductNumber,dos);
					
					// String
				
						writeString(this.Color,dos);
					
					// Object
				
       			    	dos.writeObject(this.StandardCost);
					
					// Object
				
       			    	dos.writeObject(this.ListPrice);
					
					// String
				
						writeString(this.Size,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Weight);
					
					// Integer
				
						writeInteger(this.ProductCategoryID,dos);
					
					// Integer
				
						writeInteger(this.ProductModelID,dos);
					
					// java.util.Date
				
						writeDate(this.SellStartDate,dos);
					
					// java.util.Date
				
						writeDate(this.SellEndDate,dos);
					
					// java.util.Date
				
						writeDate(this.DiscontinuedDate,dos);
					
					// Object
				
       			    	dos.writeObject(this.ThumbNailPhoto);
					
					// String
				
						writeString(this.ThumbnailPhotoFileName,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductID="+String.valueOf(ProductID));
		sb.append(",Name="+Name);
		sb.append(",ProductNumber="+ProductNumber);
		sb.append(",Color="+Color);
		sb.append(",StandardCost="+String.valueOf(StandardCost));
		sb.append(",ListPrice="+String.valueOf(ListPrice));
		sb.append(",Size="+Size);
		sb.append(",Weight="+String.valueOf(Weight));
		sb.append(",ProductCategoryID="+String.valueOf(ProductCategoryID));
		sb.append(",ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",SellStartDate="+String.valueOf(SellStartDate));
		sb.append(",SellEndDate="+String.valueOf(SellEndDate));
		sb.append(",DiscontinuedDate="+String.valueOf(DiscontinuedDate));
		sb.append(",ThumbNailPhoto="+String.valueOf(ThumbNailPhoto));
		sb.append(",ThumbnailPhotoFileName="+ThumbnailPhotoFileName);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ProductStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductID, other.ProductID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		ProductStruct Product = new ProductStruct();




	
	/**
	 * [tFileOutputDelimited_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_4", false);
		start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Product");
					}
				
		int tos_count_tFileOutputDelimited_4 = 0;
		

String fileName_tFileOutputDelimited_4 = "";
    fileName_tFileOutputDelimited_4 = (new java.io.File(context.path+"Product.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_4 = null;
    String extension_tFileOutputDelimited_4 = null;
    String directory_tFileOutputDelimited_4 = null;
    if((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0, fileName_tFileOutputDelimited_4.lastIndexOf("."));
            extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
            extension_tFileOutputDelimited_4 = "";
        }
        directory_tFileOutputDelimited_4 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_4 = true;
    java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
    globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
            int nb_line_tFileOutputDelimited_4 = 0;
            int splitedFileNo_tFileOutputDelimited_4 = 0;
            int currentRow_tFileOutputDelimited_4 = 0;

            final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
                        if(!dir_tFileOutputDelimited_4.exists()) {
                            dir_tFileOutputDelimited_4.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_4 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
                        if(fileToDelete_tFileOutputDelimited_4.exists()) {
                            fileToDelete_tFileOutputDelimited_4.delete();
                        }
                        outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_4.length()==0){
                                        outtFileOutputDelimited_4.write("ProductID");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("Name");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("ProductNumber");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("Color");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("StandardCost");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("ListPrice");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("Size");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("Weight");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("ProductCategoryID");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("ProductModelID");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("SellStartDate");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("SellEndDate");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("DiscontinuedDate");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("ThumbNailPhoto");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("ThumbnailPhotoFileName");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("rowguid");
                                            outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.write("ModifiedDate");
                                        outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
                                        outtFileOutputDelimited_4.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

 



/**
 * [tFileOutputDelimited_4 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_4  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4); 
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_4 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT SalesLT.Product.ProductID,\n		SalesLT.Product.Name,\n		SalesLT.Product.ProductNumber,\n		SalesLT.Product.Color,\n		S"
+"alesLT.Product.StandardCost,\n		SalesLT.Product.ListPrice,\n		SalesLT.Product.Size,\n		SalesLT.Product.Weight,\n		SalesLT.Pr"
+"oduct.ProductCategoryID,\n		SalesLT.Product.ProductModelID,\n		SalesLT.Product.SellStartDate,\n		SalesLT.Product.SellEndDat"
+"e,\n		SalesLT.Product.DiscontinuedDate,\n		SalesLT.Product.ThumbNailPhoto,\n		SalesLT.Product.ThumbnailPhotoFileName,\n		Sal"
+"esLT.Product.rowguid,\n		SalesLT.Product.ModifiedDate\nFROM	SalesLT.Product";
		    

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								Product.ProductID = 0;
							} else {
		                          
            Product.ProductID = rs_tDBInput_4.getInt(1);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								Product.Name = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(2);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		Product.Name = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	Product.Name = tmpContent_tDBInput_4;
                }
            } else {
                Product.Name = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								Product.ProductNumber = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(3);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		Product.ProductNumber = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	Product.ProductNumber = tmpContent_tDBInput_4;
                }
            } else {
                Product.ProductNumber = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								Product.Color = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(4);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		Product.Color = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	Product.Color = tmpContent_tDBInput_4;
                }
            } else {
                Product.Color = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								Product.StandardCost = null;
							} else {
		                          
            Product.StandardCost = rs_tDBInput_4.getObject(5);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 6) {
								Product.ListPrice = null;
							} else {
		                          
            Product.ListPrice = rs_tDBInput_4.getObject(6);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 7) {
								Product.Size = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(7);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		Product.Size = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	Product.Size = tmpContent_tDBInput_4;
                }
            } else {
                Product.Size = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 8) {
								Product.Weight = null;
							} else {
		                          
            Product.Weight = rs_tDBInput_4.getBigDecimal(8);
            if(rs_tDBInput_4.wasNull()){
                    Product.Weight = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 9) {
								Product.ProductCategoryID = null;
							} else {
		                          
            Product.ProductCategoryID = rs_tDBInput_4.getInt(9);
            if(rs_tDBInput_4.wasNull()){
                    Product.ProductCategoryID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 10) {
								Product.ProductModelID = null;
							} else {
		                          
            Product.ProductModelID = rs_tDBInput_4.getInt(10);
            if(rs_tDBInput_4.wasNull()){
                    Product.ProductModelID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 11) {
								Product.SellStartDate = null;
							} else {
										
			Product.SellStartDate = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 11);
			
		                    }
							if(colQtyInRs_tDBInput_4 < 12) {
								Product.SellEndDate = null;
							} else {
										
			Product.SellEndDate = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 12);
			
		                    }
							if(colQtyInRs_tDBInput_4 < 13) {
								Product.DiscontinuedDate = null;
							} else {
										
			Product.DiscontinuedDate = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 13);
			
		                    }
							if(colQtyInRs_tDBInput_4 < 14) {
								Product.ThumbNailPhoto = null;
							} else {
		                          
            Product.ThumbNailPhoto = rs_tDBInput_4.getObject(14);
            if(rs_tDBInput_4.wasNull()){
                    Product.ThumbNailPhoto = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 15) {
								Product.ThumbnailPhotoFileName = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(15);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
            		Product.ThumbnailPhotoFileName = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	Product.ThumbnailPhotoFileName = tmpContent_tDBInput_4;
                }
            } else {
                Product.ThumbnailPhotoFileName = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 16) {
								Product.rowguid = null;
							} else {
		                          
            Product.rowguid = rs_tDBInput_4.getObject(16);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 17) {
								Product.ModifiedDate = null;
							} else {
										
			Product.ModifiedDate = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 17);
			
		                    }
					





 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Product"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
                        sb_tFileOutputDelimited_4.append(
                            Product.ProductID
                        );
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(Product.Name != null) {
                        sb_tFileOutputDelimited_4.append(
                            Product.Name
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(Product.ProductNumber != null) {
                        sb_tFileOutputDelimited_4.append(
                            Product.ProductNumber
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(Product.Color != null) {
                        sb_tFileOutputDelimited_4.append(
                            Product.Color
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(Product.StandardCost != null) {
                        sb_tFileOutputDelimited_4.append(
                            Product.StandardCost
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(Product.ListPrice != null) {
                        sb_tFileOutputDelimited_4.append(
                            Product.ListPrice
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(Product.Size != null) {
                        sb_tFileOutputDelimited_4.append(
                            Product.Size
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(Product.Weight != null) {
                        sb_tFileOutputDelimited_4.append(
                            Product.Weight.setScale(2, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(Product.ProductCategoryID != null) {
                        sb_tFileOutputDelimited_4.append(
                            Product.ProductCategoryID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(Product.ProductModelID != null) {
                        sb_tFileOutputDelimited_4.append(
                            Product.ProductModelID
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(Product.SellStartDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            FormatterUtils.format_Date(Product.SellStartDate, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(Product.SellEndDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            FormatterUtils.format_Date(Product.SellEndDate, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(Product.DiscontinuedDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            FormatterUtils.format_Date(Product.DiscontinuedDate, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(Product.ThumbNailPhoto != null) {
                        sb_tFileOutputDelimited_4.append(
                            Product.ThumbNailPhoto
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(Product.ThumbnailPhotoFileName != null) {
                        sb_tFileOutputDelimited_4.append(
                            Product.ThumbnailPhotoFileName
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(Product.rowguid != null) {
                        sb_tFileOutputDelimited_4.append(
                            Product.rowguid
                        );
                            }
                            sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
                            if(Product.ModifiedDate != null) {
                        sb_tFileOutputDelimited_4.append(
                            FormatterUtils.format_Date(Product.ModifiedDate, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);


                    nb_line_tFileOutputDelimited_4++;
                    resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

                        outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());




 


	tos_count_tFileOutputDelimited_4++;

/**
 * [tFileOutputDelimited_4 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	

 



/**
 * [tFileOutputDelimited_4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	



		
			
					if(outtFileOutputDelimited_4!=null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}
				
				globalMap.put("tFileOutputDelimited_4_NB_LINE",nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME",fileName_tFileOutputDelimited_4);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_4", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Product");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_4", true);
end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_4";

	


		if(resourceMap.get("finish_tFileOutputDelimited_4") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_4");
						if(outtFileOutputDelimited_4!=null) {
							outtFileOutputDelimited_4.flush();
							outtFileOutputDelimited_4.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class ProductCategoryStruct implements routines.system.IPersistableRow<ProductCategoryStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_RawData = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_RawData = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ProductCategoryID;

				public int getProductCategoryID () {
					return this.ProductCategoryID;
				}
				
			    public Integer ParentProductCategoryID;

				public Integer getParentProductCategoryID () {
					return this.ParentProductCategoryID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ProductCategoryID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ProductCategoryStruct other = (ProductCategoryStruct) obj;
		
						if (this.ProductCategoryID != other.ProductCategoryID)
							return false;
					

		return true;
    }

	public void copyDataTo(ProductCategoryStruct other) {

		other.ProductCategoryID = this.ProductCategoryID;
	            other.ParentProductCategoryID = this.ParentProductCategoryID;
	            other.Name = this.Name;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(ProductCategoryStruct other) {

		other.ProductCategoryID = this.ProductCategoryID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_RawData.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_RawData.length == 0) {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_RawData, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_RawData, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_RawData.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_RawData.length == 0) {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_RawData, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_RawData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_RawData) {

        	try {

        		int length = 0;
		
			        this.ProductCategoryID = dis.readInt();
					
						this.ParentProductCategoryID = readInteger(dis);
					
					this.Name = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_RawData) {

        	try {

        		int length = 0;
		
			        this.ProductCategoryID = dis.readInt();
					
						this.ParentProductCategoryID = readInteger(dis);
					
					this.Name = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductCategoryID);
					
					// Integer
				
						writeInteger(this.ParentProductCategoryID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductCategoryID);
					
					// Integer
				
						writeInteger(this.ParentProductCategoryID,dos);
					
					// String
				
						writeString(this.Name,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductCategoryID="+String.valueOf(ProductCategoryID));
		sb.append(",ParentProductCategoryID="+String.valueOf(ParentProductCategoryID));
		sb.append(",Name="+Name);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ProductCategoryStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductCategoryID, other.ProductCategoryID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		ProductCategoryStruct ProductCategory = new ProductCategoryStruct();




	
	/**
	 * [tFileOutputDelimited_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_12", false);
		start_Hash.put("tFileOutputDelimited_12", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ProductCategory");
					}
				
		int tos_count_tFileOutputDelimited_12 = 0;
		

String fileName_tFileOutputDelimited_12 = "";
    fileName_tFileOutputDelimited_12 = (new java.io.File(context.path+"ProductCategory.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_12 = null;
    String extension_tFileOutputDelimited_12 = null;
    String directory_tFileOutputDelimited_12 = null;
    if((fileName_tFileOutputDelimited_12.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_12.lastIndexOf(".") < fileName_tFileOutputDelimited_12.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
            extension_tFileOutputDelimited_12 = "";
        } else {
            fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(0, fileName_tFileOutputDelimited_12.lastIndexOf("."));
            extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(fileName_tFileOutputDelimited_12.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(0, fileName_tFileOutputDelimited_12.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_12.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(0, fileName_tFileOutputDelimited_12.lastIndexOf("."));
            extension_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12.substring(fileName_tFileOutputDelimited_12.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_12 = fileName_tFileOutputDelimited_12;
            extension_tFileOutputDelimited_12 = "";
        }
        directory_tFileOutputDelimited_12 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_12 = true;
    java.io.File filetFileOutputDelimited_12 = new java.io.File(fileName_tFileOutputDelimited_12);
    globalMap.put("tFileOutputDelimited_12_FILE_NAME",fileName_tFileOutputDelimited_12);
            int nb_line_tFileOutputDelimited_12 = 0;
            int splitedFileNo_tFileOutputDelimited_12 = 0;
            int currentRow_tFileOutputDelimited_12 = 0;

            final String OUT_DELIM_tFileOutputDelimited_12 = /** Start field tFileOutputDelimited_12:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_12:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_12 = /** Start field tFileOutputDelimited_12:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_12:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_12 != null && directory_tFileOutputDelimited_12.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_12 = new java.io.File(directory_tFileOutputDelimited_12);
                        if(!dir_tFileOutputDelimited_12.exists()) {
                            dir_tFileOutputDelimited_12.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_12 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_12 = new java.io.File(fileName_tFileOutputDelimited_12);
                        if(fileToDelete_tFileOutputDelimited_12.exists()) {
                            fileToDelete_tFileOutputDelimited_12.delete();
                        }
                        outtFileOutputDelimited_12 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_12, false),"ISO-8859-15"));


        resourceMap.put("out_tFileOutputDelimited_12", outtFileOutputDelimited_12);
resourceMap.put("nb_line_tFileOutputDelimited_12", nb_line_tFileOutputDelimited_12);

 



/**
 * [tFileOutputDelimited_12 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_5  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5); 
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				conn_tDBInput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_5 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT SalesLT.ProductCategory.ProductCategoryID,\n		SalesLT.ProductCategory.ParentProductCategoryID,\n		SalesLT.ProductC"
+"ategory.Name,\n		SalesLT.ProductCategory.rowguid,\n		SalesLT.ProductCategory.ModifiedDate\nFROM	SalesLT.ProductCategory";
		    

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								ProductCategory.ProductCategoryID = 0;
							} else {
		                          
            ProductCategory.ProductCategoryID = rs_tDBInput_5.getInt(1);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								ProductCategory.ParentProductCategoryID = null;
							} else {
		                          
            ProductCategory.ParentProductCategoryID = rs_tDBInput_5.getInt(2);
            if(rs_tDBInput_5.wasNull()){
                    ProductCategory.ParentProductCategoryID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								ProductCategory.Name = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(3);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		ProductCategory.Name = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	ProductCategory.Name = tmpContent_tDBInput_5;
                }
            } else {
                ProductCategory.Name = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								ProductCategory.rowguid = null;
							} else {
		                          
            ProductCategory.rowguid = rs_tDBInput_5.getObject(4);
            if(rs_tDBInput_5.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 5) {
								ProductCategory.ModifiedDate = null;
							} else {
										
			ProductCategory.ModifiedDate = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 5);
			
		                    }
					





 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_12 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ProductCategory"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_12 = new StringBuilder();
                        sb_tFileOutputDelimited_12.append(
                            ProductCategory.ProductCategoryID
                        );
                            sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
                            if(ProductCategory.ParentProductCategoryID != null) {
                        sb_tFileOutputDelimited_12.append(
                            ProductCategory.ParentProductCategoryID
                        );
                            }
                            sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
                            if(ProductCategory.Name != null) {
                        sb_tFileOutputDelimited_12.append(
                            ProductCategory.Name
                        );
                            }
                            sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
                            if(ProductCategory.rowguid != null) {
                        sb_tFileOutputDelimited_12.append(
                            ProductCategory.rowguid
                        );
                            }
                            sb_tFileOutputDelimited_12.append(OUT_DELIM_tFileOutputDelimited_12);
                            if(ProductCategory.ModifiedDate != null) {
                        sb_tFileOutputDelimited_12.append(
                            FormatterUtils.format_Date(ProductCategory.ModifiedDate, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_12.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_12);


                    nb_line_tFileOutputDelimited_12++;
                    resourceMap.put("nb_line_tFileOutputDelimited_12", nb_line_tFileOutputDelimited_12);

                        outtFileOutputDelimited_12.write(sb_tFileOutputDelimited_12.toString());




 


	tos_count_tFileOutputDelimited_12++;

/**
 * [tFileOutputDelimited_12 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_12";

	

 



/**
 * [tFileOutputDelimited_12 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_12";

	

 



/**
 * [tFileOutputDelimited_12 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_12 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_12";

	



		
			
					if(outtFileOutputDelimited_12!=null) {
						outtFileOutputDelimited_12.flush();
						outtFileOutputDelimited_12.close();
					}
				
				globalMap.put("tFileOutputDelimited_12_NB_LINE",nb_line_tFileOutputDelimited_12);
				globalMap.put("tFileOutputDelimited_12_FILE_NAME",fileName_tFileOutputDelimited_12);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_12", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ProductCategory");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_12", true);
end_Hash.put("tFileOutputDelimited_12", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_12 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_12 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_12";

	


		if(resourceMap.get("finish_tFileOutputDelimited_12") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_12 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_12");
						if(outtFileOutputDelimited_12!=null) {
							outtFileOutputDelimited_12.flush();
							outtFileOutputDelimited_12.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_12 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class ProductDescriptionStruct implements routines.system.IPersistableRow<ProductDescriptionStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_RawData = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_RawData = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ProductDescriptionID;

				public int getProductDescriptionID () {
					return this.ProductDescriptionID;
				}
				
			    public String Description;

				public String getDescription () {
					return this.Description;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ProductDescriptionID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ProductDescriptionStruct other = (ProductDescriptionStruct) obj;
		
						if (this.ProductDescriptionID != other.ProductDescriptionID)
							return false;
					

		return true;
    }

	public void copyDataTo(ProductDescriptionStruct other) {

		other.ProductDescriptionID = this.ProductDescriptionID;
	            other.Description = this.Description;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(ProductDescriptionStruct other) {

		other.ProductDescriptionID = this.ProductDescriptionID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_RawData.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_RawData.length == 0) {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_RawData, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_RawData, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_RawData.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_RawData.length == 0) {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_RawData, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_RawData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_RawData) {

        	try {

        		int length = 0;
		
			        this.ProductDescriptionID = dis.readInt();
					
					this.Description = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_RawData) {

        	try {

        		int length = 0;
		
			        this.ProductDescriptionID = dis.readInt();
					
					this.Description = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductDescriptionID);
					
					// String
				
						writeString(this.Description,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductDescriptionID);
					
					// String
				
						writeString(this.Description,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductDescriptionID="+String.valueOf(ProductDescriptionID));
		sb.append(",Description="+Description);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ProductDescriptionStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductDescriptionID, other.ProductDescriptionID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		ProductDescriptionStruct ProductDescription = new ProductDescriptionStruct();




	
	/**
	 * [tFileOutputDelimited_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_6", false);
		start_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ProductDescription");
					}
				
		int tos_count_tFileOutputDelimited_6 = 0;
		

String fileName_tFileOutputDelimited_6 = "";
    fileName_tFileOutputDelimited_6 = (new java.io.File(context.path+"ProductDescription.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_6 = null;
    String extension_tFileOutputDelimited_6 = null;
    String directory_tFileOutputDelimited_6 = null;
    if((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
            extension_tFileOutputDelimited_6 = "";
        } else {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0, fileName_tFileOutputDelimited_6.lastIndexOf("."));
            extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0, fileName_tFileOutputDelimited_6.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0, fileName_tFileOutputDelimited_6.lastIndexOf("."));
            extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
            extension_tFileOutputDelimited_6 = "";
        }
        directory_tFileOutputDelimited_6 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_6 = true;
    java.io.File filetFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
    globalMap.put("tFileOutputDelimited_6_FILE_NAME",fileName_tFileOutputDelimited_6);
            int nb_line_tFileOutputDelimited_6 = 0;
            int splitedFileNo_tFileOutputDelimited_6 = 0;
            int currentRow_tFileOutputDelimited_6 = 0;

            final String OUT_DELIM_tFileOutputDelimited_6 = /** Start field tFileOutputDelimited_6:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_6:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_6 = /** Start field tFileOutputDelimited_6:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_6:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_6 != null && directory_tFileOutputDelimited_6.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_6 = new java.io.File(directory_tFileOutputDelimited_6);
                        if(!dir_tFileOutputDelimited_6.exists()) {
                            dir_tFileOutputDelimited_6.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_6 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
                        if(fileToDelete_tFileOutputDelimited_6.exists()) {
                            fileToDelete_tFileOutputDelimited_6.delete();
                        }
                        outtFileOutputDelimited_6 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_6, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_6.length()==0){
                                        outtFileOutputDelimited_6.write("ProductDescriptionID");
                                            outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
                                        outtFileOutputDelimited_6.write("Description");
                                            outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
                                        outtFileOutputDelimited_6.write("rowguid");
                                            outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
                                        outtFileOutputDelimited_6.write("ModifiedDate");
                                        outtFileOutputDelimited_6.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);
                                        outtFileOutputDelimited_6.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_6", outtFileOutputDelimited_6);
resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

 



/**
 * [tFileOutputDelimited_6 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_6 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_6 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_6  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_6, talendToDBArray_tDBInput_6); 
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				conn_tDBInput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_6 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "SELECT SalesLT.ProductDescription.ProductDescriptionID,\n		SalesLT.ProductDescription.Description,\n		SalesLT.ProductDesc"
+"ription.rowguid,\n		SalesLT.ProductDescription.ModifiedDate\nFROM	SalesLT.ProductDescription";
		    

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								ProductDescription.ProductDescriptionID = 0;
							} else {
		                          
            ProductDescription.ProductDescriptionID = rs_tDBInput_6.getInt(1);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								ProductDescription.Description = null;
							} else {
	                         		
           		tmpContent_tDBInput_6 = rs_tDBInput_6.getString(2);
            if(tmpContent_tDBInput_6 != null) {
            	if (talendToDBList_tDBInput_6 .contains(rsmd_tDBInput_6.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		ProductDescription.Description = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
            	} else {
                	ProductDescription.Description = tmpContent_tDBInput_6;
                }
            } else {
                ProductDescription.Description = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								ProductDescription.rowguid = null;
							} else {
		                          
            ProductDescription.rowguid = rs_tDBInput_6.getObject(3);
            if(rs_tDBInput_6.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								ProductDescription.ModifiedDate = null;
							} else {
										
			ProductDescription.ModifiedDate = mssqlGTU_tDBInput_6.getDate(rsmd_tDBInput_6, rs_tDBInput_6, 4);
			
		                    }
					





 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_6 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ProductDescription"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_6 = new StringBuilder();
                        sb_tFileOutputDelimited_6.append(
                            ProductDescription.ProductDescriptionID
                        );
                            sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
                            if(ProductDescription.Description != null) {
                        sb_tFileOutputDelimited_6.append(
                            ProductDescription.Description
                        );
                            }
                            sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
                            if(ProductDescription.rowguid != null) {
                        sb_tFileOutputDelimited_6.append(
                            ProductDescription.rowguid
                        );
                            }
                            sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
                            if(ProductDescription.ModifiedDate != null) {
                        sb_tFileOutputDelimited_6.append(
                            FormatterUtils.format_Date(ProductDescription.ModifiedDate, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_6.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);


                    nb_line_tFileOutputDelimited_6++;
                    resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

                        outtFileOutputDelimited_6.write(sb_tFileOutputDelimited_6.toString());




 


	tos_count_tFileOutputDelimited_6++;

/**
 * [tFileOutputDelimited_6 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	

 



/**
 * [tFileOutputDelimited_6 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	

 



/**
 * [tFileOutputDelimited_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);

 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_6 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	



		
			
					if(outtFileOutputDelimited_6!=null) {
						outtFileOutputDelimited_6.flush();
						outtFileOutputDelimited_6.close();
					}
				
				globalMap.put("tFileOutputDelimited_6_NB_LINE",nb_line_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME",fileName_tFileOutputDelimited_6);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_6", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ProductDescription");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_6", true);
end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_6 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_6";

	


		if(resourceMap.get("finish_tFileOutputDelimited_6") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_6 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_6");
						if(outtFileOutputDelimited_6!=null) {
							outtFileOutputDelimited_6.flush();
							outtFileOutputDelimited_6.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class ProductModelStruct implements routines.system.IPersistableRow<ProductModelStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_RawData = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_RawData = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ProductModelID;

				public int getProductModelID () {
					return this.ProductModelID;
				}
				
			    public String Name;

				public String getName () {
					return this.Name;
				}
				
			    public String CatalogDescription;

				public String getCatalogDescription () {
					return this.CatalogDescription;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ProductModelID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ProductModelStruct other = (ProductModelStruct) obj;
		
						if (this.ProductModelID != other.ProductModelID)
							return false;
					

		return true;
    }

	public void copyDataTo(ProductModelStruct other) {

		other.ProductModelID = this.ProductModelID;
	            other.Name = this.Name;
	            other.CatalogDescription = this.CatalogDescription;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(ProductModelStruct other) {

		other.ProductModelID = this.ProductModelID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_RawData.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_RawData.length == 0) {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_RawData, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_RawData, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_RawData.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_RawData.length == 0) {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_RawData, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_RawData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_RawData) {

        	try {

        		int length = 0;
		
			        this.ProductModelID = dis.readInt();
					
					this.Name = readString(dis);
					
					this.CatalogDescription = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_RawData) {

        	try {

        		int length = 0;
		
			        this.ProductModelID = dis.readInt();
					
					this.Name = readString(dis);
					
					this.CatalogDescription = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductModelID);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.CatalogDescription,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductModelID);
					
					// String
				
						writeString(this.Name,dos);
					
					// String
				
						writeString(this.CatalogDescription,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",Name="+Name);
		sb.append(",CatalogDescription="+CatalogDescription);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ProductModelStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductModelID, other.ProductModelID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		ProductModelStruct ProductModel = new ProductModelStruct();




	
	/**
	 * [tFileOutputDelimited_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_7", false);
		start_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ProductModel");
					}
				
		int tos_count_tFileOutputDelimited_7 = 0;
		

String fileName_tFileOutputDelimited_7 = "";
    fileName_tFileOutputDelimited_7 = (new java.io.File(context.path+"ProductModel.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_7 = null;
    String extension_tFileOutputDelimited_7 = null;
    String directory_tFileOutputDelimited_7 = null;
    if((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
            extension_tFileOutputDelimited_7 = "";
        } else {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0, fileName_tFileOutputDelimited_7.lastIndexOf("."));
            extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0, fileName_tFileOutputDelimited_7.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0, fileName_tFileOutputDelimited_7.lastIndexOf("."));
            extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
            extension_tFileOutputDelimited_7 = "";
        }
        directory_tFileOutputDelimited_7 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_7 = true;
    java.io.File filetFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
    globalMap.put("tFileOutputDelimited_7_FILE_NAME",fileName_tFileOutputDelimited_7);
            int nb_line_tFileOutputDelimited_7 = 0;
            int splitedFileNo_tFileOutputDelimited_7 = 0;
            int currentRow_tFileOutputDelimited_7 = 0;

            final String OUT_DELIM_tFileOutputDelimited_7 = /** Start field tFileOutputDelimited_7:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_7:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_7 = /** Start field tFileOutputDelimited_7:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_7:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_7 != null && directory_tFileOutputDelimited_7.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_7 = new java.io.File(directory_tFileOutputDelimited_7);
                        if(!dir_tFileOutputDelimited_7.exists()) {
                            dir_tFileOutputDelimited_7.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_7 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
                        if(fileToDelete_tFileOutputDelimited_7.exists()) {
                            fileToDelete_tFileOutputDelimited_7.delete();
                        }
                        outtFileOutputDelimited_7 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_7, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_7.length()==0){
                                        outtFileOutputDelimited_7.write("ProductModelID");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("Name");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("CatalogDescription");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("rowguid");
                                            outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.write("ModifiedDate");
                                        outtFileOutputDelimited_7.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);
                                        outtFileOutputDelimited_7.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_7", outtFileOutputDelimited_7);
resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);

 



/**
 * [tFileOutputDelimited_7 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_7 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_7 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_7  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_7, talendToDBArray_tDBInput_7); 
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				conn_tDBInput_7 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_7 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "SELECT SalesLT.ProductModel.ProductModelID,\n		SalesLT.ProductModel.Name,\n		SalesLT.ProductModel.CatalogDescription,\n		S"
+"alesLT.ProductModel.rowguid,\n		SalesLT.ProductModel.ModifiedDate\nFROM	SalesLT.ProductModel";
		    

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								ProductModel.ProductModelID = 0;
							} else {
		                          
            ProductModel.ProductModelID = rs_tDBInput_7.getInt(1);
            if(rs_tDBInput_7.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								ProductModel.Name = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(2);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		ProductModel.Name = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	ProductModel.Name = tmpContent_tDBInput_7;
                }
            } else {
                ProductModel.Name = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 3) {
								ProductModel.CatalogDescription = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(3);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		ProductModel.CatalogDescription = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	ProductModel.CatalogDescription = tmpContent_tDBInput_7;
                }
            } else {
                ProductModel.CatalogDescription = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 4) {
								ProductModel.rowguid = null;
							} else {
		                          
            ProductModel.rowguid = rs_tDBInput_7.getObject(4);
            if(rs_tDBInput_7.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 5) {
								ProductModel.ModifiedDate = null;
							} else {
										
			ProductModel.ModifiedDate = mssqlGTU_tDBInput_7.getDate(rsmd_tDBInput_7, rs_tDBInput_7, 5);
			
		                    }
					





 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_7 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ProductModel"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_7 = new StringBuilder();
                        sb_tFileOutputDelimited_7.append(
                            ProductModel.ProductModelID
                        );
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(ProductModel.Name != null) {
                        sb_tFileOutputDelimited_7.append(
                            ProductModel.Name
                        );
                            }
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(ProductModel.CatalogDescription != null) {
                        sb_tFileOutputDelimited_7.append(
                            ProductModel.CatalogDescription
                        );
                            }
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(ProductModel.rowguid != null) {
                        sb_tFileOutputDelimited_7.append(
                            ProductModel.rowguid
                        );
                            }
                            sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
                            if(ProductModel.ModifiedDate != null) {
                        sb_tFileOutputDelimited_7.append(
                            FormatterUtils.format_Date(ProductModel.ModifiedDate, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_7.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);


                    nb_line_tFileOutputDelimited_7++;
                    resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);

                        outtFileOutputDelimited_7.write(sb_tFileOutputDelimited_7.toString());




 


	tos_count_tFileOutputDelimited_7++;

/**
 * [tFileOutputDelimited_7 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	

 



/**
 * [tFileOutputDelimited_7 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	

 



/**
 * [tFileOutputDelimited_7 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);

 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_7 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	



		
			
					if(outtFileOutputDelimited_7!=null) {
						outtFileOutputDelimited_7.flush();
						outtFileOutputDelimited_7.close();
					}
				
				globalMap.put("tFileOutputDelimited_7_NB_LINE",nb_line_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME",fileName_tFileOutputDelimited_7);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_7", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ProductModel");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_7", true);
end_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_7 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_7";

	


		if(resourceMap.get("finish_tFileOutputDelimited_7") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_7 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_7");
						if(outtFileOutputDelimited_7!=null) {
							outtFileOutputDelimited_7.flush();
							outtFileOutputDelimited_7.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class ProdModProdDescStruct implements routines.system.IPersistableRow<ProdModProdDescStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_RawData = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_RawData = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int ProductModelID;

				public int getProductModelID () {
					return this.ProductModelID;
				}
				
			    public int ProductDescriptionID;

				public int getProductDescriptionID () {
					return this.ProductDescriptionID;
				}
				
			    public String Culture;

				public String getCulture () {
					return this.Culture;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.ProductModelID;
						
							result = prime * result + (int) this.ProductDescriptionID;
						
						result = prime * result + ((this.Culture == null) ? 0 : this.Culture.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final ProdModProdDescStruct other = (ProdModProdDescStruct) obj;
		
						if (this.ProductModelID != other.ProductModelID)
							return false;
					
						if (this.ProductDescriptionID != other.ProductDescriptionID)
							return false;
					
						if (this.Culture == null) {
							if (other.Culture != null)
								return false;
						
						} else if (!this.Culture.equals(other.Culture))
						
							return false;
					

		return true;
    }

	public void copyDataTo(ProdModProdDescStruct other) {

		other.ProductModelID = this.ProductModelID;
	            other.ProductDescriptionID = this.ProductDescriptionID;
	            other.Culture = this.Culture;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(ProdModProdDescStruct other) {

		other.ProductModelID = this.ProductModelID;
	            	other.ProductDescriptionID = this.ProductDescriptionID;
	            	other.Culture = this.Culture;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_RawData.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_RawData.length == 0) {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_RawData, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_RawData, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_RawData.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_RawData.length == 0) {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_RawData, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_RawData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_RawData) {

        	try {

        		int length = 0;
		
			        this.ProductModelID = dis.readInt();
					
			        this.ProductDescriptionID = dis.readInt();
					
					this.Culture = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_RawData) {

        	try {

        		int length = 0;
		
			        this.ProductModelID = dis.readInt();
					
			        this.ProductDescriptionID = dis.readInt();
					
					this.Culture = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductModelID);
					
					// int
				
		            	dos.writeInt(this.ProductDescriptionID);
					
					// String
				
						writeString(this.Culture,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ProductModelID);
					
					// int
				
		            	dos.writeInt(this.ProductDescriptionID);
					
					// String
				
						writeString(this.Culture,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ProductModelID="+String.valueOf(ProductModelID));
		sb.append(",ProductDescriptionID="+String.valueOf(ProductDescriptionID));
		sb.append(",Culture="+Culture);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(ProdModProdDescStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ProductModelID, other.ProductModelID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.ProductDescriptionID, other.ProductDescriptionID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.Culture, other.Culture);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		ProdModProdDescStruct ProdModProdDesc = new ProdModProdDescStruct();




	
	/**
	 * [tFileOutputDelimited_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_8", false);
		start_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"ProdModProdDesc");
					}
				
		int tos_count_tFileOutputDelimited_8 = 0;
		

String fileName_tFileOutputDelimited_8 = "";
    fileName_tFileOutputDelimited_8 = (new java.io.File(context.path+"ProductModelProductDescription.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_8 = null;
    String extension_tFileOutputDelimited_8 = null;
    String directory_tFileOutputDelimited_8 = null;
    if((fileName_tFileOutputDelimited_8.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_8.lastIndexOf(".") < fileName_tFileOutputDelimited_8.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
            extension_tFileOutputDelimited_8 = "";
        } else {
            fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0, fileName_tFileOutputDelimited_8.lastIndexOf("."));
            extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(fileName_tFileOutputDelimited_8.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0, fileName_tFileOutputDelimited_8.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_8.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0, fileName_tFileOutputDelimited_8.lastIndexOf("."));
            extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(fileName_tFileOutputDelimited_8.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
            extension_tFileOutputDelimited_8 = "";
        }
        directory_tFileOutputDelimited_8 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_8 = true;
    java.io.File filetFileOutputDelimited_8 = new java.io.File(fileName_tFileOutputDelimited_8);
    globalMap.put("tFileOutputDelimited_8_FILE_NAME",fileName_tFileOutputDelimited_8);
            int nb_line_tFileOutputDelimited_8 = 0;
            int splitedFileNo_tFileOutputDelimited_8 = 0;
            int currentRow_tFileOutputDelimited_8 = 0;

            final String OUT_DELIM_tFileOutputDelimited_8 = /** Start field tFileOutputDelimited_8:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_8:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_8 = /** Start field tFileOutputDelimited_8:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_8:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_8 != null && directory_tFileOutputDelimited_8.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_8 = new java.io.File(directory_tFileOutputDelimited_8);
                        if(!dir_tFileOutputDelimited_8.exists()) {
                            dir_tFileOutputDelimited_8.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_8 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_8 = new java.io.File(fileName_tFileOutputDelimited_8);
                        if(fileToDelete_tFileOutputDelimited_8.exists()) {
                            fileToDelete_tFileOutputDelimited_8.delete();
                        }
                        outtFileOutputDelimited_8 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_8, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_8.length()==0){
                                        outtFileOutputDelimited_8.write("ProductModelID");
                                            outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
                                        outtFileOutputDelimited_8.write("ProductDescriptionID");
                                            outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
                                        outtFileOutputDelimited_8.write("Culture");
                                            outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
                                        outtFileOutputDelimited_8.write("rowguid");
                                            outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
                                        outtFileOutputDelimited_8.write("ModifiedDate");
                                        outtFileOutputDelimited_8.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);
                                        outtFileOutputDelimited_8.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_8", outtFileOutputDelimited_8);
resourceMap.put("nb_line_tFileOutputDelimited_8", nb_line_tFileOutputDelimited_8);

 



/**
 * [tFileOutputDelimited_8 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";

	
		int tos_count_tDBInput_8 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_8 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_8 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_8  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_8, talendToDBArray_tDBInput_8); 
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
				conn_tDBInput_8 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_8 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = "SELECT SalesLT.ProductModelProductDescription.ProductModelID,\n		SalesLT.ProductModelProductDescription.ProductDescripti"
+"onID,\n		SalesLT.ProductModelProductDescription.Culture,\n		SalesLT.ProductModelProductDescription.rowguid,\n		SalesLT.Prod"
+"uctModelProductDescription.ModifiedDate\nFROM	SalesLT.ProductModelProductDescription";
		    

            	globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);
		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								ProdModProdDesc.ProductModelID = 0;
							} else {
		                          
            ProdModProdDesc.ProductModelID = rs_tDBInput_8.getInt(1);
            if(rs_tDBInput_8.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 2) {
								ProdModProdDesc.ProductDescriptionID = 0;
							} else {
		                          
            ProdModProdDesc.ProductDescriptionID = rs_tDBInput_8.getInt(2);
            if(rs_tDBInput_8.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 3) {
								ProdModProdDesc.Culture = null;
							} else {
	                         		
           		tmpContent_tDBInput_8 = rs_tDBInput_8.getString(3);
            if(tmpContent_tDBInput_8 != null) {
            	if (talendToDBList_tDBInput_8 .contains(rsmd_tDBInput_8.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		ProdModProdDesc.Culture = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
            	} else {
                	ProdModProdDesc.Culture = tmpContent_tDBInput_8;
                }
            } else {
                ProdModProdDesc.Culture = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 4) {
								ProdModProdDesc.rowguid = null;
							} else {
		                          
            ProdModProdDesc.rowguid = rs_tDBInput_8.getObject(4);
            if(rs_tDBInput_8.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 5) {
								ProdModProdDesc.ModifiedDate = null;
							} else {
										
			ProdModProdDesc.ModifiedDate = mssqlGTU_tDBInput_8.getDate(rsmd_tDBInput_8, rs_tDBInput_8, 5);
			
		                    }
					





 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_8 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"ProdModProdDesc"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_8 = new StringBuilder();
                        sb_tFileOutputDelimited_8.append(
                            ProdModProdDesc.ProductModelID
                        );
                            sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
                        sb_tFileOutputDelimited_8.append(
                            ProdModProdDesc.ProductDescriptionID
                        );
                            sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
                            if(ProdModProdDesc.Culture != null) {
                        sb_tFileOutputDelimited_8.append(
                            ProdModProdDesc.Culture
                        );
                            }
                            sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
                            if(ProdModProdDesc.rowguid != null) {
                        sb_tFileOutputDelimited_8.append(
                            ProdModProdDesc.rowguid
                        );
                            }
                            sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
                            if(ProdModProdDesc.ModifiedDate != null) {
                        sb_tFileOutputDelimited_8.append(
                            FormatterUtils.format_Date(ProdModProdDesc.ModifiedDate, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_8.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);


                    nb_line_tFileOutputDelimited_8++;
                    resourceMap.put("nb_line_tFileOutputDelimited_8", nb_line_tFileOutputDelimited_8);

                        outtFileOutputDelimited_8.write(sb_tFileOutputDelimited_8.toString());




 


	tos_count_tFileOutputDelimited_8++;

/**
 * [tFileOutputDelimited_8 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";

	

 



/**
 * [tFileOutputDelimited_8 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";

	

 



/**
 * [tFileOutputDelimited_8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);

 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_8 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";

	



		
			
					if(outtFileOutputDelimited_8!=null) {
						outtFileOutputDelimited_8.flush();
						outtFileOutputDelimited_8.close();
					}
				
				globalMap.put("tFileOutputDelimited_8_NB_LINE",nb_line_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME",fileName_tFileOutputDelimited_8);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_8", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"ProdModProdDesc");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_8", true);
end_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_8 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_8";

	


		if(resourceMap.get("finish_tFileOutputDelimited_8") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_8 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_8");
						if(outtFileOutputDelimited_8!=null) {
							outtFileOutputDelimited_8.flush();
							outtFileOutputDelimited_8.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class SalesOrderDetailStruct implements routines.system.IPersistableRow<SalesOrderDetailStruct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_RawData = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_RawData = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SalesOrderID;

				public int getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public int SalesOrderDetailID;

				public int getSalesOrderDetailID () {
					return this.SalesOrderDetailID;
				}
				
			    public short OrderQty;

				public short getOrderQty () {
					return this.OrderQty;
				}
				
			    public int ProductID;

				public int getProductID () {
					return this.ProductID;
				}
				
			    public Object UnitPrice;

				public Object getUnitPrice () {
					return this.UnitPrice;
				}
				
			    public Object UnitPriceDiscount;

				public Object getUnitPriceDiscount () {
					return this.UnitPriceDiscount;
				}
				
			    public BigDecimal LineTotal;

				public BigDecimal getLineTotal () {
					return this.LineTotal;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SalesOrderID;
						
							result = prime * result + (int) this.SalesOrderDetailID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final SalesOrderDetailStruct other = (SalesOrderDetailStruct) obj;
		
						if (this.SalesOrderID != other.SalesOrderID)
							return false;
					
						if (this.SalesOrderDetailID != other.SalesOrderDetailID)
							return false;
					

		return true;
    }

	public void copyDataTo(SalesOrderDetailStruct other) {

		other.SalesOrderID = this.SalesOrderID;
	            other.SalesOrderDetailID = this.SalesOrderDetailID;
	            other.OrderQty = this.OrderQty;
	            other.ProductID = this.ProductID;
	            other.UnitPrice = this.UnitPrice;
	            other.UnitPriceDiscount = this.UnitPriceDiscount;
	            other.LineTotal = this.LineTotal;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(SalesOrderDetailStruct other) {

		other.SalesOrderID = this.SalesOrderID;
	            	other.SalesOrderDetailID = this.SalesOrderDetailID;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_RawData) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.SalesOrderDetailID = dis.readInt();
					
			        this.OrderQty = dis.readShort();
					
			        this.ProductID = dis.readInt();
					
						this.UnitPrice = (Object) dis.readObject();
					
						this.UnitPriceDiscount = (Object) dis.readObject();
					
						this.LineTotal = (BigDecimal) dis.readObject();
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_RawData) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.SalesOrderDetailID = dis.readInt();
					
			        this.OrderQty = dis.readShort();
					
			        this.ProductID = dis.readInt();
					
						this.UnitPrice = (Object) dis.readObject();
					
						this.UnitPriceDiscount = (Object) dis.readObject();
					
						this.LineTotal = (BigDecimal) dis.readObject();
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// int
				
		            	dos.writeInt(this.SalesOrderDetailID);
					
					// short
				
		            	dos.writeShort(this.OrderQty);
					
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// Object
				
       			    	dos.writeObject(this.UnitPrice);
					
					// Object
				
       			    	dos.writeObject(this.UnitPriceDiscount);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LineTotal);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// int
				
		            	dos.writeInt(this.SalesOrderDetailID);
					
					// short
				
		            	dos.writeShort(this.OrderQty);
					
					// int
				
		            	dos.writeInt(this.ProductID);
					
					// Object
				
       			    	dos.writeObject(this.UnitPrice);
					
					// Object
				
       			    	dos.writeObject(this.UnitPriceDiscount);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LineTotal);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",SalesOrderDetailID="+String.valueOf(SalesOrderDetailID));
		sb.append(",OrderQty="+String.valueOf(OrderQty));
		sb.append(",ProductID="+String.valueOf(ProductID));
		sb.append(",UnitPrice="+String.valueOf(UnitPrice));
		sb.append(",UnitPriceDiscount="+String.valueOf(UnitPriceDiscount));
		sb.append(",LineTotal="+String.valueOf(LineTotal));
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(SalesOrderDetailStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SalesOrderDetailID, other.SalesOrderDetailID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		SalesOrderDetailStruct SalesOrderDetail = new SalesOrderDetailStruct();




	
	/**
	 * [tFileOutputDelimited_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_9", false);
		start_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"SalesOrderDetail");
					}
				
		int tos_count_tFileOutputDelimited_9 = 0;
		

String fileName_tFileOutputDelimited_9 = "";
    fileName_tFileOutputDelimited_9 = (new java.io.File(context.path+"SalesOrderDetail.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_9 = null;
    String extension_tFileOutputDelimited_9 = null;
    String directory_tFileOutputDelimited_9 = null;
    if((fileName_tFileOutputDelimited_9.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_9.lastIndexOf(".") < fileName_tFileOutputDelimited_9.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
            extension_tFileOutputDelimited_9 = "";
        } else {
            fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0, fileName_tFileOutputDelimited_9.lastIndexOf("."));
            extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(fileName_tFileOutputDelimited_9.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0, fileName_tFileOutputDelimited_9.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_9.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0, fileName_tFileOutputDelimited_9.lastIndexOf("."));
            extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(fileName_tFileOutputDelimited_9.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
            extension_tFileOutputDelimited_9 = "";
        }
        directory_tFileOutputDelimited_9 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_9 = true;
    java.io.File filetFileOutputDelimited_9 = new java.io.File(fileName_tFileOutputDelimited_9);
    globalMap.put("tFileOutputDelimited_9_FILE_NAME",fileName_tFileOutputDelimited_9);
            int nb_line_tFileOutputDelimited_9 = 0;
            int splitedFileNo_tFileOutputDelimited_9 = 0;
            int currentRow_tFileOutputDelimited_9 = 0;

            final String OUT_DELIM_tFileOutputDelimited_9 = /** Start field tFileOutputDelimited_9:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_9:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_9 = /** Start field tFileOutputDelimited_9:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_9:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_9 != null && directory_tFileOutputDelimited_9.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_9 = new java.io.File(directory_tFileOutputDelimited_9);
                        if(!dir_tFileOutputDelimited_9.exists()) {
                            dir_tFileOutputDelimited_9.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_9 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_9 = new java.io.File(fileName_tFileOutputDelimited_9);
                        if(fileToDelete_tFileOutputDelimited_9.exists()) {
                            fileToDelete_tFileOutputDelimited_9.delete();
                        }
                        outtFileOutputDelimited_9 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_9, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_9.length()==0){
                                        outtFileOutputDelimited_9.write("SalesOrderID");
                                            outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
                                        outtFileOutputDelimited_9.write("SalesOrderDetailID");
                                            outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
                                        outtFileOutputDelimited_9.write("OrderQty");
                                            outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
                                        outtFileOutputDelimited_9.write("ProductID");
                                            outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
                                        outtFileOutputDelimited_9.write("UnitPrice");
                                            outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
                                        outtFileOutputDelimited_9.write("UnitPriceDiscount");
                                            outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
                                        outtFileOutputDelimited_9.write("LineTotal");
                                            outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
                                        outtFileOutputDelimited_9.write("rowguid");
                                            outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
                                        outtFileOutputDelimited_9.write("ModifiedDate");
                                        outtFileOutputDelimited_9.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);
                                        outtFileOutputDelimited_9.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_9", outtFileOutputDelimited_9);
resourceMap.put("nb_line_tFileOutputDelimited_9", nb_line_tFileOutputDelimited_9);

 



/**
 * [tFileOutputDelimited_9 begin ] stop
 */



	
	/**
	 * [tDBInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_9", false);
		start_Hash.put("tDBInput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_9";

	
		int tos_count_tDBInput_9 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_9 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_9 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_9  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_9, talendToDBArray_tDBInput_9); 
		    int nb_line_tDBInput_9 = 0;
		    java.sql.Connection conn_tDBInput_9 = null;
				conn_tDBInput_9 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_9 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

		    String dbquery_tDBInput_9 = "SELECT SalesLT.SalesOrderDetail.SalesOrderID,\n		SalesLT.SalesOrderDetail.SalesOrderDetailID,\n		SalesLT.SalesOrderDetail"
+".OrderQty,\n		SalesLT.SalesOrderDetail.ProductID,\n		SalesLT.SalesOrderDetail.UnitPrice,\n		SalesLT.SalesOrderDetail.UnitPr"
+"iceDiscount,\n		SalesLT.SalesOrderDetail.LineTotal,\n		SalesLT.SalesOrderDetail.rowguid,\n		SalesLT.SalesOrderDetail.Modifi"
+"edDate\nFROM	SalesLT.SalesOrderDetail";
		    

            	globalMap.put("tDBInput_9_QUERY",dbquery_tDBInput_9);
		    java.sql.ResultSet rs_tDBInput_9 = null;

		    try {
		    	rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
		    	int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

		    String tmpContent_tDBInput_9 = null;
		    
		    
		    while (rs_tDBInput_9.next()) {
		        nb_line_tDBInput_9++;
		        
							if(colQtyInRs_tDBInput_9 < 1) {
								SalesOrderDetail.SalesOrderID = 0;
							} else {
		                          
            SalesOrderDetail.SalesOrderID = rs_tDBInput_9.getInt(1);
            if(rs_tDBInput_9.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 2) {
								SalesOrderDetail.SalesOrderDetailID = 0;
							} else {
		                          
            SalesOrderDetail.SalesOrderDetailID = rs_tDBInput_9.getInt(2);
            if(rs_tDBInput_9.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 3) {
								SalesOrderDetail.OrderQty = 0;
							} else {
		                          
            SalesOrderDetail.OrderQty = rs_tDBInput_9.getShort(3);
            if(rs_tDBInput_9.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 4) {
								SalesOrderDetail.ProductID = 0;
							} else {
		                          
            SalesOrderDetail.ProductID = rs_tDBInput_9.getInt(4);
            if(rs_tDBInput_9.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 5) {
								SalesOrderDetail.UnitPrice = null;
							} else {
		                          
            SalesOrderDetail.UnitPrice = rs_tDBInput_9.getObject(5);
            if(rs_tDBInput_9.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 6) {
								SalesOrderDetail.UnitPriceDiscount = null;
							} else {
		                          
            SalesOrderDetail.UnitPriceDiscount = rs_tDBInput_9.getObject(6);
            if(rs_tDBInput_9.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 7) {
								SalesOrderDetail.LineTotal = null;
							} else {
		                          
            SalesOrderDetail.LineTotal = rs_tDBInput_9.getBigDecimal(7);
            if(rs_tDBInput_9.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 8) {
								SalesOrderDetail.rowguid = null;
							} else {
		                          
            SalesOrderDetail.rowguid = rs_tDBInput_9.getObject(8);
            if(rs_tDBInput_9.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 9) {
								SalesOrderDetail.ModifiedDate = null;
							} else {
										
			SalesOrderDetail.ModifiedDate = mssqlGTU_tDBInput_9.getDate(rsmd_tDBInput_9, rs_tDBInput_9, 9);
			
		                    }
					





 



/**
 * [tDBInput_9 begin ] stop
 */
	
	/**
	 * [tDBInput_9 main ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 


	tos_count_tDBInput_9++;

/**
 * [tDBInput_9 main ] stop
 */
	
	/**
	 * [tDBInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_9 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"SalesOrderDetail"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_9 = new StringBuilder();
                        sb_tFileOutputDelimited_9.append(
                            SalesOrderDetail.SalesOrderID
                        );
                            sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
                        sb_tFileOutputDelimited_9.append(
                            SalesOrderDetail.SalesOrderDetailID
                        );
                            sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
                        sb_tFileOutputDelimited_9.append(
                            SalesOrderDetail.OrderQty
                        );
                            sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
                        sb_tFileOutputDelimited_9.append(
                            SalesOrderDetail.ProductID
                        );
                            sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
                            if(SalesOrderDetail.UnitPrice != null) {
                        sb_tFileOutputDelimited_9.append(
                            SalesOrderDetail.UnitPrice
                        );
                            }
                            sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
                            if(SalesOrderDetail.UnitPriceDiscount != null) {
                        sb_tFileOutputDelimited_9.append(
                            SalesOrderDetail.UnitPriceDiscount
                        );
                            }
                            sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
                            if(SalesOrderDetail.LineTotal != null) {
                        sb_tFileOutputDelimited_9.append(
                            SalesOrderDetail.LineTotal.setScale(6, java.math.RoundingMode.HALF_UP).toPlainString()
                        );
                            }
                            sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
                            if(SalesOrderDetail.rowguid != null) {
                        sb_tFileOutputDelimited_9.append(
                            SalesOrderDetail.rowguid
                        );
                            }
                            sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
                            if(SalesOrderDetail.ModifiedDate != null) {
                        sb_tFileOutputDelimited_9.append(
                            FormatterUtils.format_Date(SalesOrderDetail.ModifiedDate, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_9.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);


                    nb_line_tFileOutputDelimited_9++;
                    resourceMap.put("nb_line_tFileOutputDelimited_9", nb_line_tFileOutputDelimited_9);

                        outtFileOutputDelimited_9.write(sb_tFileOutputDelimited_9.toString());




 


	tos_count_tFileOutputDelimited_9++;

/**
 * [tFileOutputDelimited_9 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_9";

	

 



/**
 * [tFileOutputDelimited_9 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_9";

	

 



/**
 * [tFileOutputDelimited_9 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_9 end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

	}
}finally{
	if (rs_tDBInput_9 != null) {
		rs_tDBInput_9.close();
	}
	if (stmt_tDBInput_9 != null) {
		stmt_tDBInput_9.close();
	}
}
globalMap.put("tDBInput_9_NB_LINE",nb_line_tDBInput_9);

 

ok_Hash.put("tDBInput_9", true);
end_Hash.put("tDBInput_9", System.currentTimeMillis());




/**
 * [tDBInput_9 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_9 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_9";

	



		
			
					if(outtFileOutputDelimited_9!=null) {
						outtFileOutputDelimited_9.flush();
						outtFileOutputDelimited_9.close();
					}
				
				globalMap.put("tFileOutputDelimited_9_NB_LINE",nb_line_tFileOutputDelimited_9);
				globalMap.put("tFileOutputDelimited_9_FILE_NAME",fileName_tFileOutputDelimited_9);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_9", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"SalesOrderDetail");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_9", true);
end_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_9 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_9";

	


		if(resourceMap.get("finish_tFileOutputDelimited_9") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_9 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_9");
						if(outtFileOutputDelimited_9!=null) {
							outtFileOutputDelimited_9.flush();
							outtFileOutputDelimited_9.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_RawData = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_RawData = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int SalesOrderID;

				public int getSalesOrderID () {
					return this.SalesOrderID;
				}
				
			    public short RevisionNumber;

				public short getRevisionNumber () {
					return this.RevisionNumber;
				}
				
			    public java.util.Date OrderDate;

				public java.util.Date getOrderDate () {
					return this.OrderDate;
				}
				
			    public java.util.Date DueDate;

				public java.util.Date getDueDate () {
					return this.DueDate;
				}
				
			    public java.util.Date ShipDate;

				public java.util.Date getShipDate () {
					return this.ShipDate;
				}
				
			    public short Status;

				public short getStatus () {
					return this.Status;
				}
				
			    public Boolean OnlineOrderFlag;

				public Boolean getOnlineOrderFlag () {
					return this.OnlineOrderFlag;
				}
				
			    public String SalesOrderNumber;

				public String getSalesOrderNumber () {
					return this.SalesOrderNumber;
				}
				
			    public String PurchaseOrderNumber;

				public String getPurchaseOrderNumber () {
					return this.PurchaseOrderNumber;
				}
				
			    public String AccountNumber;

				public String getAccountNumber () {
					return this.AccountNumber;
				}
				
			    public int CustomerID;

				public int getCustomerID () {
					return this.CustomerID;
				}
				
			    public Integer ShipToAddressID;

				public Integer getShipToAddressID () {
					return this.ShipToAddressID;
				}
				
			    public Integer BillToAddressID;

				public Integer getBillToAddressID () {
					return this.BillToAddressID;
				}
				
			    public String ShipMethod;

				public String getShipMethod () {
					return this.ShipMethod;
				}
				
			    public String CreditCardApprovalCode;

				public String getCreditCardApprovalCode () {
					return this.CreditCardApprovalCode;
				}
				
			    public Object SubTotal;

				public Object getSubTotal () {
					return this.SubTotal;
				}
				
			    public Object TaxAmt;

				public Object getTaxAmt () {
					return this.TaxAmt;
				}
				
			    public Object Freight;

				public Object getFreight () {
					return this.Freight;
				}
				
			    public Object TotalDue;

				public Object getTotalDue () {
					return this.TotalDue;
				}
				
			    public String Comment;

				public String getComment () {
					return this.Comment;
				}
				
			    public Object rowguid;

				public Object getRowguid () {
					return this.rowguid;
				}
				
			    public java.util.Date ModifiedDate;

				public java.util.Date getModifiedDate () {
					return this.ModifiedDate;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.SalesOrderID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.SalesOrderID != other.SalesOrderID)
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.SalesOrderID = this.SalesOrderID;
	            other.RevisionNumber = this.RevisionNumber;
	            other.OrderDate = this.OrderDate;
	            other.DueDate = this.DueDate;
	            other.ShipDate = this.ShipDate;
	            other.Status = this.Status;
	            other.OnlineOrderFlag = this.OnlineOrderFlag;
	            other.SalesOrderNumber = this.SalesOrderNumber;
	            other.PurchaseOrderNumber = this.PurchaseOrderNumber;
	            other.AccountNumber = this.AccountNumber;
	            other.CustomerID = this.CustomerID;
	            other.ShipToAddressID = this.ShipToAddressID;
	            other.BillToAddressID = this.BillToAddressID;
	            other.ShipMethod = this.ShipMethod;
	            other.CreditCardApprovalCode = this.CreditCardApprovalCode;
	            other.SubTotal = this.SubTotal;
	            other.TaxAmt = this.TaxAmt;
	            other.Freight = this.Freight;
	            other.TotalDue = this.TotalDue;
	            other.Comment = this.Comment;
	            other.rowguid = this.rowguid;
	            other.ModifiedDate = this.ModifiedDate;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.SalesOrderID = this.SalesOrderID;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_RawData.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_RawData.length == 0) {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_RawData, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_RawData, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_RawData.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_RawData.length == 0) {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_RawData = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_LOCAL_PROJECT_RawData, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_RawData, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_RawData) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.RevisionNumber = dis.readShort();
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readDate(dis);
					
					this.ShipDate = readDate(dis);
					
			        this.Status = dis.readShort();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.OnlineOrderFlag = null;
           				} else {
           			    	this.OnlineOrderFlag = dis.readBoolean();
           				}
					
					this.SalesOrderNumber = readString(dis);
					
					this.PurchaseOrderNumber = readString(dis);
					
					this.AccountNumber = readString(dis);
					
			        this.CustomerID = dis.readInt();
					
						this.ShipToAddressID = readInteger(dis);
					
						this.BillToAddressID = readInteger(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CreditCardApprovalCode = readString(dis);
					
						this.SubTotal = (Object) dis.readObject();
					
						this.TaxAmt = (Object) dis.readObject();
					
						this.Freight = (Object) dis.readObject();
					
						this.TotalDue = (Object) dis.readObject();
					
					this.Comment = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_RawData) {

        	try {

        		int length = 0;
		
			        this.SalesOrderID = dis.readInt();
					
			        this.RevisionNumber = dis.readShort();
					
					this.OrderDate = readDate(dis);
					
					this.DueDate = readDate(dis);
					
					this.ShipDate = readDate(dis);
					
			        this.Status = dis.readShort();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.OnlineOrderFlag = null;
           				} else {
           			    	this.OnlineOrderFlag = dis.readBoolean();
           				}
					
					this.SalesOrderNumber = readString(dis);
					
					this.PurchaseOrderNumber = readString(dis);
					
					this.AccountNumber = readString(dis);
					
			        this.CustomerID = dis.readInt();
					
						this.ShipToAddressID = readInteger(dis);
					
						this.BillToAddressID = readInteger(dis);
					
					this.ShipMethod = readString(dis);
					
					this.CreditCardApprovalCode = readString(dis);
					
						this.SubTotal = (Object) dis.readObject();
					
						this.TaxAmt = (Object) dis.readObject();
					
						this.Freight = (Object) dis.readObject();
					
						this.TotalDue = (Object) dis.readObject();
					
					this.Comment = readString(dis);
					
						this.rowguid = (Object) dis.readObject();
					
					this.ModifiedDate = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// short
				
		            	dos.writeShort(this.RevisionNumber);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// java.util.Date
				
						writeDate(this.DueDate,dos);
					
					// java.util.Date
				
						writeDate(this.ShipDate,dos);
					
					// short
				
		            	dos.writeShort(this.Status);
					
					// Boolean
				
						if(this.OnlineOrderFlag == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.OnlineOrderFlag);
		            	}
					
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// String
				
						writeString(this.PurchaseOrderNumber,dos);
					
					// String
				
						writeString(this.AccountNumber,dos);
					
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// Integer
				
						writeInteger(this.ShipToAddressID,dos);
					
					// Integer
				
						writeInteger(this.BillToAddressID,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CreditCardApprovalCode,dos);
					
					// Object
				
       			    	dos.writeObject(this.SubTotal);
					
					// Object
				
       			    	dos.writeObject(this.TaxAmt);
					
					// Object
				
       			    	dos.writeObject(this.Freight);
					
					// Object
				
       			    	dos.writeObject(this.TotalDue);
					
					// String
				
						writeString(this.Comment,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.SalesOrderID);
					
					// short
				
		            	dos.writeShort(this.RevisionNumber);
					
					// java.util.Date
				
						writeDate(this.OrderDate,dos);
					
					// java.util.Date
				
						writeDate(this.DueDate,dos);
					
					// java.util.Date
				
						writeDate(this.ShipDate,dos);
					
					// short
				
		            	dos.writeShort(this.Status);
					
					// Boolean
				
						if(this.OnlineOrderFlag == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeBoolean(this.OnlineOrderFlag);
		            	}
					
					// String
				
						writeString(this.SalesOrderNumber,dos);
					
					// String
				
						writeString(this.PurchaseOrderNumber,dos);
					
					// String
				
						writeString(this.AccountNumber,dos);
					
					// int
				
		            	dos.writeInt(this.CustomerID);
					
					// Integer
				
						writeInteger(this.ShipToAddressID,dos);
					
					// Integer
				
						writeInteger(this.BillToAddressID,dos);
					
					// String
				
						writeString(this.ShipMethod,dos);
					
					// String
				
						writeString(this.CreditCardApprovalCode,dos);
					
					// Object
				
       			    	dos.writeObject(this.SubTotal);
					
					// Object
				
       			    	dos.writeObject(this.TaxAmt);
					
					// Object
				
       			    	dos.writeObject(this.Freight);
					
					// Object
				
       			    	dos.writeObject(this.TotalDue);
					
					// String
				
						writeString(this.Comment,dos);
					
					// Object
				
       			    	dos.writeObject(this.rowguid);
					
					// java.util.Date
				
						writeDate(this.ModifiedDate,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SalesOrderID="+String.valueOf(SalesOrderID));
		sb.append(",RevisionNumber="+String.valueOf(RevisionNumber));
		sb.append(",OrderDate="+String.valueOf(OrderDate));
		sb.append(",DueDate="+String.valueOf(DueDate));
		sb.append(",ShipDate="+String.valueOf(ShipDate));
		sb.append(",Status="+String.valueOf(Status));
		sb.append(",OnlineOrderFlag="+String.valueOf(OnlineOrderFlag));
		sb.append(",SalesOrderNumber="+SalesOrderNumber);
		sb.append(",PurchaseOrderNumber="+PurchaseOrderNumber);
		sb.append(",AccountNumber="+AccountNumber);
		sb.append(",CustomerID="+String.valueOf(CustomerID));
		sb.append(",ShipToAddressID="+String.valueOf(ShipToAddressID));
		sb.append(",BillToAddressID="+String.valueOf(BillToAddressID));
		sb.append(",ShipMethod="+ShipMethod);
		sb.append(",CreditCardApprovalCode="+CreditCardApprovalCode);
		sb.append(",SubTotal="+String.valueOf(SubTotal));
		sb.append(",TaxAmt="+String.valueOf(TaxAmt));
		sb.append(",Freight="+String.valueOf(Freight));
		sb.append(",TotalDue="+String.valueOf(TotalDue));
		sb.append(",Comment="+Comment);
		sb.append(",rowguid="+String.valueOf(rowguid));
		sb.append(",ModifiedDate="+String.valueOf(ModifiedDate));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SalesOrderID, other.SalesOrderID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tFileOutputDelimited_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_10", false);
		start_Hash.put("tFileOutputDelimited_10", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tFileOutputDelimited_10 = 0;
		

String fileName_tFileOutputDelimited_10 = "";
    fileName_tFileOutputDelimited_10 = (new java.io.File(context.path+"SalesOrderHeader.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_10 = null;
    String extension_tFileOutputDelimited_10 = null;
    String directory_tFileOutputDelimited_10 = null;
    if((fileName_tFileOutputDelimited_10.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_10.lastIndexOf(".") < fileName_tFileOutputDelimited_10.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
            extension_tFileOutputDelimited_10 = "";
        } else {
            fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(0, fileName_tFileOutputDelimited_10.lastIndexOf("."));
            extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(fileName_tFileOutputDelimited_10.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(0, fileName_tFileOutputDelimited_10.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_10.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(0, fileName_tFileOutputDelimited_10.lastIndexOf("."));
            extension_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10.substring(fileName_tFileOutputDelimited_10.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_10 = fileName_tFileOutputDelimited_10;
            extension_tFileOutputDelimited_10 = "";
        }
        directory_tFileOutputDelimited_10 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_10 = true;
    java.io.File filetFileOutputDelimited_10 = new java.io.File(fileName_tFileOutputDelimited_10);
    globalMap.put("tFileOutputDelimited_10_FILE_NAME",fileName_tFileOutputDelimited_10);
            int nb_line_tFileOutputDelimited_10 = 0;
            int splitedFileNo_tFileOutputDelimited_10 = 0;
            int currentRow_tFileOutputDelimited_10 = 0;

            final String OUT_DELIM_tFileOutputDelimited_10 = /** Start field tFileOutputDelimited_10:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_10:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_10 = /** Start field tFileOutputDelimited_10:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_10:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_10 != null && directory_tFileOutputDelimited_10.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_10 = new java.io.File(directory_tFileOutputDelimited_10);
                        if(!dir_tFileOutputDelimited_10.exists()) {
                            dir_tFileOutputDelimited_10.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_10 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_10 = new java.io.File(fileName_tFileOutputDelimited_10);
                        if(fileToDelete_tFileOutputDelimited_10.exists()) {
                            fileToDelete_tFileOutputDelimited_10.delete();
                        }
                        outtFileOutputDelimited_10 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_10, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_10.length()==0){
                                        outtFileOutputDelimited_10.write("SalesOrderID");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("RevisionNumber");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("OrderDate");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("DueDate");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("ShipDate");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("Status");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("OnlineOrderFlag");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("SalesOrderNumber");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("PurchaseOrderNumber");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("AccountNumber");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("CustomerID");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("ShipToAddressID");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("BillToAddressID");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("ShipMethod");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("CreditCardApprovalCode");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("SubTotal");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("TaxAmt");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("Freight");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("TotalDue");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("Comment");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("rowguid");
                                            outtFileOutputDelimited_10.write(OUT_DELIM_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.write("ModifiedDate");
                                        outtFileOutputDelimited_10.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_10);
                                        outtFileOutputDelimited_10.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_10", outtFileOutputDelimited_10);
resourceMap.put("nb_line_tFileOutputDelimited_10", nb_line_tFileOutputDelimited_10);

 



/**
 * [tFileOutputDelimited_10 begin ] stop
 */



	
	/**
	 * [tDBInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_10", false);
		start_Hash.put("tDBInput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_10";

	
		int tos_count_tDBInput_10 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_10 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_10 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_10  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_10, talendToDBArray_tDBInput_10); 
		    int nb_line_tDBInput_10 = 0;
		    java.sql.Connection conn_tDBInput_10 = null;
				conn_tDBInput_10 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_10 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

		    String dbquery_tDBInput_10 = "SELECT SalesLT.SalesOrderHeader.SalesOrderID,\n		SalesLT.SalesOrderHeader.RevisionNumber,\n		SalesLT.SalesOrderHeader.Ord"
+"erDate,\n		SalesLT.SalesOrderHeader.DueDate,\n		SalesLT.SalesOrderHeader.ShipDate,\n		SalesLT.SalesOrderHeader.Status,\n		Sa"
+"lesLT.SalesOrderHeader.OnlineOrderFlag,\n		SalesLT.SalesOrderHeader.SalesOrderNumber,\n		SalesLT.SalesOrderHeader.Purchase"
+"OrderNumber,\n		SalesLT.SalesOrderHeader.AccountNumber,\n		SalesLT.SalesOrderHeader.CustomerID,\n		SalesLT.SalesOrderHeader"
+".ShipToAddressID,\n		SalesLT.SalesOrderHeader.BillToAddressID,\n		SalesLT.SalesOrderHeader.ShipMethod,\n		SalesLT.SalesOrde"
+"rHeader.CreditCardApprovalCode,\n		SalesLT.SalesOrderHeader.SubTotal,\n		SalesLT.SalesOrderHeader.TaxAmt,\n		SalesLT.SalesO"
+"rderHeader.Freight,\n		SalesLT.SalesOrderHeader.TotalDue,\n		SalesLT.SalesOrderHeader.Comment,\n		SalesLT.SalesOrderHeader."
+"rowguid,\n		SalesLT.SalesOrderHeader.ModifiedDate\nFROM	SalesLT.SalesOrderHeader";
		    

            	globalMap.put("tDBInput_10_QUERY",dbquery_tDBInput_10);
		    java.sql.ResultSet rs_tDBInput_10 = null;

		    try {
		    	rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
		    	int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

		    String tmpContent_tDBInput_10 = null;
		    
		    
		    while (rs_tDBInput_10.next()) {
		        nb_line_tDBInput_10++;
		        
							if(colQtyInRs_tDBInput_10 < 1) {
								row1.SalesOrderID = 0;
							} else {
		                          
            row1.SalesOrderID = rs_tDBInput_10.getInt(1);
            if(rs_tDBInput_10.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 2) {
								row1.RevisionNumber = 0;
							} else {
		                          
            row1.RevisionNumber = rs_tDBInput_10.getShort(2);
            if(rs_tDBInput_10.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 3) {
								row1.OrderDate = null;
							} else {
										
			row1.OrderDate = mssqlGTU_tDBInput_10.getDate(rsmd_tDBInput_10, rs_tDBInput_10, 3);
			
		                    }
							if(colQtyInRs_tDBInput_10 < 4) {
								row1.DueDate = null;
							} else {
										
			row1.DueDate = mssqlGTU_tDBInput_10.getDate(rsmd_tDBInput_10, rs_tDBInput_10, 4);
			
		                    }
							if(colQtyInRs_tDBInput_10 < 5) {
								row1.ShipDate = null;
							} else {
										
			row1.ShipDate = mssqlGTU_tDBInput_10.getDate(rsmd_tDBInput_10, rs_tDBInput_10, 5);
			
		                    }
							if(colQtyInRs_tDBInput_10 < 6) {
								row1.Status = 0;
							} else {
		                          
            row1.Status = rs_tDBInput_10.getShort(6);
            if(rs_tDBInput_10.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 7) {
								row1.OnlineOrderFlag = null;
							} else {
	                         		
            row1.OnlineOrderFlag = rs_tDBInput_10.getBoolean(7);
            if(rs_tDBInput_10.wasNull()){
                    row1.OnlineOrderFlag = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 8) {
								row1.SalesOrderNumber = null;
							} else {
	                         		
           		tmpContent_tDBInput_10 = rs_tDBInput_10.getString(8);
            if(tmpContent_tDBInput_10 != null) {
            	if (talendToDBList_tDBInput_10 .contains(rsmd_tDBInput_10.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SalesOrderNumber = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
            	} else {
                	row1.SalesOrderNumber = tmpContent_tDBInput_10;
                }
            } else {
                row1.SalesOrderNumber = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 9) {
								row1.PurchaseOrderNumber = null;
							} else {
	                         		
           		tmpContent_tDBInput_10 = rs_tDBInput_10.getString(9);
            if(tmpContent_tDBInput_10 != null) {
            	if (talendToDBList_tDBInput_10 .contains(rsmd_tDBInput_10.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.PurchaseOrderNumber = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
            	} else {
                	row1.PurchaseOrderNumber = tmpContent_tDBInput_10;
                }
            } else {
                row1.PurchaseOrderNumber = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 10) {
								row1.AccountNumber = null;
							} else {
	                         		
           		tmpContent_tDBInput_10 = rs_tDBInput_10.getString(10);
            if(tmpContent_tDBInput_10 != null) {
            	if (talendToDBList_tDBInput_10 .contains(rsmd_tDBInput_10.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.AccountNumber = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
            	} else {
                	row1.AccountNumber = tmpContent_tDBInput_10;
                }
            } else {
                row1.AccountNumber = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 11) {
								row1.CustomerID = 0;
							} else {
		                          
            row1.CustomerID = rs_tDBInput_10.getInt(11);
            if(rs_tDBInput_10.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 12) {
								row1.ShipToAddressID = null;
							} else {
		                          
            row1.ShipToAddressID = rs_tDBInput_10.getInt(12);
            if(rs_tDBInput_10.wasNull()){
                    row1.ShipToAddressID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 13) {
								row1.BillToAddressID = null;
							} else {
		                          
            row1.BillToAddressID = rs_tDBInput_10.getInt(13);
            if(rs_tDBInput_10.wasNull()){
                    row1.BillToAddressID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 14) {
								row1.ShipMethod = null;
							} else {
	                         		
           		tmpContent_tDBInput_10 = rs_tDBInput_10.getString(14);
            if(tmpContent_tDBInput_10 != null) {
            	if (talendToDBList_tDBInput_10 .contains(rsmd_tDBInput_10.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.ShipMethod = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
            	} else {
                	row1.ShipMethod = tmpContent_tDBInput_10;
                }
            } else {
                row1.ShipMethod = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 15) {
								row1.CreditCardApprovalCode = null;
							} else {
	                         		
           		tmpContent_tDBInput_10 = rs_tDBInput_10.getString(15);
            if(tmpContent_tDBInput_10 != null) {
            	if (talendToDBList_tDBInput_10 .contains(rsmd_tDBInput_10.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CreditCardApprovalCode = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
            	} else {
                	row1.CreditCardApprovalCode = tmpContent_tDBInput_10;
                }
            } else {
                row1.CreditCardApprovalCode = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 16) {
								row1.SubTotal = null;
							} else {
		                          
            row1.SubTotal = rs_tDBInput_10.getObject(16);
            if(rs_tDBInput_10.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 17) {
								row1.TaxAmt = null;
							} else {
		                          
            row1.TaxAmt = rs_tDBInput_10.getObject(17);
            if(rs_tDBInput_10.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 18) {
								row1.Freight = null;
							} else {
		                          
            row1.Freight = rs_tDBInput_10.getObject(18);
            if(rs_tDBInput_10.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 19) {
								row1.TotalDue = null;
							} else {
		                          
            row1.TotalDue = rs_tDBInput_10.getObject(19);
            if(rs_tDBInput_10.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 20) {
								row1.Comment = null;
							} else {
	                         		
           		tmpContent_tDBInput_10 = rs_tDBInput_10.getString(20);
            if(tmpContent_tDBInput_10 != null) {
            	if (talendToDBList_tDBInput_10 .contains(rsmd_tDBInput_10.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.Comment = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
            	} else {
                	row1.Comment = tmpContent_tDBInput_10;
                }
            } else {
                row1.Comment = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 21) {
								row1.rowguid = null;
							} else {
		                          
            row1.rowguid = rs_tDBInput_10.getObject(21);
            if(rs_tDBInput_10.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 22) {
								row1.ModifiedDate = null;
							} else {
										
			row1.ModifiedDate = mssqlGTU_tDBInput_10.getDate(rsmd_tDBInput_10, rs_tDBInput_10, 22);
			
		                    }
					





 



/**
 * [tDBInput_10 begin ] stop
 */
	
	/**
	 * [tDBInput_10 main ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 


	tos_count_tDBInput_10++;

/**
 * [tDBInput_10 main ] stop
 */
	
	/**
	 * [tDBInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_10 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_10 = new StringBuilder();
                        sb_tFileOutputDelimited_10.append(
                            row1.SalesOrderID
                        );
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                        sb_tFileOutputDelimited_10.append(
                            row1.RevisionNumber
                        );
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                            if(row1.OrderDate != null) {
                        sb_tFileOutputDelimited_10.append(
                            FormatterUtils.format_Date(row1.OrderDate, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                            if(row1.DueDate != null) {
                        sb_tFileOutputDelimited_10.append(
                            FormatterUtils.format_Date(row1.DueDate, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                            if(row1.ShipDate != null) {
                        sb_tFileOutputDelimited_10.append(
                            FormatterUtils.format_Date(row1.ShipDate, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                        sb_tFileOutputDelimited_10.append(
                            row1.Status
                        );
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                            if(row1.OnlineOrderFlag != null) {
                        sb_tFileOutputDelimited_10.append(
                            row1.OnlineOrderFlag
                        );
                            }
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                            if(row1.SalesOrderNumber != null) {
                        sb_tFileOutputDelimited_10.append(
                            row1.SalesOrderNumber
                        );
                            }
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                            if(row1.PurchaseOrderNumber != null) {
                        sb_tFileOutputDelimited_10.append(
                            row1.PurchaseOrderNumber
                        );
                            }
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                            if(row1.AccountNumber != null) {
                        sb_tFileOutputDelimited_10.append(
                            row1.AccountNumber
                        );
                            }
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                        sb_tFileOutputDelimited_10.append(
                            row1.CustomerID
                        );
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                            if(row1.ShipToAddressID != null) {
                        sb_tFileOutputDelimited_10.append(
                            row1.ShipToAddressID
                        );
                            }
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                            if(row1.BillToAddressID != null) {
                        sb_tFileOutputDelimited_10.append(
                            row1.BillToAddressID
                        );
                            }
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                            if(row1.ShipMethod != null) {
                        sb_tFileOutputDelimited_10.append(
                            row1.ShipMethod
                        );
                            }
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                            if(row1.CreditCardApprovalCode != null) {
                        sb_tFileOutputDelimited_10.append(
                            row1.CreditCardApprovalCode
                        );
                            }
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                            if(row1.SubTotal != null) {
                        sb_tFileOutputDelimited_10.append(
                            row1.SubTotal
                        );
                            }
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                            if(row1.TaxAmt != null) {
                        sb_tFileOutputDelimited_10.append(
                            row1.TaxAmt
                        );
                            }
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                            if(row1.Freight != null) {
                        sb_tFileOutputDelimited_10.append(
                            row1.Freight
                        );
                            }
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                            if(row1.TotalDue != null) {
                        sb_tFileOutputDelimited_10.append(
                            row1.TotalDue
                        );
                            }
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                            if(row1.Comment != null) {
                        sb_tFileOutputDelimited_10.append(
                            row1.Comment
                        );
                            }
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                            if(row1.rowguid != null) {
                        sb_tFileOutputDelimited_10.append(
                            row1.rowguid
                        );
                            }
                            sb_tFileOutputDelimited_10.append(OUT_DELIM_tFileOutputDelimited_10);
                            if(row1.ModifiedDate != null) {
                        sb_tFileOutputDelimited_10.append(
                            FormatterUtils.format_Date(row1.ModifiedDate, "dd-MM-yyyy")
                        );
                            }
                    sb_tFileOutputDelimited_10.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_10);


                    nb_line_tFileOutputDelimited_10++;
                    resourceMap.put("nb_line_tFileOutputDelimited_10", nb_line_tFileOutputDelimited_10);

                        outtFileOutputDelimited_10.write(sb_tFileOutputDelimited_10.toString());




 


	tos_count_tFileOutputDelimited_10++;

/**
 * [tFileOutputDelimited_10 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_10";

	

 



/**
 * [tFileOutputDelimited_10 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_10";

	

 



/**
 * [tFileOutputDelimited_10 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_10 end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

	}
}finally{
	if (rs_tDBInput_10 != null) {
		rs_tDBInput_10.close();
	}
	if (stmt_tDBInput_10 != null) {
		stmt_tDBInput_10.close();
	}
}
globalMap.put("tDBInput_10_NB_LINE",nb_line_tDBInput_10);

 

ok_Hash.put("tDBInput_10", true);
end_Hash.put("tDBInput_10", System.currentTimeMillis());




/**
 * [tDBInput_10 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_10 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_10";

	



		
			
					if(outtFileOutputDelimited_10!=null) {
						outtFileOutputDelimited_10.flush();
						outtFileOutputDelimited_10.close();
					}
				
				globalMap.put("tFileOutputDelimited_10_NB_LINE",nb_line_tFileOutputDelimited_10);
				globalMap.put("tFileOutputDelimited_10_FILE_NAME",fileName_tFileOutputDelimited_10);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_10", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_10", true);
end_Hash.put("tFileOutputDelimited_10", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_10 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_10 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_10";

	


		if(resourceMap.get("finish_tFileOutputDelimited_10") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_10 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_10");
						if(outtFileOutputDelimited_10!=null) {
							outtFileOutputDelimited_10.flush();
							outtFileOutputDelimited_10.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final RawData RawDataClass = new RawData();

        int exitCode = RawDataClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = RawData.class.getClassLoader().getResourceAsStream("local_project/rawdata_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = RawData.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("path", "id_String");
                        if(context.getStringValue("path") == null) {
                            context.path = null;
                        } else {
                            context.path=(String) context.getProperty("path");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("path")) {
                context.path = (String) parentContextMap.get("path");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob





this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBConnection_1) {
globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

e_tDBConnection_1.printStackTrace();

}
try {
errorCode = null;tDBInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_1) {
globalMap.put("tDBInput_1_SUBPROCESS_STATE", -1);

e_tDBInput_1.printStackTrace();

}
try {
errorCode = null;tDBInput_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_2) {
globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

e_tDBInput_2.printStackTrace();

}
try {
errorCode = null;tDBInput_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_3) {
globalMap.put("tDBInput_3_SUBPROCESS_STATE", -1);

e_tDBInput_3.printStackTrace();

}
try {
errorCode = null;tDBInput_4Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_4) {
globalMap.put("tDBInput_4_SUBPROCESS_STATE", -1);

e_tDBInput_4.printStackTrace();

}
try {
errorCode = null;tDBInput_5Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_5) {
globalMap.put("tDBInput_5_SUBPROCESS_STATE", -1);

e_tDBInput_5.printStackTrace();

}
try {
errorCode = null;tDBInput_6Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_6) {
globalMap.put("tDBInput_6_SUBPROCESS_STATE", -1);

e_tDBInput_6.printStackTrace();

}
try {
errorCode = null;tDBInput_7Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_7) {
globalMap.put("tDBInput_7_SUBPROCESS_STATE", -1);

e_tDBInput_7.printStackTrace();

}
try {
errorCode = null;tDBInput_8Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_8) {
globalMap.put("tDBInput_8_SUBPROCESS_STATE", -1);

e_tDBInput_8.printStackTrace();

}
try {
errorCode = null;tDBInput_9Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_9) {
globalMap.put("tDBInput_9_SUBPROCESS_STATE", -1);

e_tDBInput_9.printStackTrace();

}
try {
errorCode = null;tDBInput_10Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBInput_10) {
globalMap.put("tDBInput_10_SUBPROCESS_STATE", -1);

e_tDBInput_10.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : RawData");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     370156 characters generated by Talend Open Studio for Data Integration 
 *     on the 28 de mar√ßo de 2022 01:49:25 BRT
 ************************************************************************************************/